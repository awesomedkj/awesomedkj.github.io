<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>首页-丁康健的个人博客</title>
  
  <subtitle>假作真时真亦假</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://actionding.github.io/"/>
  <updated>2020-09-24T11:06:39.358Z</updated>
  <id>https://actionding.github.io/</id>
  
  <author>
    <name>丁康健</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL笔记</title>
    <link href="https://actionding.github.io/2020/07/MySQL/"/>
    <id>https://actionding.github.io/2020/07/MySQL/</id>
    <published>2020-07-05T19:02:02.000Z</published>
    <updated>2020-09-24T11:06:39.358Z</updated>
    
    <content type="html"><![CDATA[<p>我的MySQL笔记</p><a id="more"></a><h2 id="1-MySQL概述"><a href="#1-MySQL概述" class="headerlink" title="1 MySQL概述"></a>1 MySQL概述</h2><p>MySQL是一个<strong>关系型数据库管理系统</strong>，由瑞典MySQL AB公司开发，属于Oracle旗下产品。MySQL是最流行的关系型数据库管理系统之一。</p><h3 id="1-1-数据库的常见概念"><a href="#1-1-数据库的常见概念" class="headerlink" title="1.1 数据库的常见概念"></a>1.1 数据库的常见概念</h3><h4 id="1-1-1-DB"><a href="#1-1-1-DB" class="headerlink" title="1.1.1 DB"></a>1.1.1 DB</h4><p>Database，数据库，存储数据的容器</p><h4 id="1-1-2-DBMS"><a href="#1-1-2-DBMS" class="headerlink" title="1.1.2 DBMS"></a>1.1.2 DBMS</h4><p>Database Management System，数据库管理系统，又称为数据库软件或数据库产品，用于创建或管理数据库</p><h4 id="1-1-3-SQL"><a href="#1-1-3-SQL" class="headerlink" title="1.1.3 SQL"></a>1.1.3 SQL</h4><p>Structured Query Language，结构化查询语言，用于和数据库通信的语言，不是某个数据库软件特有的，而是几乎所有的主流数据库软件通用的语言</p><blockquote><p>常见的数据库管理系统：MySQL、Oracle、db2、SQLserver</p></blockquote><h3 id="1-2-MySQL的介绍"><a href="#1-2-MySQL的介绍" class="headerlink" title="1.2 MySQL的介绍"></a>1.2 MySQL的介绍</h3><p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，属于Oracle 旗下产品</p><p>08年被SUN公司收购，09年SUN被Oracle收购</p><p>属于<strong>C/S架构</strong>的软件，一般安装服务端</p><p>分为<strong>企业版</strong>和<strong>社区版</strong></p><h3 id="1-3-MySQL的优点"><a href="#1-3-MySQL的优点" class="headerlink" title="1.3 MySQL的优点"></a>1.3 MySQL的优点</h3><p>1、开源、免费、成本低<br>2、性能高、移植性也好<br>3、体积小，便于安装</p><h3 id="1-4-MySQL语言的分类"><a href="#1-4-MySQL语言的分类" class="headerlink" title="1.4 MySQL语言的分类"></a>1.4 MySQL语言的分类</h3><h4 id="1-4-1-DML"><a href="#1-4-1-DML" class="headerlink" title="1.4.1 DML"></a>1.4.1 DML</h4><p>Data Manipulation Language：数据操纵语句，用于添加、删除、修改、查询数据库记录，并检查数据完整性</p><h4 id="1-4-2-DDL"><a href="#1-4-2-DDL" class="headerlink" title="1.4.2 DDL"></a>1.4.2 DDL</h4><p>Data Definition Language：数据定义语句，用于库和表的创建、修改、删除。</p><h4 id="1-4-3-DCL"><a href="#1-4-3-DCL" class="headerlink" title="1.4.3 DCL"></a>1.4.3 DCL</h4><p>Data Control Language：数据控制语句，用于定义用户的访问权限和安全级别。</p><h3 id="1-5-MySQL服务的启动和停止"><a href="#1-5-MySQL服务的启动和停止" class="headerlink" title="1.5 MySQL服务的启动和停止"></a>1.5 MySQL服务的启动和停止</h3><p>方式一：通过命令行</p><p>​    <code>net start [服务名]</code><br>​    <code>net stop [服务名]</code></p><p>方式二：计算机——右击——管理——服务</p><h3 id="1-6-MySQL服务的登录和退出"><a href="#1-6-MySQL服务的登录和退出" class="headerlink" title="1.6 MySQL服务的登录和退出"></a>1.6 MySQL服务的登录和退出</h3><p>登录：<code>mysql [-h 主机名 -P 端口号] -u[用户名] -p[密码]</code></p><p>退出：<code>exit</code> 或 <code>ctrl+C</code></p><hr><h2 id="2-DQL语言"><a href="#2-DQL语言" class="headerlink" title="2 DQL语言"></a>2 DQL语言</h2><p>DQL（Data Query Language）：数据查询语言，用来查询记录（数据）</p><h3 id="2-1-基础查询"><a href="#2-1-基础查询" class="headerlink" title="2.1 基础查询"></a>2.1 基础查询</h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  查询列表 </span><br><span class="line">FROM</span><br><span class="line">  表名 ;</span><br></pre></td></tr></table></figure><p>查询列表：表中的字段、常量值、表达式、函数</p><p>查询的结果是一个虚拟的表格</p><h4 id="2-1-1-查询表中的单个字段"><a href="#2-1-1-查询表中的单个字段" class="headerlink" title="2.1.1 查询表中的单个字段"></a>2.1.1 查询表中的单个字段</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name FROM employees;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-查询表中的多个字段"><a href="#2-1-2-查询表中的多个字段" class="headerlink" title="2.1.2 查询表中的多个字段"></a>2.1.2 查询表中的多个字段</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,salary,email FROM employees;</span><br></pre></td></tr></table></figure><h4 id="2-1-3-查询表中的所有字段"><a href="#2-1-3-查询表中的所有字段" class="headerlink" title="2.1.3 查询表中的所有字段"></a>2.1.3 查询表中的所有字段</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  &#96;employee_id&#96;,</span><br><span class="line">  &#96;first_name&#96;,</span><br><span class="line">  &#96;last_name&#96;,</span><br><span class="line">  &#96;email&#96;,</span><br><span class="line">  &#96;phone_number&#96;,</span><br><span class="line">  &#96;job_id&#96;,</span><br><span class="line">  &#96;salary&#96;,</span><br><span class="line">  &#96;commission_pct&#96;,</span><br><span class="line">  &#96;manager_id&#96;,</span><br><span class="line">  &#96;department_id&#96;,</span><br><span class="line">  &#96;hiredate&#96; </span><br><span class="line">FROM</span><br><span class="line">  &#96;employees&#96; ;</span><br><span class="line">&#x2F;*</span><br><span class="line"> * F12 格式化</span><br><span class="line"> * 不是引号，是着重号，用来区分字段和关键字</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><p><strong>或</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees;</span><br><span class="line"># 表中字段顺序固定</span><br></pre></td></tr></table></figure><h4 id="2-1-4-查询常量值"><a href="#2-1-4-查询常量值" class="headerlink" title="2.1.4 查询常量值"></a>2.1.4 查询常量值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 100;</span><br><span class="line">SELECT &#39;john&#39;;</span><br><span class="line"># 不区分字符和字符串，都是字符型，用单引号</span><br></pre></td></tr></table></figure><h4 id="2-1-5-查询表达式"><a href="#2-1-5-查询表达式" class="headerlink" title="2.1.5 查询表达式"></a>2.1.5 查询表达式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 100%98;</span><br></pre></td></tr></table></figure><h4 id="2-1-6-查询函数"><a href="#2-1-6-查询函数" class="headerlink" title="2.1.6 查询函数"></a>2.1.6 查询函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT VERSION();</span><br></pre></td></tr></table></figure><h4 id="2-1-7-起别名"><a href="#2-1-7-起别名" class="headerlink" title="2.1.7 起别名"></a>2.1.7 起别名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 方式一：使用as</span><br><span class="line">SELECT 100%98 AS 结果;</span><br><span class="line">SELECT last_name AS 姓,first_name AS 名 FROM employees;</span><br><span class="line">&#x2F;*</span><br><span class="line"> *1 便于理解</span><br><span class="line"> *2 如果要查询的字段有重名的情况，使用别名可以区分开来</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 方式二：使用空格</span><br><span class="line">SELECT last_name 姓,first_name 名 FROM employees;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 案例：查询salary，显示结果为 out put</span><br><span class="line">SELECT salary AS &quot;out put&quot; FROM employees;</span><br><span class="line"># 这里建议使用双引号，单引号也可以</span><br></pre></td></tr></table></figure><h4 id="2-1-8-去重"><a href="#2-1-8-去重" class="headerlink" title="2.1.8 去重"></a>2.1.8 去重</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用DISTINCT关键字</span><br><span class="line">SELECT DISTINCT department_id FROM employees;</span><br></pre></td></tr></table></figure><h4 id="2-1-9-号的使用"><a href="#2-1-9-号的使用" class="headerlink" title="2.1.9 +号的使用"></a>2.1.9 <code>+</code>号的使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line"></span><br><span class="line">java中的+号：</span><br><span class="line">①运算符，两个操作数都为数值型</span><br><span class="line">②连接符，只要有一个操作数为字符串</span><br><span class="line"></span><br><span class="line">mysql中的+号：</span><br><span class="line">仅仅只有一个功能：运算符</span><br><span class="line"></span><br><span class="line">select 100+90; 两个操作数都为数值型，则做加法运算</span><br><span class="line">select &#39;123&#39;+90;只要其中一方为字符型，试图将字符型数值转换成数值型</span><br><span class="line">如果转换成功，则继续做加法运算</span><br><span class="line">select &#39;john&#39;+90;如果转换失败，则将字符型数值转换成0</span><br><span class="line"></span><br><span class="line">select null+10; 只要其中一方为null，则结果肯定为null</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"># 案例:查询员工名和姓连接成一个字段，并显示为 姓名</span><br><span class="line"></span><br><span class="line">SELECT CONCAT(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;) AS 结果;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">  错误的写法</span><br><span class="line">select </span><br><span class="line">  last_name + first_name as 姓名 </span><br><span class="line">from</span><br><span class="line">  employees ;</span><br><span class="line">*&#x2F;</span><br><span class="line"># 正确的写法，使用CONCAT()函数</span><br><span class="line">SELECT </span><br><span class="line">  CONCAT(&#96;first_name&#96;, &#96;last_name&#96;) AS 姓名 </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure><h4 id="附：几个函数"><a href="#附：几个函数" class="headerlink" title="附：几个函数"></a>附：几个函数</h4><p>1）<code>concat()</code>函数</p><p>功能：拼接字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT(str1，str2，str3,...);</span><br></pre></td></tr></table></figure><p>2）<code>ifnull()</code> 函数</p><p>功能：判断某字段或表达式是否为<code>null</code>，如果为<code>null</code>返回指定的值，否则返回原本的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT IFNULL(commission_pct,0) from employees;</span><br></pre></td></tr></table></figure><p>3）<code>isnull()</code> 函数</p><p>功能：判断某字段或表达式是否为null，如果是，则返回1，否则返回0</p><h3 id="2-2-条件查询"><a href="#2-2-条件查询" class="headerlink" title="2.2 条件查询"></a>2.2 条件查询</h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  查询列表 </span><br><span class="line">FROM</span><br><span class="line">  表名 </span><br><span class="line">WHERE 筛选条件 ;</span><br></pre></td></tr></table></figure><p>筛选条件的分类：</p><p>1）简单条件运算符</p><p>2）逻辑运算符</p><p>3）模糊查询</p><h4 id="2-2-1-简单条件运算符"><a href="#2-2-1-简单条件运算符" class="headerlink" title="2.2.1 简单条件运算符"></a>2.2.1 简单条件运算符</h4><table><thead><tr><th align="center">&gt;</th><th>&lt;</th><th align="center">=</th><th align="center">!=</th><th align="center">&lt;&gt;</th><th align="center">&gt;=</th><th align="center">&lt;=</th><th align="center">&lt;=&gt;</th></tr></thead><tbody><tr><td align="center">大于</td><td>小于</td><td align="center">等于</td><td align="center">不等于</td><td align="center">不等于</td><td align="center">大于等于</td><td align="center">小于等于</td><td align="center">安全等于</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 案例1：查询工资 &gt; 12000的员工信息</span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE salary &gt; 12000 ;</span><br><span class="line"></span><br><span class="line"># 案例2：查询部门编号不等于90号的员工名和部门编号</span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  department_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE department_id &lt;&gt; 90 ;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-逻辑运算符"><a href="#2-2-2-逻辑运算符" class="headerlink" title="2.2.2 逻辑运算符"></a>2.2.2 逻辑运算符</h4><table><thead><tr><th align="center">&amp;&amp;</th><th align="center">||</th><th align="center">!</th></tr></thead><tbody><tr><td align="center">and</td><td align="center">or</td><td align="center">not</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 案例1：查询工资在10000到20000之间的员工名、工资以及奖金</span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  salary,</span><br><span class="line">  commission_pct </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE salary &gt; 10000 </span><br><span class="line">  AND salary &lt; 20000 ;</span><br><span class="line"></span><br><span class="line"># 案例2：查询部门编号不是在90到100之间，或者工资高于15000的员工信息</span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE department_id &lt; 90 </span><br><span class="line">  OR department_id &gt; 110 </span><br><span class="line">  OR salary &gt; 15000 ;</span><br><span class="line">&#x2F;*</span><br><span class="line">WHERE not (</span><br><span class="line">    department_id &gt;&#x3D; 90 </span><br><span class="line">    AND department_id &lt;&#x3D; 110</span><br><span class="line">  ) </span><br><span class="line">  OR salary &gt; 15000 ;</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-模糊查询"><a href="#2-2-3-模糊查询" class="headerlink" title="2.2.3 模糊查询"></a>2.2.3 模糊查询</h4><p>1）<code>like</code>:一般搭<strong>配通配符</strong>使用，可以判断字符型或数值型</p><p>通配符：</p><ul><li><p>%任意多个字符，，包含0个字符</p></li><li><p>_任意单个字符</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 案例1：查询员工名中包含字符a的员工信息</span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE last_name LIKE &#39;%a%&#39; ;</span><br><span class="line"></span><br><span class="line"># 案例2：查询员工名中第三个字符为c，第五个字符为h的员工名和工资</span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  salary </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE last_name LIKE &#39;__c_h%&#39; ;</span><br><span class="line"></span><br><span class="line"># 案例三：查询员工名中第二个字符为_的员工名</span><br><span class="line">SELECT </span><br><span class="line">  last_name </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE last_name LIKE &#39;_\_%&#39; ;</span><br><span class="line"># WHERE last_name LIKE &#39;_$_%&#39; ESCAPE &#39;$&#39;;</span><br><span class="line"># 关键字ESCAPE：转义</span><br></pre></td></tr></table></figure><p>2） <code>between and</code></p><ul><li>使用between and可以提高语句的简洁度</li><li>包含临界值</li><li>两个临界值不要调换顺序</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 案例1：查询员工编号在100到120之间的员工信息</span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE employee_id BETWEEN 100 </span><br><span class="line">  AND 120 ;</span><br><span class="line"># 等价于</span><br><span class="line"># employee_id &gt;&#x3D; 100 AND employee_id &lt;&#x3D; 120;</span><br></pre></td></tr></table></figure><p>3）<code>in</code><br>含义：判断某字段的值是否属于in列表中的某一项<br>特点：</p><ul><li>使用in提高语句简洁度</li><li>in列表的值类型必须统一或兼容</li><li>in列表中不能使用通配符<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 案例：查询员工的工种编号是 ITPROG、AD_VP、AD_PRES中的一个员工名和工种编号</span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  job_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE job_id IN (&#39;ITPROG&#39;, &#39;AD_VP&#39;, &#39;AD_PRES&#39;) ;</span><br><span class="line"># WHERE job_id IN (&#39;ITPROG&#39;, &#39;AD_%&#39;) ; # 错误</span><br><span class="line">&#x2F;*</span><br><span class="line">WHERE job_id &#x3D; &#39;ITPROG&#39; </span><br><span class="line">  OR job_id &#x3D; &#39;AD_VP&#39; </span><br><span class="line">  OR job_id &#x3D; &#39;AD_PRES&#39; ;</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure></li></ul><p>4） <code>is null</code> /<code>is not null</code>：用于判断null值</p><blockquote><p>= 或 &lt;&gt; 不能用于判断null值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 案例1：查询没有奖金的员工名和奖金率</span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  commission_pct</span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE commission_pct IS NULL ;</span><br><span class="line"></span><br><span class="line"># 案例2：查询有奖金的员工名和奖金率</span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  commission_pct</span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE commission_pct IS NOT NULL ;</span><br></pre></td></tr></table></figure><p><strong>附</strong></p><p>``IS NULL<code>pk</code>&lt;=&gt;<code></code>IS NULL<code>：仅仅可以判断NULL值，可读性较高，建议使用</code>&lt;=&gt; `：既可以判断NULL值，有可以判断普通的数值，可读性较低</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 安全等于 &lt;&#x3D;&gt;</span><br><span class="line"># 案例1：查询没有奖金的员工名和奖金率</span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  commission_pct</span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE commission_pct &lt;&#x3D;&gt; NULL ;</span><br><span class="line"></span><br><span class="line"># 案例2：查询工资为12000的员工信息</span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  salary</span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE salary &lt;&#x3D;&gt; 12000 ;</span><br></pre></td></tr></table></figure><h3 id="2-3-排序查询"><a href="#2-3-排序查询" class="headerlink" title="2.3 排序查询"></a>2.3 排序查询</h3><h4 id="2-3-1-语法"><a href="#2-3-1-语法" class="headerlink" title="2.3.1 语法"></a>2.3.1 语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  查询列表 </span><br><span class="line">FROM</span><br><span class="line">  表 </span><br><span class="line">WHERE 【筛选条件】 </span><br><span class="line">ORDER BY 排序列表【 ASC | DESC 】</span><br></pre></td></tr></table></figure><h4 id="2-3-2-特点"><a href="#2-3-2-特点" class="headerlink" title="2.3.2 特点"></a>2.3.2 特点</h4><p>​    1 asc表示升序，desc表示降序，如果不写，默认升序<br>​    2 order by 子句中可以支持单个字段、多个字段、表达式、函数、别名<br>​    3 order by 子句一般放在查询语句的最后面，limit子句除外</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"># 案例1：查询员工信息，要求工资从高到低排序</span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">ORDER BY salary ASC ;</span><br><span class="line"># ORDER BY salary ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">ORDER BY salary DESC ;</span><br><span class="line"></span><br><span class="line"># 案例2：查询部门编号大于等于90的员工信息，按入职时间的先后进行排序</span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE department_id &gt;&#x3D; 90 </span><br><span class="line">ORDER BY hiredate ASC ;</span><br><span class="line"></span><br><span class="line"># 案例3：按年薪的高低显示员工的选型和年薪【按表达式排序】</span><br><span class="line">SELECT </span><br><span class="line">  *,</span><br><span class="line">  salary * 12 * (1 + IFNULL(commission_pct, 0)) 年薪 </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">ORDER BY salary * 12 * (1 + IFNULL(commission_pct, 0)) DESC ;</span><br><span class="line"></span><br><span class="line"># 案例4：按年薪的高低显示员工的选型和年薪【按别名排序】</span><br><span class="line">SELECT </span><br><span class="line">  *,</span><br><span class="line">  salary * 12 * (1 + IFNULL(commission_pct, 0)) 年薪 </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">ORDER BY 年薪 DESC ;</span><br><span class="line"></span><br><span class="line"># 案例5：按姓名的长度显示员工的姓名和工资【按函数排序】</span><br><span class="line">SELECT </span><br><span class="line">  LENGTH(last_name) 字节长度,</span><br><span class="line">  last_name,</span><br><span class="line">  salary </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">ORDER BY LENGTH(last_name) DESC ;</span><br><span class="line"></span><br><span class="line"># 案例6：查询员工信息，要求先按工资排序，再按员工编号排序【按多个字段排序】</span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">ORDER BY salary ASC,</span><br><span class="line">  employee_id DESC ;</span><br></pre></td></tr></table></figure><h4 id="附：常见函数"><a href="#附：常见函数" class="headerlink" title="附：常见函数"></a>附：常见函数</h4><p>1）字符函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"># 1. length 获取参数值的字节个数</span><br><span class="line">SELECT </span><br><span class="line">  LENGTH(&#39;john&#39;) ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  LENGTH(&#39;张三丰hhh&#39;) ;</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE &#39;%char%&#39; ;</span><br><span class="line"></span><br><span class="line"># 2. concat 拼接字符串</span><br><span class="line">SELECT </span><br><span class="line">  CONCAT(last_name, &#39;_&#39;, first_name) 姓名 </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line"># 3. upper、lower </span><br><span class="line">SELECT </span><br><span class="line">  UPPER(&#39;john&#39;) ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  LOWER(&#39;John&#39;) ;</span><br><span class="line"></span><br><span class="line"># 案例：将姓变大写，名变小写，然后拼接</span><br><span class="line">SELECT </span><br><span class="line">  CONCAT(</span><br><span class="line">    UPPER(last_name),</span><br><span class="line">    &#39;_&#39;,</span><br><span class="line">    LOWER(first_name)</span><br><span class="line">  ) 姓名 </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line"># 4. substr、substring </span><br><span class="line"># 注意：索引从1开始</span><br><span class="line"></span><br><span class="line"># 截取从指定索引处后面所有字符</span><br><span class="line">SELECT </span><br><span class="line">  SUBSTR(</span><br><span class="line">    &#39;李莫愁爱上了陆展元&#39;,</span><br><span class="line">    7</span><br><span class="line">  ) out_put ;</span><br><span class="line"></span><br><span class="line"># 截取从指定索引处指定长度的字符</span><br><span class="line">SELECT </span><br><span class="line">  SUBSTR(</span><br><span class="line">    &#39;李莫愁爱上了陆展元&#39;,</span><br><span class="line">    1,</span><br><span class="line">    3</span><br><span class="line">  ) out_put ;</span><br><span class="line"></span><br><span class="line"># 案例：姓名中首字符大写，其他字符小写，然后用_拼接，显示出来</span><br><span class="line">SELECT </span><br><span class="line">  CONCAT(</span><br><span class="line">    UPPER(SUBSTR(last_name, 1, 1)),</span><br><span class="line">    &#39;_&#39;,</span><br><span class="line">    LOWER(SUBSTR(last_name, 2))</span><br><span class="line">  ) out_put </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line"># 5. instr 返回子串第一次出现的索引，如果找不到，返回0</span><br><span class="line">SELECT </span><br><span class="line">  INSTR(</span><br><span class="line">    &#39;杨不悔爱上了殷六侠&#39;,</span><br><span class="line">    &#39;殷六侠&#39;</span><br><span class="line">  ) AS out_put ;</span><br><span class="line"></span><br><span class="line"># 6. trim</span><br><span class="line">SELECT </span><br><span class="line">  LENGTH(TRIM(&#39;    张翠山    &#39;)) AS out_put ;</span><br><span class="line">  </span><br><span class="line">SELECT </span><br><span class="line">  TRIM(&#39;a&#39; FROM &#39;aaa张aaa翠aaa山aaa&#39;) AS out_put ;</span><br><span class="line"></span><br><span class="line"># 7. lpad 用指定的字符实现左填充指定长度</span><br><span class="line">SELECT </span><br><span class="line">  LPAD(&#39;殷素素&#39;, 10, &#39;*&#39;) AS out_put ;</span><br><span class="line">  </span><br><span class="line">SELECT </span><br><span class="line">  LPAD(&#39;殷素素&#39;, 2, &#39;*&#39;) AS out_put ;</span><br><span class="line"></span><br><span class="line"># 8. rpad 用指定的字符实现做右充指定长度</span><br><span class="line">SELECT </span><br><span class="line">  RPAD(&#39;殷素素&#39;, 10, &#39;*&#39;) AS out_put ;</span><br><span class="line"></span><br><span class="line"># 9. replace 替换</span><br><span class="line">SELECT </span><br><span class="line">  REPLACE(</span><br><span class="line">    &#39;张无忌爱上了周芷若&#39;,</span><br><span class="line">    &#39;周芷若&#39;,</span><br><span class="line">    &#39;赵敏&#39;</span><br><span class="line">  ) AS out_put ;</span><br></pre></td></tr></table></figure><p>2）数学函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 1. round 四舍五入</span><br><span class="line">SELECT </span><br><span class="line">  ROUND(1.65) ; # 2</span><br><span class="line"># ROUND(1.45) ; # 1</span><br><span class="line"># ROUND(-1.65) ; # -2</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  ROUND(1.654,2) ; # 1.65</span><br><span class="line">  </span><br><span class="line"># 2. ceil 向上取整，返回 &gt;&#x3D;该参数的最小整数</span><br><span class="line">SELECT </span><br><span class="line">  CEIL(1.002) ;</span><br><span class="line"># CEIL(-1.002); # -1</span><br><span class="line"></span><br><span class="line"># 3. floor 向下取整，，返回 &lt;&#x3D;该参数的最大整数</span><br><span class="line">SELECT </span><br><span class="line">  FLOOR(- 9.99) ; # -10</span><br><span class="line">  </span><br><span class="line"># 4. truncate 截断</span><br><span class="line">SELECT </span><br><span class="line">  TRUNCATE(1.6999, 1) ; # 1.6</span><br><span class="line"># 5. mod 取模、取余</span><br><span class="line"># a mod b --&gt; a-a&#x2F;b*b</span><br><span class="line">SELECT </span><br><span class="line">  MOD(10, 3) ;</span><br><span class="line"> </span><br><span class="line">SELECT </span><br><span class="line">  10 % 3 ;</span><br></pre></td></tr></table></figure><p>3）日期函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"># 1. now 返回当前系统日期 + 时间</span><br><span class="line">SELECT </span><br><span class="line">  NOW() ;</span><br><span class="line"></span><br><span class="line"># 2. curdate 返回当前系统日期，不包含时间</span><br><span class="line">SELECT </span><br><span class="line">  CURDATE() ;</span><br><span class="line"></span><br><span class="line"># 3. curtime 返回当前系统时间，不包含日期</span><br><span class="line">SELECT </span><br><span class="line">  CURTIME() ;</span><br><span class="line"></span><br><span class="line"># 4. 可以获取指定的部分，年、月、日、小时、分钟、秒</span><br><span class="line">SELECT </span><br><span class="line">  YEAR(NOW()) 年 ;</span><br><span class="line">  </span><br><span class="line">SELECT </span><br><span class="line">  YEAR(&#39;1997-1-1&#39;) 年 ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  YEAR(hiredate) 年 </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  MONTH(NOW()) 月 ;</span><br><span class="line">  </span><br><span class="line">SELECT </span><br><span class="line">  DAY(NOW()) 日 ;</span><br><span class="line">  </span><br><span class="line">SELECT </span><br><span class="line">  HOUR(NOW()) 时 ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  MINUTE(NOW()) 分 ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  SECOND(NOW()) 秒 ;</span><br><span class="line"></span><br><span class="line"># 5. str_to_date 将日期格式的字符转换为指定格式的日期</span><br><span class="line">SELECT </span><br><span class="line">  STR_TO_DATE(&#39;1997-3-2&#39;, &#39;%Y-%c-%d&#39;) AS out_put ;</span><br><span class="line">  </span><br><span class="line"># 案例：查询入职日期为1992-4-3的员工信息</span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE hiredate &#x3D; &#39;1992-4-3&#39; ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE hiredate &#x3D; STR_TO_DATE(&#39;4-3 1992&#39;, &#39;%c-%d %Y&#39;) ;</span><br><span class="line"></span><br><span class="line"># 6. date_format 将日期转换为字符</span><br><span class="line">SELECT </span><br><span class="line">  DATE_FORMAT(NOW(), &#39;%y年%m月%d日&#39;) AS out_put ;</span><br><span class="line"></span><br><span class="line"># 案例：查询有奖金的员工名和入职日期（xx月&#x2F;xx日 xx年）</span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  DATE_FORMAT(hiredate, &#39;%m月&#x2F;%d日 %y年&#39;) 入职日期 </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE commission_pct IS NOT NULL ;</span><br></pre></td></tr></table></figure><p>4）流程控制函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"># 1. if函数：if else 的效果</span><br><span class="line">SELECT </span><br><span class="line">  IF(10 &gt; 5, &#39;大&#39;, &#39;小&#39;) ;</span><br><span class="line">  </span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  commission_pct,</span><br><span class="line">  IF(</span><br><span class="line">    commission_pct IS NULL,</span><br><span class="line">    &#39;没奖金，呵呵&#39;,</span><br><span class="line">    &#39;有奖金，嘻嘻&#39;</span><br><span class="line">  ) 备注 </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line"># 2. case函数的使用一：switch case 的效果</span><br><span class="line">&#x2F;*</span><br><span class="line">Java中</span><br><span class="line">switch(变量或表达式)&#123;</span><br><span class="line">case 常量1: 语句1; break; </span><br><span class="line">...</span><br><span class="line">default: 语句n; break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MySQL中</span><br><span class="line">case 要判断的字段或表达式</span><br><span class="line">when 常量1 then 要显示的值1 或 语句1;</span><br><span class="line">when 常量2 then 要显示的值2 或 语句2;</span><br><span class="line">...</span><br><span class="line">else 要显示的值n 或 语句n;</span><br><span class="line">end</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;*</span><br><span class="line">案例：查询员工的工资，要求</span><br><span class="line"></span><br><span class="line">部门号 &#x3D; 30，显示的工资为1.1倍</span><br><span class="line">部门号 &#x3D; 40，显示的工资为1.2倍</span><br><span class="line">部门号 &#x3D; 50，显示的工资为1.3倍</span><br><span class="line">其他部门，显示的工资为原工资</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT </span><br><span class="line">  salary 原始工资,</span><br><span class="line">  department_id,</span><br><span class="line">  CASE</span><br><span class="line">    department_id </span><br><span class="line">    WHEN 30 </span><br><span class="line">    THEN salary * 1.1 </span><br><span class="line">    WHEN 40 </span><br><span class="line">    THEN salary * 1.2 </span><br><span class="line">    WHEN 50 </span><br><span class="line">    THEN salary * 1.3 </span><br><span class="line">    ELSE salary </span><br><span class="line">  END AS 新工资 </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line"># case函数的使用二：类似于 多重if</span><br><span class="line">&#x2F;*</span><br><span class="line">java中</span><br><span class="line">if（条件1）&#123;</span><br><span class="line">语句1</span><br><span class="line">&#125; else if（条件2）&#123;</span><br><span class="line">语句2</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">else &#123;</span><br><span class="line">语句n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MySQL中</span><br><span class="line">case </span><br><span class="line">when 条件1 then 要显示的值1 或 语句1;</span><br><span class="line">when 条件2 then 要显示的值2 或 语句2;</span><br><span class="line">...</span><br><span class="line">else 要显示的值n 或 语句n;</span><br><span class="line">end</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;*</span><br><span class="line">案例：查询员工的工资情况</span><br><span class="line">如果工资 &gt; 20000, 显示A级别</span><br><span class="line">如果工资 &gt; 15000, 显示B级别</span><br><span class="line">如果工资 &gt; 10000, 显示C级别</span><br><span class="line">否则，显示D级别</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT </span><br><span class="line">  salary,</span><br><span class="line">  CASE</span><br><span class="line">    WHEN salary &gt; 20000 </span><br><span class="line">    THEN &#39;A&#39; </span><br><span class="line">    WHEN salary &gt; 15000 </span><br><span class="line">    THEN &#39;B&#39; </span><br><span class="line">    WHEN salary &gt; 10000 </span><br><span class="line">    THEN &#39;C&#39; </span><br><span class="line">    ELSE &#39;D&#39; </span><br><span class="line">  END AS 工资级别 </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure><p>5）其他函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 1. version 查看版本号</span><br><span class="line">SELECT </span><br><span class="line">  VERSION() ;</span><br><span class="line"></span><br><span class="line"># 2. database 查看当前数据库</span><br><span class="line">SELECT </span><br><span class="line">  DATABASE() ;</span><br><span class="line"></span><br><span class="line"># 3. user 查看当前用户</span><br><span class="line">SELECT </span><br><span class="line">  USER() ;</span><br></pre></td></tr></table></figure><h3 id="2-4-分组函数"><a href="#2-4-分组函数" class="headerlink" title="2.4 分组函数"></a>2.4 分组函数</h3><h4 id="2-4-1-功能"><a href="#2-4-1-功能" class="headerlink" title="2.4.1 功能"></a>2.4.1 功能</h4><p>​    用作统计使用，又称为<strong>聚合函数</strong> 或 <strong>统计函数</strong> 或 <strong>组函数</strong></p><h4 id="2-4-2-分类"><a href="#2-4-2-分类" class="headerlink" title="2.4.2 分类"></a>2.4.2 分类</h4><p>​    sum 求和、avg 平均值、max 最大值、min 最小值、count 计算个数</p><h4 id="2-4-3-特点"><a href="#2-4-3-特点" class="headerlink" title="2.4.3 特点"></a>2.4.3 特点</h4><ol><li>sum、avg一般用于处理<strong>数值类型</strong>；max、min、count可以处理<strong>任何类型</strong></li><li>以上分组函数都忽略null值</li><li>可以和distinct搭配实现去重的运算</li><li>count函数：一般使用count(*)用作统计行数</li><li>和分组函数一同查询的字段要求是group by后的字段</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"># 1 简单使用</span><br><span class="line">SELECT </span><br><span class="line">  SUM(salary) </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  AVG(salary) </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  MAX(salary) </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  MIN(salary) </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  COUNT(salary) </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line">  </span><br><span class="line">SELECT </span><br><span class="line">  SUM(salary) 和,</span><br><span class="line">  ROUND(AVG(salary), 2) 平均,</span><br><span class="line">  MAX(salary) 最大,</span><br><span class="line">  MIN(salary) 最小,</span><br><span class="line">  COUNT(salary) 个数 </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line"># 参数支持哪些类型</span><br><span class="line"># select sum(last_name), avg(last_name) from employees;</span><br><span class="line">SELECT </span><br><span class="line">  SUM(hiredate),</span><br><span class="line">  AVG(hiredate) </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  MAX(last_name),</span><br><span class="line">  MIN(last_name) </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  MAX(hiredate),</span><br><span class="line">  MIN(hiredate) </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line">  </span><br><span class="line">SELECT </span><br><span class="line">  COUNT(commission_pct) </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line"># 3 是否忽略null值</span><br><span class="line">SELECT </span><br><span class="line">  SUM(commission_pct),</span><br><span class="line">  AVG(commission_pct),</span><br><span class="line">  SUM(commission_pct)&#x2F;35,</span><br><span class="line">  SUM(commission_pct)&#x2F;107</span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  MAX(commission_pct),</span><br><span class="line">  MIN(commission_pct)</span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line">  </span><br><span class="line">SELECT </span><br><span class="line">  COUNT(commission_pct)</span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line">  </span><br><span class="line"># 4 和distinct搭配</span><br><span class="line">SELECT </span><br><span class="line">  SUM(DISTINCT salary),</span><br><span class="line">  SUM(salary) </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  COUNT(DISTINCT salary),</span><br><span class="line">  COUNT(salary) </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line"># 5 count函数的详细介绍</span><br><span class="line">SELECT </span><br><span class="line">  COUNT(salary) </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  COUNT(*) </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line">  </span><br><span class="line">SELECT </span><br><span class="line">  COUNT(1) </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">效率：</span><br><span class="line">myisam存储引擎下，count(*)的效率高</span><br><span class="line">innodb存储引擎下，COUNT(*)和COUNT(1)的效率差不多，比COUNT(字段)要高一些</span><br><span class="line">*&#x2F;</span><br><span class="line"># 6 和分组函数一同查询的字段有限制</span><br><span class="line"></span><br><span class="line"># select avg(salary),employees_id from employee;</span><br><span class="line"># 和分组函数一同查询的字段要求是group by后的字段</span><br></pre></td></tr></table></figure><h3 id="2-5-分组查询"><a href="#2-5-分组查询" class="headerlink" title="2.5 分组查询"></a>2.5 分组查询</h3><h4 id="2-5-1-语法"><a href="#2-5-1-语法" class="headerlink" title="2.5.1 语法"></a>2.5.1 语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select 分组函数，列（要求出现在group by的后面）</span><br><span class="line">from 表名</span><br><span class="line">【where 筛选条件】</span><br><span class="line">group by 分组的列表</span><br><span class="line">【order by 子句】</span><br></pre></td></tr></table></figure><blockquote><p>注意：查询列表必须特殊，要求是分组函数和group by后出现的字段</p></blockquote><h4 id="2-5-2-特点"><a href="#2-5-2-特点" class="headerlink" title="2.5.2 特点"></a>2.5.2 特点</h4><ol><li>分组查询中的筛选条件分为两类                </li></ol><table><thead><tr><th align="center"></th><th align="center">数据源</th><th align="center">位置</th><th align="center">关键字</th></tr></thead><tbody><tr><td align="center">分组前筛选</td><td align="center">原始表</td><td align="center">group by 子句的前面</td><td align="center">where</td></tr><tr><td align="center">分组后筛选</td><td align="center">分组后的结果集</td><td align="center">group by 子句的后面</td><td align="center">having</td></tr></tbody></table><blockquote><p>①分组函数做条件肯定是放在having子句中<br>②能用分组前筛选的，就优先考虑使用分组前筛选</p></blockquote><ol start="2"><li>group by子句支持单个字段分组，多个字段分组（多个字段之间用逗号隔开，没有顺序要求），表达式或函数（用得较少）</li><li>也可以添加排序（排序放在整个分组查询的最后）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"># 案例1：查询每个工种的最高工资</span><br><span class="line">SELECT </span><br><span class="line">  MAX(salary),</span><br><span class="line">  job_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">GROUP BY job_id ;</span><br><span class="line"></span><br><span class="line"># 案例2： 查询每个位置上部门个数</span><br><span class="line">SELECT COUNT(*),location_id</span><br><span class="line">FROM departments</span><br><span class="line">GROUP BY location_id;</span><br><span class="line"></span><br><span class="line"># 添加筛选条件</span><br><span class="line"># 案例1：查询邮箱中包含a字符的，每个部门的平均工资</span><br><span class="line">SELECT </span><br><span class="line">  AVG(salary),</span><br><span class="line">  department_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE email LIKE &#39;%a%&#39; </span><br><span class="line">GROUP BY department_id ;</span><br><span class="line"></span><br><span class="line"># 案例2：查询有奖金的每个领导手下员工的最高工资</span><br><span class="line">SELECT MAX(salary),manager_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE commission_pct IS NOT NULL</span><br><span class="line">GROUP BY manager_id;</span><br><span class="line"></span><br><span class="line"># 添加复杂的筛选条件</span><br><span class="line"># 案例1：查询哪个部门的员工数 &gt; 2</span><br><span class="line"># ①查询每个部门的员工个数</span><br><span class="line">SELECT </span><br><span class="line">  COUNT(*),</span><br><span class="line">  department_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">GROUP BY department_id ;</span><br><span class="line"></span><br><span class="line"># ②根据①的结果进行筛选，查询哪个部门的员工数&gt;2</span><br><span class="line">SELECT </span><br><span class="line">  COUNT(*),</span><br><span class="line">  department_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">GROUP BY department_id </span><br><span class="line">HAVING COUNT(*)&gt;2;</span><br><span class="line"></span><br><span class="line"># 案例2：查询每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资</span><br><span class="line"># ①查询每个工种有奖金的员工的最高工资</span><br><span class="line">SELECT </span><br><span class="line">  MAX(salary),</span><br><span class="line">  job_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE commission_pct IS NOT NULL </span><br><span class="line">GROUP BY job_id ;</span><br><span class="line"></span><br><span class="line"># ②根据①结果继续筛选，最高工资 &gt; 12000</span><br><span class="line">SELECT </span><br><span class="line">  MAX(salary),</span><br><span class="line">  job_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE commission_pct IS NOT NULL </span><br><span class="line">GROUP BY job_id </span><br><span class="line">HAVING MAX(salary) &gt; 12000 ;</span><br><span class="line"></span><br><span class="line"># 案例3：查询领导编号&gt;102的每个领导手下的最低工资&gt;5000的领导编号是哪个，以及其最低工资</span><br><span class="line"># ①查询每个领导手下的员工最低工资</span><br><span class="line">SELECT MIN(salary),manager_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY manager_id;</span><br><span class="line"></span><br><span class="line"># ②添加筛选条件：编号&gt;102</span><br><span class="line">SELECT </span><br><span class="line">  MIN(salary),</span><br><span class="line">  manager_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE manager_id &gt; 102 </span><br><span class="line">GROUP BY manager_id ;</span><br><span class="line"></span><br><span class="line"># ③添加筛选条件：最低工资&gt;5000</span><br><span class="line">SELECT </span><br><span class="line">  MIN(salary),</span><br><span class="line">  manager_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE manager_id &gt; 102 </span><br><span class="line">GROUP BY manager_id </span><br><span class="line">HAVING MIN(salary) &gt; 5000 ;</span><br><span class="line"></span><br><span class="line"># 按表达式或函数分组</span><br><span class="line"># 案例：按员工姓名的长度分组，查询每一组的员工个数，筛选员工个数&gt;5的有哪些</span><br><span class="line"># ①查询每个长度的员工个数</span><br><span class="line">SELECT </span><br><span class="line">  COUNT(*),</span><br><span class="line">  LENGTH(last_name) len_name </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">GROUP BY LENGTH(last_name) ;</span><br><span class="line"></span><br><span class="line"># ②添加筛选条件</span><br><span class="line">SELECT </span><br><span class="line">  COUNT(*) C,</span><br><span class="line">  LENGTH(last_name) len_name </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">GROUP BY len_name </span><br><span class="line">HAVING C &gt; 5 ;</span><br><span class="line"></span><br><span class="line"># 按多个字段分组</span><br><span class="line"># 案例：查询每个部门每个工种的员工的平均工资</span><br><span class="line">SELECT </span><br><span class="line">  AVG(salary),</span><br><span class="line">  department_id,</span><br><span class="line">  job_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">GROUP BY job_id,</span><br><span class="line">  department_id ;</span><br><span class="line"></span><br><span class="line"># 添加排序</span><br><span class="line"># 案例：查询每个部门每个工种的员工的平均工资，并且按平均工资的高低显示</span><br><span class="line">SELECT </span><br><span class="line">  AVG(salary),</span><br><span class="line">  department_id,</span><br><span class="line">  job_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE department_id IS NOT NULL </span><br><span class="line">GROUP BY job_id,</span><br><span class="line">  department_id </span><br><span class="line">HAVING AVG(salary) &gt; 10000 </span><br><span class="line">ORDER BY AVG(salary) DESC ;</span><br></pre></td></tr></table></figure><h3 id="2-5-连接查询"><a href="#2-5-连接查询" class="headerlink" title="2.5 连接查询"></a>2.5 连接查询</h3><h4 id="2-5-1-含义"><a href="#2-5-1-含义" class="headerlink" title="2.5.1 含义"></a>2.5.1 含义</h4><p>又称多表查询，当查询的字段来自于多个表时，就会用到连接查询</p><blockquote><p><strong>笛卡尔乘积现象</strong>：表1 有 m 行，表2有 n 行，结果有 m*n 行</p><p>发生原因：没有有效的连接条件<br>如何避免：添加有效的连接条件</p></blockquote><h4 id="2-5-2-分类"><a href="#2-5-2-分类" class="headerlink" title="2.5.2 分类"></a>2.5.2 分类</h4><p>1）按年代分类：<br>    ① sql92标准：仅仅支持内连接<br>    ② sql99标准【推荐】：支持内连接+外连接（左外和右外）+交叉连接<br>2）按功能分类：<br>    ① 内连接：等值连接、非等值连接、自连接<br>    ② 外连接：左外连接、右外连接、全外连接<br>    ③ 交叉连接</p><h4 id="2-5-3-sql92标准"><a href="#2-5-3-sql92标准" class="headerlink" title="2.5.3 sql92标准"></a>2.5.3 sql92标准</h4><p>1）等值连接</p><p>​    ① 多表等值连接的结果为多表的交集部分<br>​    ② n表连接，至少需要n-1个连接条件<br>​    ③ 多表的顺序没有要求<br>​    ④ 一般需要为表起别名<br>​    ⑤ 可以搭配前面介绍的所有子句使用，比如排序、分组、筛选</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"># 案例1：查询女神名和对应的男神名</span><br><span class="line">SELECT </span><br><span class="line">  NAME,</span><br><span class="line">  boyName </span><br><span class="line">FROM</span><br><span class="line">  beaupty,</span><br><span class="line">  boys </span><br><span class="line">WHERE beauty.boyfriend_id &#x3D; boys.id ;</span><br><span class="line"></span><br><span class="line">USE myemployees;</span><br><span class="line"># 案例2：查询员工名和对应的部门名</span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  department_name </span><br><span class="line">FROM</span><br><span class="line">  employees,</span><br><span class="line">  departments </span><br><span class="line">WHERE employees.&#96;department_id&#96; &#x3D; departments.&#96;department_id&#96; ;</span><br><span class="line"></span><br><span class="line"># 2、为表取别名</span><br><span class="line">&#x2F;*</span><br><span class="line">①提高语句的简洁度</span><br><span class="line">②区分多个重名的字段</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"># 查询员工名、工种号、工种名</span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  e.job_id,</span><br><span class="line">  job_title </span><br><span class="line">FROM</span><br><span class="line">  employees e,</span><br><span class="line">  jobs j</span><br><span class="line">WHERE e.&#96;job_id&#96; &#x3D; j.&#96;job_id&#96; ;</span><br><span class="line"></span><br><span class="line"># 3、两个表的顺序是否可以调换</span><br><span class="line"># 查询员工名、工种号、工种名</span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  e.job_id,</span><br><span class="line">  job_title </span><br><span class="line">FROM</span><br><span class="line">  jobs j,</span><br><span class="line">  employees e</span><br><span class="line">WHERE e.&#96;job_id&#96; &#x3D; j.&#96;job_id&#96; ;</span><br><span class="line"></span><br><span class="line"># 4、可以加筛选吗？</span><br><span class="line"># 案例1：查询有奖金的员工名、部门名</span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  department_name,</span><br><span class="line">  commission_pct </span><br><span class="line">FROM</span><br><span class="line">  employees e,</span><br><span class="line">  departments d </span><br><span class="line">WHERE e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96; </span><br><span class="line">  AND e.&#96;commission_pct&#96; IS NOT NULL ;</span><br><span class="line"></span><br><span class="line"># 案例2：查询城市名中第二个字符为o的部门名和城市名</span><br><span class="line">SELECT </span><br><span class="line">  department_name,</span><br><span class="line">  city </span><br><span class="line">FROM</span><br><span class="line">  departments d,</span><br><span class="line">  locations l </span><br><span class="line">WHERE d.&#96;location_id&#96; &#x3D; l.&#96;location_id&#96; </span><br><span class="line">  AND city LIKE &#39;_o%&#39; ;</span><br><span class="line"></span><br><span class="line"># 5、可以加分组吗？</span><br><span class="line"># 案例1：查询每个城市的部门个数</span><br><span class="line">SELECT </span><br><span class="line">  COUNT(*) 个数,</span><br><span class="line">  city </span><br><span class="line">FROM</span><br><span class="line">  locations l,</span><br><span class="line">  departments d </span><br><span class="line">WHERE l.&#96;location_id&#96; &#x3D; d.&#96;location_id&#96; </span><br><span class="line">GROUP BY city ;</span><br><span class="line"></span><br><span class="line"># 案例2：查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资</span><br><span class="line">SELECT </span><br><span class="line">  department_name,</span><br><span class="line">  d.manager_id,</span><br><span class="line">  MIN(salary) </span><br><span class="line">FROM</span><br><span class="line">  departments d,</span><br><span class="line">  employees e </span><br><span class="line">WHERE d.&#96;department_id&#96; &#x3D; e.&#96;department_id&#96;</span><br><span class="line">  AND commission_pct IS NOT NULL </span><br><span class="line">GROUP BY department_name,</span><br><span class="line">  d.manager_id ;</span><br><span class="line"></span><br><span class="line"># 6、可以加排序吗？</span><br><span class="line"># 案例：查询每个工种的工种名和员工的个数，并且按员工个数降序</span><br><span class="line">SELECT </span><br><span class="line">  job_title,</span><br><span class="line">  COUNT(*) 个数 </span><br><span class="line">FROM</span><br><span class="line">  jobs j,</span><br><span class="line">  employees e </span><br><span class="line">WHERE e.&#96;job_id&#96; &#x3D; j.&#96;job_id&#96; </span><br><span class="line">GROUP BY job_title </span><br><span class="line">ORDER BY COUNT(*) DESC ;</span><br><span class="line"></span><br><span class="line"># 7、可以实现三表连接吗？</span><br><span class="line"># 案例：查询员工名、部门名和所在的城市</span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  department_name,</span><br><span class="line">  city </span><br><span class="line">FROM</span><br><span class="line">  employees e,</span><br><span class="line">  departments d,</span><br><span class="line">  locations l </span><br><span class="line">WHERE e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96; </span><br><span class="line">  AND d.&#96;location_id&#96; &#x3D; l.&#96;location_id&#96; ;</span><br><span class="line">#  and city like &#39;s%&#39; </span><br><span class="line"># order by last_name ;</span><br></pre></td></tr></table></figure><p>2）非等值连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 案例1：查询员工的工资和工资等级</span><br><span class="line"></span><br><span class="line">SELECT salary, grade_level</span><br><span class="line">FROM employees e, job_grades j</span><br><span class="line">WHERE salary BETWEEN j.&#96;lowest_sal&#96; AND j.&#96;highest_sal&#96;;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">CREATE TABLE job_grades (</span><br><span class="line">  grade_level VARCHAR (3),</span><br><span class="line">  lowest_sal int,</span><br><span class="line">  highest_sal int</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line">INSERT INTO job_grades</span><br><span class="line">VALUES (&#39;A&#39;, 1000, 2999);</span><br><span class="line"></span><br><span class="line">INSERT INTO job_grades</span><br><span class="line">VALUES (&#39;B&#39;, 3000, 5999);</span><br><span class="line"></span><br><span class="line">INSERT INTO job_grades</span><br><span class="line">VALUES(&#39;C&#39;, 6000, 9999);</span><br><span class="line"></span><br><span class="line">INSERT INTO job_grades</span><br><span class="line">VALUES(&#39;D&#39;, 10000, 14999);</span><br><span class="line"></span><br><span class="line">INSERT INTO job_grades</span><br><span class="line">VALUES(&#39;E&#39;, 15000, 24999);</span><br><span class="line"></span><br><span class="line">INSERT INTO job_grades</span><br><span class="line">VALUES(&#39;F&#39;, 25000, 40000);</span><br><span class="line"></span><br><span class="line">select * from job_grades;</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p>3）自连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 案例：查询员工名和上级领导名</span><br><span class="line">SELECT e.employee_id, e.last_name, m.employee_id, m.last_name</span><br><span class="line">FROM employees e, employees m</span><br><span class="line">WHERE e.&#96;manager_id&#96; &#x3D; m.&#96;employee_id&#96;;</span><br></pre></td></tr></table></figure><h4 id="2-5-4-sql99标准"><a href="#2-5-4-sql99标准" class="headerlink" title="2.5.4 sql99标准"></a>2.5.4 sql99标准</h4><p><strong>语法</strong>    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select 查询列表</span><br><span class="line">from 表1 别名 【连接类型】</span><br><span class="line">join 表2 别名</span><br><span class="line">on 连接条件</span><br><span class="line">【where 筛选条件】</span><br><span class="line">【group by 分组】</span><br><span class="line">【having 筛选条件】</span><br><span class="line">【order by 排序列表】</span><br></pre></td></tr></table></figure><p><strong>分类</strong></p><p>① 内连接（★）：inner</p><p>② 外连接</p><ul><li>左外（★）：left 【outer】</li><li>右外（★）：right 【outer】</li><li>全外：full 【outer】</li></ul><p>③ 交叉连接：cross</p><p><strong>1） 内连接</strong></p><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select 查询列表</span><br><span class="line">from 表1 别名</span><br><span class="line">inner join 表2 别名</span><br><span class="line">on 连接条件</span><br></pre></td></tr></table></figure><p><strong>分类</strong></p><p>① 等值连接<br>② 非等值连接<br>③ 自连接</p><p>特点：<br>① 添加排序、分组、筛选<br>② inner可以省略<br>③ 筛选条件放在where后面，连接条件放在on后面，提高分离性，便于阅读<br>④ inner join连接和sql92语法中的等值连接效果是一样的，都是查询多表的交集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">USE myemployees;</span><br><span class="line"></span><br><span class="line"># 1 等值连接</span><br><span class="line"># 案例1：查询员工名、部门名</span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  department_name </span><br><span class="line">FROM</span><br><span class="line">  employees e </span><br><span class="line">  INNER JOIN departments d </span><br><span class="line">    ON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96; ;</span><br><span class="line"></span><br><span class="line"># 案例2：查询名字中包含e的员工名和工种名（添加筛选）</span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  job_title </span><br><span class="line">FROM</span><br><span class="line">  employees e </span><br><span class="line">  INNER JOIN jobs j </span><br><span class="line">    ON e.&#96;job_id&#96; &#x3D; j.&#96;job_id&#96; </span><br><span class="line">WHERE last_name LIKE &#39;%e%&#39; ;</span><br><span class="line"></span><br><span class="line"># 案例3：查询部门个数&gt;3的城市名和部门个数，（添加分组+筛选）</span><br><span class="line">SELECT </span><br><span class="line">  city,</span><br><span class="line">  COUNT(*) 个数</span><br><span class="line">FROM</span><br><span class="line">  locations l </span><br><span class="line">  INNER JOIN departments d </span><br><span class="line">    ON l.&#96;location_id&#96; &#x3D; d.&#96;location_id&#96; </span><br><span class="line">GROUP BY city </span><br><span class="line">HAVING COUNT(*) &gt; 3 ;</span><br><span class="line"></span><br><span class="line"># 案例4：查询哪个部门的员工个数&gt;3的部门名和员工个数，并按个数降序（添加排序）</span><br><span class="line">SELECT </span><br><span class="line">  department_name,</span><br><span class="line">  COUNT(*) 个数</span><br><span class="line">FROM</span><br><span class="line">  departments d </span><br><span class="line">  INNER JOIN employees e </span><br><span class="line">    ON d.&#96;department_id&#96; &#x3D; e.&#96;department_id&#96; </span><br><span class="line">GROUP BY department_name </span><br><span class="line">HAVING COUNT(*) &gt; 3 </span><br><span class="line">ORDER BY COUNT(*) DESC ;</span><br><span class="line"></span><br><span class="line"># 案例5：查询员工名、部门名、工种名，并按部门名降序（添加三表连接）</span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  department_name,</span><br><span class="line">  job_title </span><br><span class="line">FROM</span><br><span class="line">  employees e </span><br><span class="line">  INNER JOIN departments d </span><br><span class="line">    ON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96; </span><br><span class="line">  INNER JOIN jobs j </span><br><span class="line">    ON e.&#96;job_id&#96; &#x3D; j.&#96;job_id&#96; </span><br><span class="line">ORDER BY department_name DESC ;</span><br><span class="line"></span><br><span class="line"># 2 非等值连接</span><br><span class="line"># 案例1：查询员工的工资级别</span><br><span class="line">SELECT </span><br><span class="line">  salary,</span><br><span class="line">  grade_level </span><br><span class="line">FROM</span><br><span class="line">  employees e </span><br><span class="line">  JOIN job_grades g </span><br><span class="line">    ON e.&#96;salary&#96; BETWEEN g.&#96;lowest_sal&#96; </span><br><span class="line">    AND g.&#96;highest_sal&#96; ;</span><br><span class="line"></span><br><span class="line"># 案例2：查询工资级别的个数&gt;20的个数，并且按工资级别降序</span><br><span class="line">SELECT </span><br><span class="line">  grade_level,</span><br><span class="line">  COUNT(*) </span><br><span class="line">FROM</span><br><span class="line">  employees e </span><br><span class="line">  JOIN job_grades g </span><br><span class="line">    ON e.&#96;salary&#96; BETWEEN g.&#96;lowest_sal&#96; </span><br><span class="line">    AND g.&#96;highest_sal&#96; </span><br><span class="line">GROUP BY grade_level </span><br><span class="line">HAVING COUNT(*) &gt; 20 </span><br><span class="line">ORDER BY grade_level DESC ;</span><br><span class="line"></span><br><span class="line"># 3 自连接</span><br><span class="line"># 案例1：查询员工的名字、上级的名字</span><br><span class="line">SELECT </span><br><span class="line">  e.last_name 员工,</span><br><span class="line">  m.last_name 上级 </span><br><span class="line">FROM</span><br><span class="line">  employees e </span><br><span class="line">  JOIN employees m </span><br><span class="line">    ON e.&#96;manager_id&#96; &#x3D; m.&#96;employee_id&#96; ;</span><br><span class="line"></span><br><span class="line"># 案例2：查询姓名中包含字符k的员工的名字、上级的名字</span><br><span class="line">SELECT </span><br><span class="line">  e.last_name 员工,</span><br><span class="line">  m.last_name 上级 </span><br><span class="line">FROM</span><br><span class="line">  employees e </span><br><span class="line">  JOIN employees m </span><br><span class="line">    ON e.&#96;manager_id&#96; &#x3D; m.&#96;employee_id&#96; </span><br><span class="line">WHERE e.&#96;last_name&#96; LIKE &#39;%k%&#39; ;</span><br></pre></td></tr></table></figure><p><strong>2）外连接</strong></p><p> <strong>应用场景</strong>：用于查询一个表中有，另一个表没有的记录</p><p> <strong>特点</strong><br>① 外连接的查询结果为主表中的所有记录，<br>    如果从表中有和它匹配的，则显示匹配的值；<br>    如果从表中没有和它匹配的，则显示null；<br>    外连接查询结果 = 内连接结果 + 主表中有而从表没有的记录</p><p>② 左外连接 ，left join 左边的是主表；<br>    右外连接，right join 右边的是主表</p><p>③ 左外和右外交换两个表的顺序，可以实现同样的效果 </p><p>④ 全外连接 = 内连接的结果 + 表1中有但表2没有的 + 表2中有但表1没有的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"># 引入：查询男朋友不在男神表的女神名</span><br><span class="line">USE girls;</span><br><span class="line">SELECT * FROM beauty;</span><br><span class="line">SELECT * FROM boys;</span><br><span class="line"></span><br><span class="line"># 左外连接</span><br><span class="line">SELECT </span><br><span class="line">  b.name </span><br><span class="line">FROM</span><br><span class="line">  beauty b </span><br><span class="line">  LEFT OUTER JOIN boys bo </span><br><span class="line">    ON b.&#96;boyfriend_id&#96; &#x3D; bo.&#96;id&#96; </span><br><span class="line">WHERE bo.&#96;id&#96; IS NULL ;</span><br><span class="line"></span><br><span class="line"># 右外连接</span><br><span class="line">SELECT </span><br><span class="line">  b.name </span><br><span class="line">FROM</span><br><span class="line">  boys bo </span><br><span class="line">  RIGHT OUTER JOIN beauty b </span><br><span class="line">    ON b.&#96;boyfriend_id&#96; &#x3D; bo.&#96;id&#96; </span><br><span class="line">WHERE bo.&#96;id&#96; IS NULL ;</span><br><span class="line"></span><br><span class="line"># 案例1：查询哪个部门没有员工</span><br><span class="line">USE myemployees;</span><br><span class="line"></span><br><span class="line"># 左外</span><br><span class="line">SELECT </span><br><span class="line">  d.*,</span><br><span class="line">  e.employee_id </span><br><span class="line">FROM</span><br><span class="line">  departments d </span><br><span class="line">  LEFT OUTER JOIN employees e </span><br><span class="line">    ON d.&#96;department_id&#96; &#x3D; e.&#96;department_id&#96; </span><br><span class="line">WHERE employee_id IS NULL ;</span><br><span class="line"></span><br><span class="line"># 右外</span><br><span class="line">SELECT </span><br><span class="line">  d.*,</span><br><span class="line">  e.employee_id </span><br><span class="line">FROM</span><br><span class="line">  employees e </span><br><span class="line">  RIGHT </span><br><span class="line">  OUTER JOIN departments d </span><br><span class="line">    ON d.&#96;department_id&#96; &#x3D; e.&#96;department_id&#96; </span><br><span class="line">WHERE e.&#96;employee_id&#96; IS NULL ;</span><br><span class="line"></span><br><span class="line"># 全外</span><br><span class="line">USE girls ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  b.*,</span><br><span class="line">  bo.* </span><br><span class="line">FROM</span><br><span class="line">  beauty b FULL </span><br><span class="line">  OUTER JOIN boys bo </span><br><span class="line">    ON b.&#96;boyfriend_id&#96; &#x3D; bo.id ;</span><br><span class="line"># MySQL不支持全外连接</span><br></pre></td></tr></table></figure><p><strong>3）交叉连接</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  b.*,</span><br><span class="line">  bo.* </span><br><span class="line">FROM</span><br><span class="line">  beauty b </span><br><span class="line">  CROSS JOIN boys bo ;</span><br></pre></td></tr></table></figure><blockquote><p><strong>sql92 vs sql99</strong><br>功能：sql99支持的较多<br>可读性：sql99实现连接条件和筛选条件的分离，可读性较高</p></blockquote><h3 id="2-6-子查询"><a href="#2-6-子查询" class="headerlink" title="2.6 子查询"></a>2.6 子查询</h3><h4 id="2-6-1-含义"><a href="#2-6-1-含义" class="headerlink" title="2.6.1 含义"></a>2.6.1 含义</h4><p>出现在其他语句中的select语句，称为 子查询 或 内查询<br>外部的查询语句，称为 主查询 或 外查询</p><h4 id="2-6-2-分类"><a href="#2-6-2-分类" class="headerlink" title="2.6.2 分类"></a>2.6.2 分类</h4><p>① 按子查询出现的位置：</p><ul><li>select后面：<pre><code>仅仅支持标量子查询</code></pre></li><li>from后面：<pre><code>支持表子查询</code></pre></li><li>where 或 having后面：★<pre><code>标量子查询（单行） √  列子查询（多行） √      行子查询</code></pre></li><li>exists后面（相关子查询）：<pre><code>表子查询</code></pre></li></ul><p>②  按结果集的行列数不同：</p><ul><li>标量子查询（结果集中只有一行一列）</li><li>列子查询（结果集有一列多行）</li><li>行子查询（结果集有一行多列）</li><li>表子查询（结果集一般为多行多列）</li></ul><h4 id="2-6-3-where-或-having-后面"><a href="#2-6-3-where-或-having-后面" class="headerlink" title="2.6.3 where 或 having 后面"></a>2.6.3 where 或 having 后面</h4><p><strong>特点</strong><br>① 子查询放在小括号内<br>② 子查询一般放在条件的右侧<br>③ 标量子查询，一般搭配着<strong>单行操作符</strong>使用；<br>     列子查询，一般搭配着<strong>多行操作符</strong>使用</p><blockquote><p><strong>单行操作符</strong>：&gt; 、&lt; 、&gt;=、 &lt;= 、= 、&lt;&gt;</p><p><strong>多行操作符</strong>：in、any/some、all</p></blockquote><p>④ 子查询的执行优先于主查询执行，主查询的条件用到了子查询的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">1、标量子查询（单行子查询）</span><br><span class="line">2、列子查询（多行子查询）</span><br><span class="line"></span><br><span class="line">3、行子查询（多列多行）</span><br><span class="line">*&#x2F;</span><br><span class="line"># 1 标量子查询★</span><br><span class="line"># 案例1：谁的工资比 Abel 高?</span><br><span class="line"># ① 查询Abel的工资</span><br><span class="line">SELECT </span><br><span class="line">  salary </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE last_name &#x3D; &#39;Abel&#39; ;</span><br><span class="line"></span><br><span class="line"># ② 查询员工的信息，满足 salary&gt;① 结果</span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE salary &gt; </span><br><span class="line">  (SELECT </span><br><span class="line">    salary </span><br><span class="line">  FROM</span><br><span class="line">    employees </span><br><span class="line">  WHERE last_name &#x3D; &#39;Abel&#39;) ;</span><br><span class="line"></span><br><span class="line"># 案例2：返回job_id与141号员工相同，salary比143号员工多的员工 姓名，job_id 和工资</span><br><span class="line"># ① 查询141号员工的job_id</span><br><span class="line">SELECT </span><br><span class="line">  job_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE employee_id &#x3D; 141 ;</span><br><span class="line"></span><br><span class="line"># ② 查询143号员工的salary</span><br><span class="line">SELECT </span><br><span class="line">  salary </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE employee_id &#x3D; 143 ;</span><br><span class="line"></span><br><span class="line"># ③ 查询员工的姓名，job_id 和工资，要求job_id&#x3D;①并且salary&gt;②</span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  job_id,</span><br><span class="line">  salary </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE job_id &#x3D; </span><br><span class="line">  (SELECT </span><br><span class="line">    job_id </span><br><span class="line">  FROM</span><br><span class="line">    employees </span><br><span class="line">  WHERE employee_id &#x3D; 141) </span><br><span class="line">  AND salary &gt; </span><br><span class="line">  (SELECT </span><br><span class="line">    salary </span><br><span class="line">  FROM</span><br><span class="line">    employees </span><br><span class="line">  WHERE employee_id &#x3D; 143) ;</span><br><span class="line"></span><br><span class="line"># 案例3：返回公司工资最少的员工的last_name,job_id和salary</span><br><span class="line"># ① 查询公司的 最低工资</span><br><span class="line">SELECT MIN(salary)</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line"># ② 查询last_name,job_id和salary，要求salary&#x3D;①</span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  job_id,</span><br><span class="line">  salary </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE salary &#x3D; </span><br><span class="line">  (SELECT </span><br><span class="line">    MIN(salary) </span><br><span class="line">  FROM</span><br><span class="line">    employees) ;</span><br><span class="line"></span><br><span class="line"># 案例4：查询最低工资大于50号部门最低工资的部门id和其最低工资</span><br><span class="line"># ① 查询50号部门的最低工资</span><br><span class="line">SELECT </span><br><span class="line">  MIN(salary) </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE department_id &#x3D; 50 ;</span><br><span class="line"></span><br><span class="line"># ② 查询每个部门的最低工资</span><br><span class="line">SELECT </span><br><span class="line">  MIN(salary),</span><br><span class="line">  department_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">GROUP BY department_id ;</span><br><span class="line"></span><br><span class="line">#③ 在②基础上筛选，满足min(salary)&gt;①</span><br><span class="line">SELECT </span><br><span class="line">  MIN(salary),</span><br><span class="line">  department_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">GROUP BY department_id </span><br><span class="line">HAVING MIN(salary) &gt; </span><br><span class="line">  (SELECT </span><br><span class="line">    MIN(salary) </span><br><span class="line">  FROM</span><br><span class="line">    employees </span><br><span class="line">  WHERE department_id &#x3D; 50) ;</span><br><span class="line"></span><br><span class="line"># 非法使用标量子查询</span><br><span class="line">SELECT </span><br><span class="line">  MIN(salary),</span><br><span class="line">  department_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">GROUP BY department_id </span><br><span class="line">HAVING MIN(salary) &gt; </span><br><span class="line">  (SELECT </span><br><span class="line">    MIN(salary) #    salary </span><br><span class="line">  FROM</span><br><span class="line">    employees </span><br><span class="line">  WHERE department_id &#x3D; 50) ;</span><br><span class="line">#  WHERE department_id &#x3D; 250) ;</span><br><span class="line"></span><br><span class="line"># 2 列子查询（多行子查询）</span><br><span class="line"># 案例1：返回location_id是1400或1700的部门中的所有员工姓名</span><br><span class="line"># ① 查询location_id是1400或1700的部门编号</span><br><span class="line">SELECT DISTINCT </span><br><span class="line">  department_id </span><br><span class="line">FROM</span><br><span class="line">  departments </span><br><span class="line">WHERE location_id IN (1400, 1700) ;</span><br><span class="line"></span><br><span class="line"># ② 查询员工姓名，要求部门号是①列表中的某一个</span><br><span class="line"> </span><br><span class="line">SELECT </span><br><span class="line">  last_name </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE department_id IN </span><br><span class="line">  (SELECT DISTINCT </span><br><span class="line">    department_id </span><br><span class="line">  FROM</span><br><span class="line">    departments </span><br><span class="line">  WHERE location_id IN (1400, 1700)</span><br><span class="line"></span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"># 案例2：返回其它工种中比job_id为‘IT_PROG’工种任一工资低的员工的员工号、姓名、job_id 以及salary</span><br><span class="line"># ① 查询job_id为‘IT_PROG’部门任一工资</span><br><span class="line">SELECT DISTINCT </span><br><span class="line">  salary </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE job_id &#x3D; &#39;IT_PROG&#39; ;</span><br><span class="line"></span><br><span class="line"># ② 查询员工号、姓名、job_id 以及salary，salary&lt;(①)的任意一个</span><br><span class="line">SELECT </span><br><span class="line">  employee_id,</span><br><span class="line">  last_name,</span><br><span class="line">  job_id,</span><br><span class="line">  salary </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE salary &lt; ANY </span><br><span class="line">  (SELECT DISTINCT </span><br><span class="line">    salary </span><br><span class="line">  FROM</span><br><span class="line">    employees </span><br><span class="line">  WHERE job_id &#x3D; &#39;IT_PROG&#39;) </span><br><span class="line">  AND job_id &lt;&gt; &#39;IT_PROG&#39; ;</span><br><span class="line"></span><br><span class="line"># 或</span><br><span class="line">SELECT </span><br><span class="line">  employee_id,</span><br><span class="line">  last_name,</span><br><span class="line">  job_id,</span><br><span class="line">  salary </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE salary &lt; </span><br><span class="line">  (SELECT DISTINCT </span><br><span class="line">    MAX(salary) </span><br><span class="line">  FROM</span><br><span class="line">    employees </span><br><span class="line">  WHERE job_id &#x3D; &#39;IT_PROG&#39;) </span><br><span class="line">  AND job_id &lt;&gt; &#39;IT_PROG&#39; ;</span><br><span class="line"></span><br><span class="line"># 案例3：返回其它部门中比job_id为‘IT_PROG’部门所有工资都低的员工的员工号、姓名、job_id 以及salary</span><br><span class="line">SELECT </span><br><span class="line">  employee_id,</span><br><span class="line">  last_name,</span><br><span class="line">  job_id,</span><br><span class="line">  salary </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE salary &lt; ALL </span><br><span class="line">  (SELECT DISTINCT </span><br><span class="line">    salary </span><br><span class="line">  FROM</span><br><span class="line">    employees </span><br><span class="line">  WHERE job_id &#x3D; &#39;IT_PROG&#39;) </span><br><span class="line">  AND job_id &lt;&gt; &#39;IT_PROG&#39; ;</span><br><span class="line"></span><br><span class="line"># 或</span><br><span class="line">SELECT </span><br><span class="line">  employee_id,</span><br><span class="line">  last_name,</span><br><span class="line">  job_id,</span><br><span class="line">  salary </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE salary &lt; </span><br><span class="line">  (SELECT DISTINCT </span><br><span class="line">    MIN(salary) </span><br><span class="line">  FROM</span><br><span class="line">    employees </span><br><span class="line">  WHERE job_id &#x3D; &#39;IT_PROG&#39;) </span><br><span class="line">  AND job_id &lt;&gt; &#39;IT_PROG&#39; ;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"># 3 行子查询（结果集一行多列或多行多列）</span><br><span class="line"># 案例：查询员工编号最小并且工资最高的员工信息</span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE (employee_id, salary) &#x3D; </span><br><span class="line">  (SELECT </span><br><span class="line">    MIN(employee_id),</span><br><span class="line">    MAX(salary) </span><br><span class="line">  FROM</span><br><span class="line">    employees) ;</span><br><span class="line"></span><br><span class="line"># 用前面的知识</span><br><span class="line"># ① 查询最小的员工编号</span><br><span class="line">SELECT </span><br><span class="line">  MIN(employee_id) </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line"># ② 查询最高工资</span><br><span class="line">SELECT </span><br><span class="line">  MAX(salary) </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line"># ③ 查询员工信息</span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE employee_id &#x3D; </span><br><span class="line">  (SELECT </span><br><span class="line">    MIN(employee_id) </span><br><span class="line">  FROM</span><br><span class="line">    employees) </span><br><span class="line">  AND salary &#x3D; </span><br><span class="line">  (SELECT </span><br><span class="line">    MAX(salary) </span><br><span class="line">  FROM</span><br><span class="line">    employees) ;</span><br></pre></td></tr></table></figure><h4 id="2-6-4-select后面"><a href="#2-6-4-select后面" class="headerlink" title="2.6.4 select后面"></a>2.6.4 select后面</h4><blockquote><p>仅仅支持标量子查询</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 案例1：查询每个部门的员工个数</span><br><span class="line">SELECT </span><br><span class="line">  d.*,</span><br><span class="line">  (SELECT </span><br><span class="line">    COUNT(*) </span><br><span class="line">  FROM</span><br><span class="line">    employees e </span><br><span class="line">  WHERE e.department_id &#x3D; d.&#96;department_id&#96;) 个数</span><br><span class="line">FROM</span><br><span class="line">  departments d ;</span><br><span class="line"></span><br><span class="line"># 案例2：查询员工号&#x3D;102的部门名</span><br><span class="line">SELECT </span><br><span class="line">  (SELECT </span><br><span class="line">    department_name</span><br><span class="line">  FROM</span><br><span class="line">    departments d </span><br><span class="line">    INNER JOIN employees e </span><br><span class="line">      ON d.department_id &#x3D; e.department_id </span><br><span class="line">  WHERE e.employee_id &#x3D; 102) 部门名 ;</span><br></pre></td></tr></table></figure><h4 id="2-6-5-from后面"><a href="#2-6-5-from后面" class="headerlink" title="2.6.5 from后面"></a>2.6.5 from后面</h4><blockquote><p>将子查询结果充当一张表，要求必须起别名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 案例：查询每个部门的平均工资的工资等级</span><br><span class="line"># ① 查询每个部门的平均工资</span><br><span class="line">SELECT </span><br><span class="line">  AVG(salary),</span><br><span class="line">  department_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">GROUP BY department_id ;</span><br><span class="line"></span><br><span class="line"># ② 连接①的结果集和job_grades表，筛选条件平均工资 between lowest_sal and highest_sal</span><br><span class="line">SELECT </span><br><span class="line">  ag_dep.*,</span><br><span class="line">  g.&#96;grade_level&#96; </span><br><span class="line">FROM</span><br><span class="line">  (SELECT </span><br><span class="line">    AVG(salary) ag,</span><br><span class="line">    department_id </span><br><span class="line">  FROM</span><br><span class="line">    employees </span><br><span class="line">  GROUP BY department_id) ag_dep </span><br><span class="line">  INNER JOIN job_grades g </span><br><span class="line">    ON ag_dep.ag BETWEEN lowest_sal </span><br><span class="line">    AND highest_sal ;</span><br></pre></td></tr></table></figure><h4 id="2-6-6-exists后面（相关子查询）"><a href="#2-6-6-exists后面（相关子查询）" class="headerlink" title="2.6.6 exists后面（相关子查询）"></a>2.6.6 exists后面（相关子查询）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">exists(完整的查询语句)</span><br><span class="line">结果：</span><br><span class="line">1或0</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT </span><br><span class="line">  EXISTS </span><br><span class="line">  (SELECT </span><br><span class="line">    employee_id </span><br><span class="line">  FROM</span><br><span class="line">    employees </span><br><span class="line">  WHERE salary &#x3D; 300000) ;</span><br><span class="line"></span><br><span class="line"># 案例1：查询有员工的部门名</span><br><span class="line"># in</span><br><span class="line">SELECT </span><br><span class="line">  department_name </span><br><span class="line">FROM</span><br><span class="line">  departments d </span><br><span class="line">WHERE d.&#96;department_id&#96; IN </span><br><span class="line">  (SELECT </span><br><span class="line">    department_id </span><br><span class="line">  FROM</span><br><span class="line">    employees) ;</span><br><span class="line"></span><br><span class="line"># exists</span><br><span class="line">SELECT </span><br><span class="line">  department_name </span><br><span class="line">FROM</span><br><span class="line">  departments d </span><br><span class="line">WHERE EXISTS </span><br><span class="line">  (SELECT </span><br><span class="line">    * </span><br><span class="line">  FROM</span><br><span class="line">    employees e </span><br><span class="line">  WHERE d.&#96;department_id&#96; &#x3D; e.&#96;department_id&#96;) ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  department_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line"></span><br><span class="line"># 案例2：查询没有女朋友的男神信息</span><br><span class="line"># in</span><br><span class="line">  SELECT </span><br><span class="line">    bo.* </span><br><span class="line">  FROM</span><br><span class="line">    boys bo </span><br><span class="line">  WHERE bo.id NOT IN </span><br><span class="line">    (SELECT </span><br><span class="line">      boyfriend_id </span><br><span class="line">    FROM</span><br><span class="line">      beauty) ;</span><br><span class="line"></span><br><span class="line"># exists</span><br><span class="line">SELECT </span><br><span class="line">  bo.* </span><br><span class="line">FROM</span><br><span class="line">  boys bo </span><br><span class="line">WHERE NOT EXISTS </span><br><span class="line">  (SELECT </span><br><span class="line">    boyfriend_id </span><br><span class="line">  FROM</span><br><span class="line">    beauty b </span><br><span class="line">  WHERE bo.&#96;id&#96; &#x3D; b.&#96;boyfriend_id&#96;) ;</span><br></pre></td></tr></table></figure><h3 id="2-7-分页查询"><a href="#2-7-分页查询" class="headerlink" title="2.7 分页查询"></a>2.7 分页查询</h3><h4 id="2-7-1-应用场景"><a href="#2-7-1-应用场景" class="headerlink" title="2.7.1 应用场景"></a>2.7.1 应用场景</h4><p>当要查询的条目数太多，一页显示不全,需要分页提交sql请求</p><h4 id="2-7-2-语法"><a href="#2-7-2-语法" class="headerlink" title="2.7.2 语法"></a>2.7.2 语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select 查询列表</span><br><span class="line">from 表1</span><br><span class="line">【join type join 表2</span><br><span class="line">on 连接条件</span><br><span class="line">where 筛选条件</span><br><span class="line">group by 分组字段</span><br><span class="line">having 分组后的筛选</span><br><span class="line">order by 排序的字段】</span><br><span class="line">limit offset, size;</span><br></pre></td></tr></table></figure><blockquote><p>offset：要显示条目的起始索引（起始索引从0开始）<br>size：要显示的条目个数</p></blockquote><h4 id="2-7-3-特点"><a href="#2-7-3-特点" class="headerlink" title="2.7.3 特点"></a>2.7.3 特点</h4><p>① limit语句放在查询语句的最后<br>② 公式：<code>limit (page-1)*size,size;</code></p><blockquote><p>要显示的页数 page，没有条目数 size</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">USE myemployees;</span><br><span class="line"># 案例1：查询前五条员工信息</span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">LIMIT 0, 5 ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">LIMIT 5 ;</span><br><span class="line"></span><br><span class="line"># 案例2：查询第11-25条员工信息</span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">LIMIT 11, 15 ;</span><br><span class="line"></span><br><span class="line"># 案例3：有奖金的员工信息，并且工资较高的前10名显示出来</span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE commission_pct IS NOT NULL </span><br><span class="line">ORDER BY salary DESC </span><br><span class="line">LIMIT 10 ;</span><br></pre></td></tr></table></figure><h3 id="2-8-联合查询"><a href="#2-8-联合查询" class="headerlink" title="2.8 联合查询"></a>2.8 联合查询</h3><h4 id="2-8-1-应用场景"><a href="#2-8-1-应用场景" class="headerlink" title="2.8.1 应用场景"></a>2.8.1 应用场景</h4><p>要查询的结果来自于多个表，且多个表没有直接的连接关系，但查询的信息一致时</p><h4 id="2-8-2-语法"><a href="#2-8-2-语法" class="headerlink" title="2.8.2 语法"></a>2.8.2 语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查询语句1</span><br><span class="line">union</span><br><span class="line">查询语句2</span><br><span class="line">union</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>union</code>: 联合、合并。将多条查询语句的结果合并成一个结果</p><h4 id="2-8-3-特点★"><a href="#2-8-3-特点★" class="headerlink" title="2.8.3 特点★"></a>2.8.3 特点★</h4><p>① 要求多条查询语句的查询列数是一致的！</p><p>② 要求多条查询语句的查询的每一列的类型和顺序最好一致</p><p>③ union关键字默认去重，如果使用union all 可以包含重复项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">USE myemployees;</span><br><span class="line"># 引入：查询部门编号&gt;90 或 邮箱包含a的员工信息</span><br><span class="line"> </span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE email LIKE &#39;%a%&#39; </span><br><span class="line">  OR department_id &gt; 90 ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE email LIKE &#39;%a%&#39; </span><br><span class="line">UNION</span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE department_id &gt; 90 ;</span><br></pre></td></tr></table></figure><hr><h2 id="3-DML语言"><a href="#3-DML语言" class="headerlink" title="3 DML语言"></a>3 DML语言</h2><p>DML（Data Manipulation Language）：数据操作语言，用来定义数据库记录（数据）</p><blockquote><p>插入：insert<br>修改：update<br>删除：delete</p></blockquote><h3 id="3-1-插入语言"><a href="#3-1-插入语言" class="headerlink" title="3.1 插入语言"></a>3.1 插入语言</h3><h4 id="3-1-1-方式一"><a href="#3-1-1-方式一" class="headerlink" title="3.1.1 方式一"></a>3.1.1 方式一</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名（列名，……） value（值1，……）</span><br></pre></td></tr></table></figure><h4 id="3-1-2-方式二"><a href="#3-1-2-方式二" class="headerlink" title="3.1.2 方式二"></a>3.1.2 方式二</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名</span><br><span class="line">set 列名 &#x3D; 值, 列名 &#x3D; 值, ...</span><br></pre></td></tr></table></figure><h4 id="3-1-3-两种方式对比"><a href="#3-1-3-两种方式对比" class="headerlink" title="3.1.3 两种方式对比"></a>3.1.3 两种方式对比</h4><p>① 方式一支持插入多行，方式二不支持</p><p>② 方式一支持子查询，方式二不支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"># 1.插入的值的类型要与列的类型一致或兼容</span><br><span class="line"></span><br><span class="line">USE girls;</span><br><span class="line">INSERT INTO beauty(id, NAME, sex, borndate, phone, photo, boyfriend_id)</span><br><span class="line">VALUE(13, &#39;王小虎&#39;, &#39;男&#39;, &#39;1990-4-23&#39;, &#39;18288668899&#39;, NULL, 2);</span><br><span class="line"></span><br><span class="line">SELECT * FROM beauty;</span><br><span class="line"></span><br><span class="line"># 2.不可以为null的列必须插入值，可以为null的列如何插入值？</span><br><span class="line"># 方式一：null</span><br><span class="line">INSERT INTO beauty (</span><br><span class="line">  id,</span><br><span class="line">  NAME,</span><br><span class="line">  sex,</span><br><span class="line">  borndate,</span><br><span class="line">  phone,</span><br><span class="line">  photo,</span><br><span class="line">  boyfriend_id</span><br><span class="line">) VALUE (</span><br><span class="line">  13,</span><br><span class="line">  &#39;王小虎&#39;,</span><br><span class="line">  &#39;男&#39;,</span><br><span class="line">  &#39;1990-4-23&#39;,</span><br><span class="line">  &#39;18288668899&#39;,</span><br><span class="line">  NULL,</span><br><span class="line">  2</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"># 方式二：省略</span><br><span class="line">INSERT INTO beauty (</span><br><span class="line">  id,</span><br><span class="line">  NAME,</span><br><span class="line">  sex,</span><br><span class="line">  borndate,</span><br><span class="line">  phone,</span><br><span class="line">  boyfriend_id</span><br><span class="line">) VALUE (</span><br><span class="line">  14,</span><br><span class="line">  &#39;金星&#39;,</span><br><span class="line">  &#39;女&#39;,</span><br><span class="line">  &#39;1990-4-23&#39;,</span><br><span class="line">  &#39;18288778899&#39;,</span><br><span class="line">  2</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line">INSERT INTO beauty (id, NAME, sex, phone) VALUE (15, &#39;娜扎&#39;, &#39;女&#39;, &#39;18288770099&#39;) ;</span><br><span class="line"></span><br><span class="line"># 3.列的顺序能否调换？ # 能，但必须对应</span><br><span class="line">INSERT INTO beauty (NAME, id, sex, phone) VALUE (&#39;蒋欣&#39;, 16, &#39;女&#39;, &#39;18266778899&#39;) ;</span><br><span class="line"></span><br><span class="line"># 4.列数和值的个数必须一致</span><br><span class="line">INSERT INTO beauty (NAME, id, sex, phone) VALUE (&#39;关晓彤&#39;, 17, &#39;女&#39;, &#39;18288778899&#39;) ;</span><br><span class="line"></span><br><span class="line"># 5.可以省略列名，默认所有列，而且列的顺序和表中列的顺序一致</span><br><span class="line">INSERT INTO beauty VALUE (</span><br><span class="line">  18,</span><br><span class="line">  &#39;张飞&#39;,</span><br><span class="line">  &#39;男&#39;,</span><br><span class="line">  NULL,</span><br><span class="line">  &#39;110&#39;,</span><br><span class="line">  NULL,</span><br><span class="line">  NULL</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"># 方式二：</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">insert into 表名</span><br><span class="line">set 列名 &#x3D; 值, 列名 &#x3D; 值, ...</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">INSERT INTO beauty SET id &#x3D; 19,</span><br><span class="line">NAME &#x3D; &#39;刘涛&#39;,</span><br><span class="line">phone &#x3D; &#39;199&#39; ;</span><br><span class="line"></span><br><span class="line"># 两种方式大pk ★</span><br><span class="line"># 1、方式一支持插入多行,方式二不支持</span><br><span class="line">INSERT INTO beauty </span><br><span class="line">VALUES</span><br><span class="line">  (</span><br><span class="line">    23,</span><br><span class="line">    &#39;唐艺昕1&#39;,</span><br><span class="line">    &#39;女&#39;,</span><br><span class="line">    &#39;1990-4-23&#39;,</span><br><span class="line">    &#39;1898888888&#39;,</span><br><span class="line">    NULL,</span><br><span class="line">    2</span><br><span class="line">  ),</span><br><span class="line">  (</span><br><span class="line">    24,</span><br><span class="line">    &#39;唐艺昕2&#39;,</span><br><span class="line">    &#39;女&#39;,</span><br><span class="line">    &#39;1990-4-23&#39;,</span><br><span class="line">    &#39;1898888888&#39;,</span><br><span class="line">    NULL,</span><br><span class="line">    2</span><br><span class="line">  ),</span><br><span class="line">  (</span><br><span class="line">    25,</span><br><span class="line">    &#39;唐艺昕3&#39;,</span><br><span class="line">    &#39;女&#39;,</span><br><span class="line">    &#39;1990-4-23&#39;,</span><br><span class="line">    &#39;1898888888&#39;,</span><br><span class="line">    NULL,</span><br><span class="line">    2</span><br><span class="line">  ) ;</span><br><span class="line"></span><br><span class="line"># 2、方式一支持子查询，方式二不支持</span><br><span class="line">INSERT INTO beauty (id, NAME, phone) </span><br><span class="line">SELECT </span><br><span class="line">  26,</span><br><span class="line">  &#39;宋茜&#39;,</span><br><span class="line">  &#39;11809866&#39; ;</span><br><span class="line"></span><br><span class="line">INSERT INTO beauty (id, NAME, phone) </span><br><span class="line">SELECT </span><br><span class="line">  id,</span><br><span class="line">  boyname,</span><br><span class="line">  &#39;1234567&#39; </span><br><span class="line">FROM</span><br><span class="line">  boys </span><br><span class="line">WHERE id &lt; 3 ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  beauty ;</span><br></pre></td></tr></table></figure><h3 id="3-2-修改语句"><a href="#3-2-修改语句" class="headerlink" title="3.2 修改语句"></a>3.2 修改语句</h3><h4 id="3-2-1-修改单表的记录★"><a href="#3-2-1-修改单表的记录★" class="headerlink" title="3.2.1 修改单表的记录★"></a>3.2.1 修改单表的记录★</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update 表名</span><br><span class="line">set 列&#x3D;新值,列&#x3D;新值,...</span><br><span class="line">where 筛选条件;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-修改多表的记录【补充】"><a href="#3-2-2-修改多表的记录【补充】" class="headerlink" title="3.2.2 修改多表的记录【补充】"></a>3.2.2 修改多表的记录【补充】</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># sql92语法：</span><br><span class="line">update 表1 别名1,表2 别名2</span><br><span class="line">set 列&#x3D;值,...</span><br><span class="line">where 连接条件</span><br><span class="line">and 筛选条件;</span><br><span class="line"></span><br><span class="line"># sql99语法：</span><br><span class="line">update 表1 别名1</span><br><span class="line">inner|left|right join 表2 别名2</span><br><span class="line">on 连接条件</span><br><span class="line">set 列&#x3D;值,...</span><br><span class="line">where 筛选条件;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># 1.修改单表的记录</span><br><span class="line"># 案例1：修改beauty表中姓唐的女神的电话为13899888899</span><br><span class="line">UPDATE </span><br><span class="line">  beauty </span><br><span class="line">SET</span><br><span class="line">  phone &#x3D; &#39;13899888899&#39; </span><br><span class="line">WHERE NAME LIKE &#39;唐%&#39; ;</span><br><span class="line"></span><br><span class="line"># 案例2：修改boys表中id好为2的名称为张飞，魅力值 10</span><br><span class="line">UPDATE </span><br><span class="line">  boys </span><br><span class="line">SET</span><br><span class="line">  boyname &#x3D; &#39;张飞&#39;,</span><br><span class="line">  usercp &#x3D; 10 </span><br><span class="line">WHERE id &#x3D; 2 ;</span><br><span class="line"></span><br><span class="line"># 2.修改多表的记录</span><br><span class="line"># 案例 1：修改张无忌的女朋友的手机号为114</span><br><span class="line">UPDATE </span><br><span class="line">  boys bo </span><br><span class="line">  INNER JOIN beauty b </span><br><span class="line">    ON bo.&#96;id&#96; &#x3D; b.&#96;id&#96; SET b.&#96;phone&#96; &#x3D; &#39;120&#39;,</span><br><span class="line">  bo.&#96;userCP&#96; &#x3D; 120 </span><br><span class="line">WHERE bo.&#96;boyName&#96; &#x3D; &#39;张无忌&#39; ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例2：修改没有男朋友的女神的男朋友编号都为2号</span><br><span class="line">UPDATE </span><br><span class="line">  boys bo </span><br><span class="line">  RIGHT JOIN beauty b </span><br><span class="line">    ON bo.&#96;id&#96; &#x3D; b.&#96;boyfriend_id&#96; SET b.&#96;boyfriend_id&#96; &#x3D; 2 </span><br><span class="line">WHERE bo.&#96;id&#96; IS NULL ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  boys ;</span><br></pre></td></tr></table></figure><h3 id="3-4-删除语句"><a href="#3-4-删除语句" class="headerlink" title="3.4 删除语句"></a>3.4 删除语句</h3><h4 id="3-4-1-方式一：delete"><a href="#3-4-1-方式一：delete" class="headerlink" title="3.4.1 方式一：delete"></a>3.4.1 方式一：delete</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 1 单表的删除【★】</span><br><span class="line">delete from 表名 where 筛选条件</span><br><span class="line"></span><br><span class="line"># 2 多表的删除【补充】</span><br><span class="line"># sql92语法：</span><br><span class="line">delete 表1的别名,表2的别名</span><br><span class="line">from 表1 别名,表2 别名</span><br><span class="line">where 连接条件</span><br><span class="line">and 筛选条件;</span><br><span class="line"></span><br><span class="line"># sql99语法：</span><br><span class="line">delete 表1的别名,表2的别名</span><br><span class="line">from 表1 别名</span><br><span class="line">inner|left|right join 表2 别名 on 连接条件</span><br><span class="line">where 筛选条件;</span><br></pre></td></tr></table></figure><h4 id="3-4-2-方式二：truncate"><a href="#3-4-2-方式二：truncate" class="headerlink" title="3.4.2 方式二：truncate"></a>3.4.2 方式二：truncate</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate table 表名;</span><br></pre></td></tr></table></figure><blockquote><p>delete vs truncate【面试题★】</p><ol><li>delete 可以加where 条件，truncate不能加</li><li>truncate删除，效率高一丢丢</li><li>假如要删除的表中有自增长列，如果<pre><code>用delete删除后，再插入数据，自增长列的值从断点开始，   而truncate删除后，再插入数据，自增长列的值从1开始。</code></pre></li><li>truncate删除没有返回值，delete删除有返回值</li><li>truncate删除不能回滚，delete删除可以回滚.</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"># 方式一：delete</span><br><span class="line"># 1.单表的删除</span><br><span class="line"># 案例1：删除手机号以9结尾的女神信息</span><br><span class="line">DELETE </span><br><span class="line">FROM</span><br><span class="line">  beauty </span><br><span class="line">WHERE phone LIKE &#39;%9&#39; ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  beauty ;</span><br><span class="line"></span><br><span class="line"># 2.多表的删除</span><br><span class="line"># 案例1：删除张无忌的女朋友的信息</span><br><span class="line">DELETE </span><br><span class="line">  b </span><br><span class="line">FROM</span><br><span class="line">  beauty b </span><br><span class="line">  INNER JOIN boys bo </span><br><span class="line">    ON b.&#96;boyfriend_id&#96; &#x3D; bo.&#96;id&#96; </span><br><span class="line">WHERE bo.&#96;boyName&#96; &#x3D; &#39;张无忌&#39; ;</span><br><span class="line"></span><br><span class="line"># 案例2：删除黄晓明的信息以及他女朋友的信息</span><br><span class="line">DELETE </span><br><span class="line">  b,</span><br><span class="line">  bo </span><br><span class="line">FROM</span><br><span class="line">  beauty b </span><br><span class="line">  INNER JOIN boys bo </span><br><span class="line">    ON b.&#96;boyfriend_id&#96; &#x3D; bo.&#96;id&#96; </span><br><span class="line">WHERE bo.&#96;boyName&#96; &#x3D; &#39;黄晓明&#39; ;</span><br><span class="line"></span><br><span class="line"># 方式二：truncate语句</span><br><span class="line"># 案例：将魅力值&gt;100的男神信息删除</span><br><span class="line">TRUNCATE TABLE boys ;</span><br><span class="line"># 删除整个表</span><br><span class="line"># delete pk truncate【面试题★】</span><br><span class="line">&#x2F;*</span><br><span class="line">1.delete 可以加where 条件，truncate不能加</span><br><span class="line">2.truncate删除，效率高一丢丢</span><br><span class="line">3.假如要删除的表中有自增长列，</span><br><span class="line">如果用delete删除后，再插入数据，自增长列的值从断点开始，</span><br><span class="line">而truncate删除后，再插入数据，自增长列的值从1开始。</span><br><span class="line">4.truncate删除没有返回值，delete删除有返回值</span><br><span class="line">5.truncate删除不能回滚，delete删除可以回滚.</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  boys ;</span><br><span class="line"></span><br><span class="line">DELETE </span><br><span class="line">FROM</span><br><span class="line">  boys ;</span><br><span class="line"></span><br><span class="line">TRUNCATE TABLE boys ;</span><br><span class="line"></span><br><span class="line">INSERT INTO boys (boyname, usercp) </span><br><span class="line">VALUES</span><br><span class="line">  (&#39;张飞&#39;, 100),</span><br><span class="line">  (&#39;刘备&#39;, 100),</span><br><span class="line">  (&#39;关云长&#39;, 100) ;</span><br></pre></td></tr></table></figure><hr><h2 id="4-DDL语言"><a href="#4-DDL语言" class="headerlink" title="4 DDL语言"></a>4 DDL语言</h2><p>DDL（Data Definition Language）：数据定义语言，用来定义数据库对象：库、表、列等</p><h3 id="4-1-库的管理"><a href="#4-1-库的管理" class="headerlink" title="4.1 库的管理"></a>4.1 库的管理</h3><h4 id="4-1-1-库的创建"><a href="#4-1-1-库的创建" class="headerlink" title="4.1.1 库的创建"></a>4.1.1 库的创建</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database [if not exists] 库名;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 案例：创建库books</span><br><span class="line"></span><br><span class="line">CREATE DATABASE IF NOT EXISTS books ;</span><br></pre></td></tr></table></figure><h4 id="4-1-2-库的修改"><a href="#4-1-2-库的修改" class="headerlink" title="4.1.2 库的修改"></a>4.1.2 库的修改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RENAME DATABASE books TO 新库名; # 不安全，弃用</span><br><span class="line"></span><br><span class="line"># 更改库的字符集</span><br><span class="line">ALTER DATABASE books </span><br><span class="line">  CHARACTER SET gbk ;</span><br></pre></td></tr></table></figure><h4 id="4-1-3-库的删除"><a href="#4-1-3-库的删除" class="headerlink" title="4.1.3 库的删除"></a>4.1.3 库的删除</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS 库名 ;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 案例：删除库books</span><br><span class="line">DROP DATABASE IF EXISTS books ;</span><br></pre></td></tr></table></figure><h3 id="4-2-表的管理"><a href="#4-2-表的管理" class="headerlink" title="4.2 表的管理"></a>4.2 表的管理</h3><h4 id="4-2-1-表的创建"><a href="#4-2-1-表的创建" class="headerlink" title="4.2.1 表的创建"></a>4.2.1 表的创建</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">列名 列的类型【（长度）约束】,</span><br><span class="line">列名 列的类型【（长度）约束】,</span><br><span class="line">列名 列的类型【（长度）约束】,</span><br><span class="line">...</span><br><span class="line">列名 列的类型【（长度）约束】,</span><br><span class="line">) ;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 案例1：创建表book</span><br><span class="line">CREATE TABLE book (</span><br><span class="line">  id INT,</span><br><span class="line">  # 编号</span><br><span class="line">  bName VARCHAR (20),</span><br><span class="line">  # 书名</span><br><span class="line">  price DOUBLE,</span><br><span class="line">  # 价格</span><br><span class="line">  authorId INT,</span><br><span class="line">  # 作者编号</span><br><span class="line">  publishDate DATETIME#出版日期</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"># 案例2：创建表author</span><br><span class="line">CREATE TABLE IF NOT EXISTS author (</span><br><span class="line">  id INT,</span><br><span class="line">  au_name VARCHAR (20),</span><br><span class="line">  nation VARCHAR (10)</span><br><span class="line">) ;</span><br></pre></td></tr></table></figure><h4 id="4-2-2-表的修改"><a href="#4-2-2-表的修改" class="headerlink" title="4.2.2 表的修改"></a>4.2.2 表的修改</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add|drop|modify|change column 列名 【列类型 约束】;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># ① 修改列名</span><br><span class="line">ALTER TABLE book </span><br><span class="line">  CHANGE COLUMN publishdate pubDate DATETIME ;</span><br><span class="line"></span><br><span class="line"># ② 修改列的类型或约束</span><br><span class="line">ALTER TABLE book </span><br><span class="line">  MODIFY COLUMN pubdate TIMESTAMP ;</span><br><span class="line"></span><br><span class="line"># ③ 添加新列</span><br><span class="line">ALTER TABLE author </span><br><span class="line">  ADD COLUMN annual DOUBLE ;</span><br><span class="line"></span><br><span class="line"># ④ 删除列</span><br><span class="line">ALTER TABLE author </span><br><span class="line">  DROP COLUMN annual ;</span><br><span class="line"></span><br><span class="line"># ⑤ 修改表名</span><br><span class="line">ALTER TABLE author </span><br><span class="line">  RENAME TO book_author ;</span><br></pre></td></tr></table></figure><h4 id="4-2-3-表的删除"><a href="#4-2-3-表的删除" class="headerlink" title="4.2.3 表的删除"></a>4.2.3 表的删除</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE 【IF EXISTS】 表名 ;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 删除表book_author</span><br><span class="line">DROP TABLE IF EXISTS book_author ;</span><br><span class="line"></span><br><span class="line">SHOW TABLES ;</span><br><span class="line"></span><br><span class="line"># 通用的写法：</span><br><span class="line">DROP DATABASE IF EXISTS 旧库名 ;</span><br><span class="line">CREATE DATABASE 新库名;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS 旧表名 ;</span><br><span class="line">CREATE TABLE 表名 ;</span><br></pre></td></tr></table></figure><h4 id="4-2-4-表的复制"><a href="#4-2-4-表的复制" class="headerlink" title="4.2.4 表的复制"></a>4.2.4 表的复制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO author </span><br><span class="line">VALUES</span><br><span class="line">  (1, &#39;村上春树&#39;, &#39;日本&#39;),</span><br><span class="line">  (2, &#39;莫言&#39;, &#39;中国&#39;),</span><br><span class="line">  (3, &#39;冯唐&#39;, &#39;中国&#39;),</span><br><span class="line">  (4, &#39;金庸&#39;, &#39;中国&#39;) ;</span><br><span class="line"></span><br><span class="line"># 1、仅仅复制表的结构</span><br><span class="line">CREATE TABLE copy LIKE author;</span><br><span class="line"></span><br><span class="line"># 2、复制表的结构 + 数据</span><br><span class="line">CREATE TABLE copy1 </span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  author ;</span><br><span class="line">  </span><br><span class="line"># 3、只复制部分数据</span><br><span class="line">CREATE TABLE copy2 </span><br><span class="line">SELECT </span><br><span class="line">  id,</span><br><span class="line">  au_name </span><br><span class="line">FROM</span><br><span class="line">  author </span><br><span class="line">WHERE nation &#x3D; &#39;中国&#39; ;</span><br><span class="line"></span><br><span class="line"># 4、仅仅复制某些字段</span><br><span class="line">CREATE TABLE copy3 </span><br><span class="line">SELECT </span><br><span class="line">  id,</span><br><span class="line">  au_name </span><br><span class="line">FROM</span><br><span class="line">  author </span><br><span class="line">WHERE 0;</span><br></pre></td></tr></table></figure><h3 id="4-3-数据类型"><a href="#4-3-数据类型" class="headerlink" title="4.3 数据类型"></a>4.3 数据类型</h3><h4 id="4-3-1-分类"><a href="#4-3-1-分类" class="headerlink" title="4.3.1 分类"></a>4.3.1 分类</h4><p><strong>数值型</strong></p><ul><li>整型</li><li>小数：<ul><li>定点数</li><li>浮点数</li></ul></li></ul><p><strong>字符型</strong></p><ul><li>较短的文本：char、varchar</li><li>较长的文本：text、blob（较长的二进制数据）    </li></ul><p><strong>日期型</strong></p><h4 id="4-3-2-整型"><a href="#4-3-2-整型" class="headerlink" title="4.3.2 整型"></a>4.3.2 整型</h4><p><strong>1）分类</strong></p><table><thead><tr><th align="center">tinyint</th><th align="center">smallint</th><th align="center">mediumint</th><th align="center">int/integer</th><th align="center">bigint</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">8</td></tr></tbody></table><p><strong>2）特点</strong></p><p>① 如果不设置无符号还是有符号，默认是有符号，如果想设置无符号，需要添加unsigned关键字</p><p>② 如果插入的数值超出了整型的范围，会报out of range异常，并且插入临界值</p><p>③ 如果不设置长度，会有默认的长度；长度代表显示的最大宽度，如果不够会用0在左边填充，但必须搭配zerofill使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 如何设置无符号和有符号</span><br><span class="line">DROP TABLE IF EXISTS tab_int ;</span><br><span class="line"></span><br><span class="line">CREATE TABLE tab_int (</span><br><span class="line">  t1 INT (7) ZEROFILL,</span><br><span class="line">  t2 INT (7) UNSIGNED ZEROFILL</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line">DESC tab_int ;</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_int </span><br><span class="line">VALUES</span><br><span class="line">  (- 12345, 12345) ;</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_int </span><br><span class="line">VALUES</span><br><span class="line">  (24545444, 12345) ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  tab_int ;</span><br></pre></td></tr></table></figure><h4 id="4-3-3-小数"><a href="#4-3-3-小数" class="headerlink" title="4.3.3 小数"></a>4.3.3 小数</h4><p><strong>1）分类</strong></p><p>① <strong>定点数</strong>：float(M,D)、double(M,D)</p><p>② <strong>浮点数</strong>：dec((M,D)、decimal(M,D)</p><p><strong>2）特点</strong></p><p>① M和D</p><p>M：整数部位 + 小数部位</p><p>D：小数部位</p><p>如果超过范围，则插入临界值</p><p>② M和D都可以省略</p><p>如果是decimal，则M默认为10，D默认为0</p><p>如果是float和double，则会根据插入的数值的精度来决定精度</p><p>③ 定点型的精度较高，如果要求插入数值的精度较高，如货币运算等，则考虑使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># M和D测试</span><br><span class="line">CREATE TABLE tab_float(</span><br><span class="line">f1 FLOAT(5,2),</span><br><span class="line">f2 DOUBLE(5,2),</span><br><span class="line">f3 DECIMAL(5,2)</span><br><span class="line">);</span><br><span class="line">SELECT * FROM tab_float VALUES(123.4, 123.4, 123.4);</span><br><span class="line">SELECT * FROM tab_float VALUES(123.45, 123.45, 123.45);</span><br><span class="line">SELECT * FROM tab_float VALUES(123.456, 123.456, 123.456);</span><br></pre></td></tr></table></figure><h4 id="4-3-4-字符型"><a href="#4-3-4-字符型" class="headerlink" title="4.3.4 字符型"></a>4.3.4 字符型</h4><p><strong>1）分类</strong></p><p>① 较短的文本：char、varchar</p><p>其他：binary 和 varbinary用于保存较短的二进制、enum用于保存枚举、set用于保存集合</p><p>② 较长的文本：text、blob（较大的二进制）</p><p><strong>2）特点</strong></p><table><thead><tr><th></th><th>写法</th><th>M的意思</th><th>特点</th><th>空间的耗费</th><th>效率</th></tr></thead><tbody><tr><td>char</td><td>char(M)</td><td>最大的字符数，可以省略，默认为1</td><td>固定长度的字符</td><td>比较耗费</td><td>高</td></tr><tr><td>varchar</td><td>varchar(M)</td><td>最大的字符数，不可以省略</td><td>可变长度的字符</td><td>比较节省</td><td>低</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tab_char (c1 ENUM (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)) ;</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_char VALUES(&#39;a&#39;);</span><br><span class="line">INSERT INTO tab_char VALUES(&#39;b&#39;);</span><br><span class="line">INSERT INTO tab_char VALUES(&#39;c&#39;);</span><br><span class="line">INSERT INTO tab_char VALUES(&#39;m&#39;);</span><br><span class="line">INSERT INTO tab_char VALUES(&#39;A&#39;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM tab_char;</span><br><span class="line"></span><br><span class="line">CREATE TABLE tab_set (s1 SET (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;)) ;</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_set VALUES(&#39;a&#39;);</span><br><span class="line">INSERT INTO tab_set VALUES(&#39;A,B&#39;);</span><br><span class="line">INSERT INTO tab_set VALUES(&#39;a,c,d&#39;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM tab_set;</span><br></pre></td></tr></table></figure><h4 id="4-3-5-日期型"><a href="#4-3-5-日期型" class="headerlink" title="4.3.5 日期型"></a>4.3.5 日期型</h4><p><strong>1）分类</strong></p><p>① date：只保存日期</p><p>② time：只保存时间</p><p>③ year：只保存年</p><p>④ datetime：保存日期 + 时间</p><p>⑤ timestamp：保存日期 + 时间</p><p><strong>2）特点</strong></p><table><thead><tr><th align="center"></th><th align="center">字节</th><th align="center">范围</th><th align="center">时区等的影响</th></tr></thead><tbody><tr><td align="center">datetime</td><td align="center">8</td><td align="center">1000——9999</td><td align="center">不受</td></tr><tr><td align="center">timestamp</td><td align="center">4</td><td align="center">1970-2038</td><td align="center">受</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tab_date (t1 DATETIME, t2 TIMESTAMP) ;</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_date VALUES(NOW(),NOW());</span><br><span class="line"></span><br><span class="line">SELECT * FROM tab_date;</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE &#39;time_zone&#39;;</span><br><span class="line"></span><br><span class="line">SET time_zone&#x3D;&#39;+9:00&#39;;</span><br></pre></td></tr></table></figure><h3 id="4-4-约束"><a href="#4-4-约束" class="headerlink" title="4.4 约束"></a>4.4 约束</h3><h4 id="4-4-1-含义"><a href="#4-4-1-含义" class="headerlink" title="4.4.1 含义"></a>4.4.1 含义</h4><p>一种限制，用于限制表中的数据，为了保证表中的数据的准确和可靠性</p><h4 id="4-4-2-分类"><a href="#4-4-2-分类" class="headerlink" title="4.4.2 分类"></a>4.4.2 分类</h4><p>六大约束：</p><p><strong>1）NOT NULL</strong></p><p>非空，用于保证该字段的值不能为空；比如：姓名、学号等</p><p><strong>2）DEFAULT</strong></p><p>默认，用于保证该字段有默认值；比如：性别</p><p><strong>3）PRIMARY KEY</strong></p><p>主键，用于保证该字段的值具有唯一性，并且非空；比如：学号、员工编号等</p><p><strong>4）UNIQUE</strong></p><p>唯一，用于保证该字段的值具有唯一性，可以为空；比如：座位号</p><p><strong>5）CHECK</strong></p><p>检查约束【mysql中不支持】；比如：年龄、性别</p><p><strong>6）FOREIGN KEY</strong></p><p>外键，用于限制两个表的关系，用于保证该字段的值必须来自于主表的关联列的值；在从表添加外键约束，用于引用主表中某列的值；比如：学生表的专业编号，员工表的部门编号，员工表的工种编号</p><h4 id="4-4-3-约束的添加分类"><a href="#4-4-3-约束的添加分类" class="headerlink" title="4.4.3 约束的添加分类"></a>4.4.3 约束的添加分类</h4><p><strong>1）列级约束</strong></p><p>六大约束语法上都支持，但外键约束没有效果    </p><p><strong>2）表级约束</strong></p><p>除了非空、默认，其他的都支持    </p><p><strong>添加约束的时机</strong>：① 创建表时；② 修改表时</p><p>主键和唯一的大对比：</p><table><thead><tr><th align="center"></th><th align="center">保证唯一性</th><th align="center">是否允许为空</th><th align="center">一个表中可以有多少个</th><th align="center">是否允许组合</th></tr></thead><tbody><tr><td align="center">主键</td><td align="center">√</td><td align="center">×</td><td align="center">至多有1个</td><td align="center">√，但不推荐</td></tr><tr><td align="center">唯一</td><td align="center">√</td><td align="center">√</td><td align="center">可以有多个</td><td align="center">√，但不推荐</td></tr></tbody></table><p><strong>外键</strong></p><p>① 从表设置外键关系</p><p>② 外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求</p><p>③ 关联列必须是一个key（一般是主键或唯一）</p><p>④ 插入数据时，先插入主表，再插入从表；删除数据时，先删除从表，再删除主表</p><h4 id="4-4-4-语法"><a href="#4-4-4-语法" class="headerlink" title="4.4.4 语法"></a>4.4.4 语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段名 字段类型 列级约束,</span><br><span class="line">字段名 字段类型,</span><br><span class="line">表级约束</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>1）创建表时添加约束</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE students ;</span><br><span class="line"></span><br><span class="line"># 一、创建表时添加约束</span><br><span class="line"># 1.添加列级约束</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line"></span><br><span class="line">直接在字段名和类型后面追加 约束类型 即可。</span><br><span class="line"></span><br><span class="line">只支持：默认、非空、主键、唯一</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">USE students ;</span><br><span class="line"></span><br><span class="line">CREATE TABLE stuinfo (</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">  # 主键</span><br><span class="line">  stuName VARCHAR (20) NOT NULL,</span><br><span class="line">  # 非空</span><br><span class="line">  gender CHAR(1) CHECK (gender &#x3D; &#39;男&#39; </span><br><span class="line">    OR gender &#x3D; &#39;女&#39;),</span><br><span class="line">  # 检查</span><br><span class="line">  seat INT UNIQUE,</span><br><span class="line">  # 唯一</span><br><span class="line">  age INT DEFAULT 18,</span><br><span class="line">  # 默认约束</span><br><span class="line">  majorId INT REFERENCES major (id) # 外键</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line">CREATE TABLE major (</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">  majorName VARCHAR (20)</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line">DESC stuinfo ;</span><br><span class="line"># 查看stuinfo表中所有的索引，包括主键、外键、唯一</span><br><span class="line">SHOW INDEX FROM stuinfo ;</span><br><span class="line"></span><br><span class="line"># 2.添加表级约束</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：在各个字段的最下面</span><br><span class="line"> 【constraint 约束名】 约束类型(字段名) </span><br><span class="line"> </span><br><span class="line">*&#x2F;</span><br><span class="line">DROP TABLE IF EXISTS stuinfo ;</span><br><span class="line"></span><br><span class="line">CREATE TABLE stuinfo (</span><br><span class="line">  id INT,</span><br><span class="line">  stuname VARCHAR (20),</span><br><span class="line">  gender CHAR(1),</span><br><span class="line">  seat INT,</span><br><span class="line">  age INT,</span><br><span class="line">  majorid INT,</span><br><span class="line">  CONSTRAINT pk PRIMARY KEY (id),</span><br><span class="line">  #主键</span><br><span class="line">  CONSTRAINT uq UNIQUE (seat),</span><br><span class="line">  #唯一键</span><br><span class="line">  CONSTRAINT ck CHECK (gender &#x3D; &#39;男&#39; </span><br><span class="line">    OR gender &#x3D; &#39;女&#39;),</span><br><span class="line">  #检查</span><br><span class="line">  CONSTRAINT fk_stuinfo_major FOREIGN KEY (majorid) REFERENCES major (id) #外键</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line">SHOW INDEX FROM stuinfo ;</span><br><span class="line"></span><br><span class="line"># 通用的写法：★</span><br><span class="line">CREATE TABLE IF NOT EXISTS stuinfo (</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">  stuname VARCHAR (20),</span><br><span class="line">  sex CHAR(1),</span><br><span class="line">  age INT DEFAULT 18,</span><br><span class="line">  seat INT UNIQUE,</span><br><span class="line">  majorid INT,</span><br><span class="line">  CONSTRAINT fk_stuinfo_major FOREIGN KEY (majorid) REFERENCES major (id)</span><br><span class="line">) ;</span><br></pre></td></tr></table></figure><p><strong>2）修改表时添加约束</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"># 二、修改表时添加约束</span><br><span class="line">&#x2F;*</span><br><span class="line">1、添加列级约束</span><br><span class="line">alter table 表名 modify column 字段名 字段类型 新约束;</span><br><span class="line"></span><br><span class="line">2、添加表级约束</span><br><span class="line">alter table 表名 add 【constraint 约束名】 约束类型(字段名) 【外键的引用】;</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">DROP TABLE IF EXISTS stuinfo ;</span><br><span class="line"></span><br><span class="line">CREATE TABLE stuinfo (</span><br><span class="line">  id INT,</span><br><span class="line">  stuname VARCHAR (20),</span><br><span class="line">  gender CHAR(1),</span><br><span class="line">  seat INT,</span><br><span class="line">  age INT,</span><br><span class="line">  majorid INT</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line">DESC stuinfo ;</span><br><span class="line"></span><br><span class="line"># 1.添加非空约束</span><br><span class="line">ALTER TABLE stuinfo </span><br><span class="line">  MODIFY COLUMN stuname VARCHAR (20) NOT NULL ;</span><br><span class="line"></span><br><span class="line">#2.添加默认约束</span><br><span class="line">ALTER TABLE stuinfo </span><br><span class="line">  MODIFY COLUMN age INT DEFAULT 18 ;</span><br><span class="line"></span><br><span class="line"># 3.添加主键</span><br><span class="line"># ①列级约束</span><br><span class="line">ALTER TABLE stuinfo </span><br><span class="line">  MODIFY COLUMN id INT PRIMARY KEY ;</span><br><span class="line"></span><br><span class="line"># ②表级约束</span><br><span class="line">ALTER TABLE stuinfo </span><br><span class="line">  ADD PRIMARY KEY (id) ;</span><br><span class="line"></span><br><span class="line"># 4.添加唯一</span><br><span class="line"># ①列级约束</span><br><span class="line">ALTER TABLE stuinfo </span><br><span class="line">  MODIFY COLUMN seat INT UNIQUE ;</span><br><span class="line"></span><br><span class="line"># ②表级约束</span><br><span class="line">ALTER TABLE stuinfo </span><br><span class="line">  ADD UNIQUE (seat) ;</span><br><span class="line"></span><br><span class="line"># 5.添加外键</span><br><span class="line">ALTER TABLE stuinfo </span><br><span class="line">  ADD CONSTRAINT fk_stuinfo_major FOREIGN KEY (majorid) REFERENCES major (id) ;</span><br></pre></td></tr></table></figure><p><strong>3）修改表时删除约束</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 三、修改表时删除约束</span><br><span class="line"># 1.删除非空约束</span><br><span class="line">ALTER TABLE stuinfo </span><br><span class="line">  MODIFY COLUMN stuname VARCHAR (20) NULL ;</span><br><span class="line"></span><br><span class="line"># 2.删除默认约束</span><br><span class="line">ALTER TABLE stuinfo </span><br><span class="line">  MODIFY COLUMN age INT ;</span><br><span class="line"></span><br><span class="line"># 3.删除主键</span><br><span class="line">ALTER TABLE stuinfo </span><br><span class="line">  DROP PRIMARY KEY ;</span><br><span class="line"></span><br><span class="line"># 4.删除唯一</span><br><span class="line">ALTER TABLE stuinfo </span><br><span class="line">  DROP INDEX seat ;</span><br><span class="line"></span><br><span class="line"># 5.删除外键</span><br><span class="line">ALTER TABLE stuinfo </span><br><span class="line">  DROP FOREIGN KEY fk_stuinfo_major ;</span><br><span class="line"></span><br><span class="line">SHOW INDEX FROM stuinfo ;</span><br></pre></td></tr></table></figure><h3 id="4-5-标识列"><a href="#4-5-标识列" class="headerlink" title="4.5 标识列"></a>4.5 标识列</h3><h4 id="4-5-1-含义"><a href="#4-5-1-含义" class="headerlink" title="4.5.1 含义"></a>4.5.1 含义</h4><p>又称为自增长列，可以不用手动的插入值，系统提供默认的序列值</p><p>含义：可以不用手动的插入值，系统提供默认的序列值</p><h4 id="4-5-2-特点"><a href="#4-5-2-特点" class="headerlink" title="4.5.2 特点"></a>4.5.2 特点</h4><p>1）标识列必须和主键搭配吗？不一定，但要求是一个key</p><p>2）一个表可以有几个标识列？至多一个！</p><p>3）标识列的类型只能是数值型</p><p>4）标识列可以通过 <code>SET auto_increment_increment=3;设置步长</code>;可以通过手动插入值，设置起始值</p><h4 id="4-5-3-创建表时设置标识列"><a href="#4-5-3-创建表时设置标识列" class="headerlink" title="4.5.3 创建表时设置标识列"></a>4.5.3 创建表时设置标识列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 一、创建表时设置标识列</span><br><span class="line">DROP TABLE IF EXISTS tab_identity ;</span><br><span class="line"></span><br><span class="line">CREATE TABLE tab_identity (</span><br><span class="line">  id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  NAME VARCHAR(20) </span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line">TRUNCATE TABLE tab_identity ;</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_identity(id,NAME) VALUES(NULL,&#39;john&#39;);</span><br><span class="line">INSERT INTO tab_identity(NAME) VALUES(&#39;lucy&#39;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM tab_identity;</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE &#39;%auto_increment%&#39; ;</span><br><span class="line"></span><br><span class="line">SET auto_increment_increment &#x3D; 3 ;</span><br></pre></td></tr></table></figure><h4 id="4-5-4-修改表时设置标识列"><a href="#4-5-4-修改表时设置标识列" class="headerlink" title="4.5.4 修改表时设置标识列"></a>4.5.4 修改表时设置标识列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 二、修改表时设置标识列</span><br><span class="line">ALTER TABLE tab_identity </span><br><span class="line">  MODIFY COLUMN id INT PRIMARY KEY AUTO_INCREMENT ;</span><br></pre></td></tr></table></figure><h4 id="4-5-5-修改表时删除标识列"><a href="#4-5-5-修改表时删除标识列" class="headerlink" title="4.5.5 修改表时删除标识列"></a>4.5.5 修改表时删除标识列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 三、修改表时删除标识列</span><br><span class="line">ALTER TABLE tab_identity </span><br><span class="line">  MODIFY COLUMN id INT ;</span><br></pre></td></tr></table></figure><hr><h2 id="5-TCL语言"><a href="#5-TCL语言" class="headerlink" title="5 TCL语言"></a>5 TCL语言</h2><p>TCL（Transmission Control Language）：事务控制语言</p><h3 id="5-1-事务"><a href="#5-1-事务" class="headerlink" title="5.1 事务"></a>5.1 事务</h3><h4 id="5-1-1-概念"><a href="#5-1-1-概念" class="headerlink" title="5.1.1 概念"></a>5.1.1 概念</h4><p>一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行。</p><h4 id="5-1-2特性"><a href="#5-1-2特性" class="headerlink" title="5.1.2特性"></a>5.1.2特性</h4><p><code>ACID</code><br>原子性（Atomicity）：一个事务不可再分割，要么都执行要么都不执行<br>一致性（Consistency）：一个事务执行会使数据从一个一致状态切换到另外一个一致状态<br>隔离性（Isolation）：一个事务的执行不受其他事务的干扰<br>持久性（Durability）：一个事务一旦提交，则会永久的改变数据库的数据.</p><h4 id="5-1-3-分类"><a href="#5-1-3-分类" class="headerlink" title="5.1.3 分类"></a>5.1.3 分类</h4><p><strong>隐式事务</strong>：事务没有明显的开启和结束的标记<br>比如：insert、update、delete语句</p><p><strong>显式事务</strong>：事务具有明显的开启和结束的标记<br>前提：必须先设置自动提交功能为禁用</p><h3 id="5-2-事务的创建"><a href="#5-2-事务的创建" class="headerlink" title="5.2 事务的创建"></a>5.2 事务的创建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 步骤1：开启事务</span><br><span class="line">SET autocommit &#x3D; 0;</span><br><span class="line">START TRANSACTION; # 可选的</span><br><span class="line"># 步骤2：编写事务中的sql语句（select insert update delete）</span><br><span class="line">语句1;</span><br><span class="line">语句2;</span><br><span class="line">...</span><br><span class="line"># 步骤3：结束事务</span><br><span class="line">COMMIT; # 提交事务</span><br><span class="line">ROLLBACK; # 回滚事务</span><br><span class="line">SAVEPOINT 节点名; # 设置保存点</span><br></pre></td></tr></table></figure><h3 id="5-3-并发事务"><a href="#5-3-并发事务" class="headerlink" title="5.3 并发事务"></a>5.3 并发事务</h3><p>1 事务的并发问题是如何发生的？</p><p>多个事务<strong>同时</strong>操作<strong>同一个</strong>数据库的相同数据时</p><p>2 并发问题都有哪些？</p><p><strong>脏读</strong>：一个事务读取了其他事务还没有提交的数据，读到的是其他事务“更新”的数据</p><p><strong>不可重复读</strong>：一个事务多次读取，结果不一样</p><p><strong>幻读</strong>：一个事务读取了其他事务还没有提交的数据，只是读到的是 其他事务“插入”的数据</p><p>3 如何解决并发问题？</p><p>通过设置<strong>隔离级别</strong>来解决</p><table><thead><tr><th align="center">事务的隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">read uncommitted</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">read committed</td><td align="center">×</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">repeatable read</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">serializable</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><blockquote><p><strong>mysql</strong>中默认第三个隔离级别 repeatable read<br><strong>oracle</strong>中默认第二个隔离级别 read committed</p></blockquote><p><strong>查看隔离级别</strong>：<code>select @@tx_isolation;</code></p><p><strong>设置隔离级别</strong>：<code>set session|global transaction isolation level 隔离级别;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SHOW ENGINES ; # 查看数据库引擎</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE &#39;autocommit&#39; ;</span><br><span class="line"></span><br><span class="line">USE test;</span><br><span class="line">CREATE TABLE account (</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">  username VARCHAR (20),</span><br><span class="line">  balance DOUBLE</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line">INSERT INTO account VALUE (1, &#39;张无忌&#39;, 1000),</span><br><span class="line">(2, &#39;赵敏&#39;, 1000) ;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 演示事务的使用步骤</span><br><span class="line"># 1 开启事务</span><br><span class="line">SET autocommit&#x3D;0;</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line"># 2 编写一组事务的语句</span><br><span class="line">UPDATE account SET balance &#x3D; 1000 WHERE username&#x3D;&#39;张无忌&#39;;</span><br><span class="line">UPDATE account SET balance &#x3D; 1000 WHERE username&#x3D;&#39;赵敏&#39;;</span><br><span class="line"></span><br><span class="line"># 3 结束事务</span><br><span class="line">ROLLBACK;</span><br><span class="line"># commit;</span><br><span class="line"></span><br><span class="line">SELECT * FROM account;</span><br></pre></td></tr></table></figure><p><strong>演示事务对于<code>delete</code>和<code>truncate</code>的处理的区别</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 演示delete--还原，和原来一样</span><br><span class="line">SET autocommit&#x3D;0;</span><br><span class="line">START TRANSACTION ;</span><br><span class="line">DELETE FROM account;</span><br><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 演示truncate--数据删除，只剩表格</span><br><span class="line">SET autocommit&#x3D;0;</span><br><span class="line">START TRANSACTION ;</span><br><span class="line">TRUNCATE TABLE account;</span><br><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure><p><strong>演示<code>savepoint</code>的使用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 演示savepoint 的使用</span><br><span class="line">SET autocommit&#x3D;0;</span><br><span class="line">START TRANSACTION;</span><br><span class="line">DELETE FROM account WHERE id&#x3D;25;</span><br><span class="line">SAVEPOINT a;# 设置保存点</span><br><span class="line">DELETE FROM account WHERE id&#x3D;28;</span><br><span class="line">ROLLBACK TO a;# 回滚到保存点</span><br><span class="line"></span><br><span class="line">SELECT * FROM account</span><br></pre></td></tr></table></figure><hr><h2 id="6-其他"><a href="#6-其他" class="headerlink" title="6 其他"></a>6 其他</h2><p>视图、变量、存储过程、函数、流程控制过程</p><h3 id="6-1-视图"><a href="#6-1-视图" class="headerlink" title="6.1 视图"></a>6.1 视图</h3><p><strong>含义</strong>：虚拟表，和普通表一样使用</p><blockquote><p>mysql5.1版本出现的新特性，是通过表动态生成的数据</p></blockquote><table><thead><tr><th></th><th>创建语法的关键字</th><th>是否实际占用物理空间</th><th>使用</th></tr></thead><tbody><tr><td>视图</td><td>create view</td><td>只是保存了sql逻辑</td><td>增删改查，只是一般不能增删改</td></tr><tr><td>表</td><td>create table</td><td>保存了数据</td><td>增删改查</td></tr></tbody></table><h4 id="6-1-1-创建视图"><a href="#6-1-1-创建视图" class="headerlink" title="6.1.1 创建视图"></a>6.1.1 创建视图</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW 视图名 AS</span><br><span class="line">查询语句;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">USE myemployees;</span><br><span class="line"></span><br><span class="line"># 1.查询姓名中包含a字符的员工名、部门名和工种信息</span><br><span class="line"># ① 创建</span><br><span class="line">CREATE VIEW myv1 AS </span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  department_name,</span><br><span class="line">  job_title </span><br><span class="line">FROM</span><br><span class="line">  employees e </span><br><span class="line">  JOIN departments d </span><br><span class="line">    ON e.department_id &#x3D; d.department_id </span><br><span class="line">  JOIN jobs j </span><br><span class="line">    ON j.job_id &#x3D; e.job_id ;</span><br><span class="line"></span><br><span class="line"># ② 使用</span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  myv1 </span><br><span class="line">WHERE last_name LIKE &#39;%a%&#39; ;</span><br><span class="line"></span><br><span class="line"># 2.查询各部门的平均工资级别</span><br><span class="line"># ① 创建视图查看每个部门的平均工资</span><br><span class="line">CREATE VIEW myv2 AS </span><br><span class="line">SELECT </span><br><span class="line">  AVG(salary) ag,</span><br><span class="line">  department_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">GROUP BY department_id ;</span><br><span class="line"></span><br><span class="line"># ② 使用</span><br><span class="line">SELECT </span><br><span class="line">  myv2.&#96;ag&#96;,</span><br><span class="line">  g.grade_level </span><br><span class="line">FROM</span><br><span class="line">  myv2 </span><br><span class="line">  JOIN job_grades g </span><br><span class="line">    ON myv2.&#96;ag&#96; BETWEEN g.&#96;lowest_sal&#96; </span><br><span class="line">    AND g.&#96;highest_sal&#96; ;</span><br><span class="line"></span><br><span class="line"># 3.查询平均工资最低的部门信息</span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  myv2 </span><br><span class="line">ORDER BY ag </span><br><span class="line">LIMIT 1 ;</span><br><span class="line"></span><br><span class="line">#4.查询平均工资最低的部门名和工资</span><br><span class="line">CREATE VIEW myv3 AS </span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  myv2 </span><br><span class="line">ORDER BY ag </span><br><span class="line">LIMIT 1 ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  d.*,</span><br><span class="line">  m.ag </span><br><span class="line">FROM</span><br><span class="line">  myv3 m </span><br><span class="line">  JOIN departments d </span><br><span class="line">    ON m.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96; ;</span><br></pre></td></tr></table></figure><h4 id="6-1-2-视图的修改"><a href="#6-1-2-视图的修改" class="headerlink" title="6.1.2 视图的修改"></a>6.1.2 视图的修改</h4><p><strong>1）方式一</strong></p><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE VIEW  视图名 AS</span><br><span class="line">查询语句;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE VIEW myv3 AS </span><br><span class="line">SELECT </span><br><span class="line">  AVG(salary),</span><br><span class="line">  job_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">GROUP BY job_id ;</span><br></pre></td></tr></table></figure><p><strong>2）方式二</strong></p><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER VIEW 视图名 AS </span><br><span class="line">查询语句;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ALTER VIEW myv3 </span><br><span class="line">  AS </span><br><span class="line">  SELECT </span><br><span class="line">    * </span><br><span class="line">  FROM</span><br><span class="line">    employees ;</span><br></pre></td></tr></table></figure><h4 id="6-1-3-删除视图"><a href="#6-1-3-删除视图" class="headerlink" title="6.1.3 删除视图"></a>6.1.3 删除视图</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW 视图名,视图名,...;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW emp_v1,</span><br><span class="line">emp_v2,</span><br><span class="line">myv3 ;</span><br></pre></td></tr></table></figure><h4 id="6-1-4-查看视图"><a href="#6-1-4-查看视图" class="headerlink" title="6.1.4 查看视图"></a>6.1.4 查看视图</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC 视图名 ;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE VIEW myv3 ;</span><br></pre></td></tr></table></figure><h4 id="6-1-5-视图的更新"><a href="#6-1-5-视图的更新" class="headerlink" title="6.1.5 视图的更新"></a>6.1.5 视图的更新</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE VIEW myv1 AS </span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  email </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br><span class="line"></span><br><span class="line"># 1.插入</span><br><span class="line">INSERT INTO myv1 </span><br><span class="line">VALUES</span><br><span class="line">  (&#39;张飞&#39;, &#39;zf@qq.com&#39;) ;</span><br><span class="line"></span><br><span class="line"># 2.修改</span><br><span class="line">UPDATE </span><br><span class="line">  myv1 </span><br><span class="line">SET</span><br><span class="line">  last_name &#x3D; &#39;张无忌&#39; </span><br><span class="line">WHERE last_name &#x3D; &#39;张飞&#39; ;</span><br><span class="line"></span><br><span class="line"># 3.删除</span><br><span class="line">DELETE </span><br><span class="line">FROM</span><br><span class="line">  myv1 </span><br><span class="line">WHERE last_name &#x3D; &#39;张无忌&#39; ;</span><br></pre></td></tr></table></figure><blockquote><p>具备以下特点的视图不允许更新</p><p>① 包含以下关键字的sql语句：分组函数、distinct、group  by、having、union或者union all</p><p>② 常量视图</p><p>③ select中包含子查询</p><p>④ join（不能插入）</p><p>⑤ from一个不能更新的视图</p><p>⑥ where子句的子查询引用了from子句中的表</p></blockquote><h3 id="6-2-变量"><a href="#6-2-变量" class="headerlink" title="6.2 变量"></a>6.2 变量</h3><h4 id="6-2-1-分类"><a href="#6-2-1-分类" class="headerlink" title="6.2.1 分类"></a>6.2.1 分类</h4><table><thead><tr><th align="center">系统变量</th><th align="center">自定义变量</th></tr></thead><tbody><tr><td align="center">全局变量</td><td align="center">用户变量</td></tr><tr><td align="center">会话变量</td><td align="center">局部变量</td></tr></tbody></table><h4 id="6-2-2-系统变量"><a href="#6-2-2-系统变量" class="headerlink" title="6.2.2 系统变量"></a>6.2.2 系统变量</h4><p><strong>说明</strong></p><p>变量有系统提供，不是用户定义，属于服务器层面</p><p><strong>语法</strong></p><p><strong>1）查看所有的系统变量</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global|【session】 variables;</span><br></pre></td></tr></table></figure><p><strong>2）查看满足条件的部分系统变量</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global|【session】 variables like &#39;%char%&#39;;</span><br></pre></td></tr></table></figure><p><strong>3）查看指定的系统变量的值</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@global|【session】.系统变量名;</span><br></pre></td></tr></table></figure><p><strong>4）为某个系统变量赋值</strong><br><strong>方式一</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global|【session】系统变量名 &#x3D; 值;</span><br></pre></td></tr></table></figure><p><strong>方式二</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set @@global|【session】系统变量名 &#x3D; 值;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong></p><p>如果是全局级别，则需要加global，如果是会话级别，则需要加session，如果不写，则默认session</p></blockquote><p><strong>1）全局变量</strong></p><p><strong>作用域</strong>：服务器每次启动将为所有的全局变量赋初始值，针对于所有会话（连接）有效，但不能跨重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># ① 查看所有全局变量</span><br><span class="line">SHOW GLOBAL VARIABLES ;</span><br><span class="line"></span><br><span class="line"># ② 查看满足条件的部分系统变量</span><br><span class="line">SHOW GLOBAL VARIABLES LIKE &#39;%char%&#39; ;</span><br><span class="line"></span><br><span class="line"># ③ 查看指定的系统变量的值</span><br><span class="line">SELECT </span><br><span class="line">  @@global.autocommit ;</span><br><span class="line"></span><br><span class="line"># ④ 为某个系统变量赋值</span><br><span class="line">SET @@global.autocommit &#x3D; 0 ;</span><br><span class="line"></span><br><span class="line">SET GLOBAL autocommit &#x3D; 0 ;</span><br></pre></td></tr></table></figure><p><strong>2）会话变量</strong></p><p><strong>作用域</strong>：针对于当前会话（连接）有效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># ① 查看所有会话变量</span><br><span class="line">SHOW SESSION VARIABLES ;</span><br><span class="line"></span><br><span class="line"># ② 查看满足条件的部分会话变量</span><br><span class="line">SHOW SESSION VARIABLES LIKE &#39;%char%&#39; ;</span><br><span class="line"></span><br><span class="line"># ③ 查看指定的会话变量的值</span><br><span class="line">SELECT </span><br><span class="line">  @@autocommit ;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  @@session.tx_isolation ;</span><br><span class="line"></span><br><span class="line"># ④ 为某个会话变量赋值</span><br><span class="line"># 方式一：</span><br><span class="line">SET @@session.tx_isolation &#x3D; &#39;read-uncommitted&#39; ;</span><br><span class="line"></span><br><span class="line"># 方式二：</span><br><span class="line">SET SESSION tx_isolation &#x3D; &#39;read-committed&#39; ;</span><br></pre></td></tr></table></figure><h4 id="6-2-3-自定义变量"><a href="#6-2-3-自定义变量" class="headerlink" title="6.2.3 自定义变量"></a>6.2.3 自定义变量</h4><p><strong>说明</strong></p><p>变量由用户自定义，而不是系统提供的</p><p><strong>使用步骤</strong></p><p>声明 → 赋值 → 使用（查看、比较、运算等）</p><p><strong>1）用户变量</strong></p><p><strong>作用域</strong>：针对于当前会话（连接）有效，作用域同于<strong>会话变量</strong>，应用在任何地方，begin end中 或 begin end的外面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 赋值操作符：&#x3D;或:&#x3D;</span><br><span class="line"># ① 声明并初始化</span><br><span class="line">SET @用户变量名 &#x3D; 值;</span><br><span class="line">SET @用户变量名 :&#x3D; 值;</span><br><span class="line">SELECT @用户变量名 :&#x3D; 值;</span><br><span class="line"></span><br><span class="line"># ② 赋值（更新变量的值）</span><br><span class="line"># 方式一：</span><br><span class="line">SET @用户变量名 &#x3D; 值;</span><br><span class="line">SET @用户变量名 :&#x3D; 值;</span><br><span class="line">SELECT @用户变量名 :&#x3D; 值;</span><br><span class="line"># 方式二：</span><br><span class="line">SELECT 字段 INTO @变量名</span><br><span class="line">FROM 表;</span><br><span class="line"># ③ 使用（查看变量的值）</span><br><span class="line">SELECT @变量名;</span><br><span class="line"></span><br><span class="line"># 案例</span><br><span class="line"># 1、声明并初始化</span><br><span class="line">SET @name &#x3D; &#39;john&#39;;</span><br><span class="line">SET @name &#x3D; 100;</span><br><span class="line">SET @account &#x3D; 1;</span><br><span class="line"></span><br><span class="line"># 2、赋值</span><br><span class="line">SELECT COUNT(*) INTO @count</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line"># 3、查看</span><br><span class="line">SELECT @count;</span><br></pre></td></tr></table></figure><p><strong>2）局部变量</strong></p><p><strong>作用域</strong>：仅仅在定义它的begin end块中有效，应用在 begin end中的第一句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># ① 声明</span><br><span class="line">DECLARE 变量名 类型;</span><br><span class="line">DECLARE 变量名 类型 DEFAULT 值 ;</span><br><span class="line"></span><br><span class="line"># ② 赋值（更新变量的值）</span><br><span class="line"># 方式一：通过set或select</span><br><span class="line">SET 局部变量名&#x3D;值;</span><br><span class="line">SET 局部变量名:&#x3D;值;</span><br><span class="line">SELECT @局部变量名:&#x3D;值;</span><br><span class="line"># 方式二：通过select into</span><br><span class="line">SELECT 字段 INTO 具备变量名</span><br><span class="line">FROM 表;</span><br><span class="line"># ③ 使用（查看变量的值）</span><br><span class="line">SELECT 局部变量名;</span><br></pre></td></tr></table></figure><p><strong>3）用户变量和局部变量的对比</strong></p><table><thead><tr><th align="center"></th><th align="center">作用域</th><th align="center">定义位置</th><th align="center">语法</th></tr></thead><tbody><tr><td align="center"><strong>用户变量</strong></td><td align="center">当前会话</td><td align="center">会话的任何地方</td><td align="center">加@符号，不用限定类型</td></tr><tr><td align="center"><strong>局部变量</strong></td><td align="center">BEGIN END中</td><td align="center">BEGIN END的第一句话</td><td align="center">一般不用加@,需要限定类型</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 案例：声明两个变量，求和并打印</span><br><span class="line"></span><br><span class="line"># 用户变量</span><br><span class="line">SET @m &#x3D; 1;</span><br><span class="line">SET @n &#x3D; 2;</span><br><span class="line">SET @sum &#x3D; @m + @n;</span><br><span class="line">SELECT @sum;</span><br><span class="line"></span><br><span class="line"># 局部变量</span><br><span class="line">DECLARE m INT DEFAULT 1;</span><br><span class="line">DECLARE n INT DEFAULT 2;</span><br><span class="line">DECLARE SUM INT;</span><br><span class="line">SET SUM &#x3D; m + n;</span><br><span class="line">SELECT SUM;</span><br></pre></td></tr></table></figure><h3 id="6-3-存储过程"><a href="#6-3-存储过程" class="headerlink" title="6.3 存储过程"></a>6.3 存储过程</h3><p><strong>含义</strong></p><p>一组预先编译好的SQL语句的集合，理解成批处理语句</p><p><strong>优点</strong></p><p>1）提高代码的重用性</p><p>2）简化操作</p><p>3）减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率</p><h4 id="6-3-1-创建语法"><a href="#6-3-1-创建语法" class="headerlink" title="6.3.1 创建语法"></a>6.3.1 创建语法</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE 存储过程名(参数列表)</span><br><span class="line">BEGIN</span><br><span class="line"></span><br><span class="line">存储过程体（一组合法的SQL语句）</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>1）参数列表包含三部分</p><p><code>参数模式  参数名  参数类型</code></p><p>举例：<code>in stuname varchar(20)</code></p><p><strong>参数模式</strong></p><p><code>in</code>：该参数可以作为输入，也就是该参数需要调用方传入值</p><p><code>out</code>：该参数可以作为输出，也就是该参数可以作为返回值</p><p><code>inout</code>：该参数既可以作为输入又可以作为输出，也就是该参数既需要传入值，又可以返回值</p><p>2）如果存储过程体仅仅只有一句话，begin end可以省略</p><p>存储过程体中的每条sql语句的结尾要求必须加分号</p><p>存储过程的结尾可以使用 <code>delimiter</code> 重新设置</p><p>语法：<code>delimiter 结束标记</code></p><p>举例：<code>delimiter $</code></p><h4 id="6-3-2-调用语法"><a href="#6-3-2-调用语法" class="headerlink" title="6.3.2 调用语法"></a>6.3.2 调用语法</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALL 存储过程名(实参列表);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"># 1.空参列表</span><br><span class="line"># 案例：插入到admin表中五条记录</span><br><span class="line">SELECT * FROM admin;</span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line">CREATE PROCEDURE myp1 () </span><br><span class="line">BEGIN</span><br><span class="line">  INSERT INTO admin (username, &#96;password&#96;) </span><br><span class="line">  VALUES</span><br><span class="line">    (&#39;john1&#39;, &#39;0000&#39;),</span><br><span class="line">    (&#39;lily&#39;, &#39;0000&#39;),</span><br><span class="line">    (&#39;rose&#39;, &#39;0000&#39;),</span><br><span class="line">    (&#39;jack&#39;, &#39;0000&#39;),</span><br><span class="line">    (&#39;tom&#39;, &#39;0000&#39;) ;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line">CALL myp1()$</span><br><span class="line"></span><br><span class="line"># 2.创建带in模式参数的存储过程</span><br><span class="line"># 案例1：创建存储过程实现 根据女神名，查询对应的男神信息</span><br><span class="line">CREATE PROCEDURE myp2 (IN beautyName VARCHAR (20)) </span><br><span class="line">BEGIN</span><br><span class="line">  SELECT </span><br><span class="line">    bo.* </span><br><span class="line">  FROM</span><br><span class="line">    boys bo </span><br><span class="line">    RIGHT JOIN beauty b </span><br><span class="line">      ON bo.id &#x3D; b.boyfriend_id </span><br><span class="line">  WHERE b.name &#x3D; beautyName ;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line">CALL myp2(&#39;王语嫣&#39;)$</span><br><span class="line">  </span><br><span class="line"># 案例2 ：创建存储过程实现，用户是否登录成功</span><br><span class="line">CREATE PROCEDURE myp3 (</span><br><span class="line">  IN username VARCHAR (20),</span><br><span class="line">  IN PASSWORD VARCHAR (20)</span><br><span class="line">) </span><br><span class="line">BEGIN</span><br><span class="line">  DECLARE result INT DEFAULT 0 ;#声明并初始化</span><br><span class="line">  SELECT </span><br><span class="line">    COUNT(*) INTO result #赋值</span><br><span class="line">  FROM</span><br><span class="line">    admin </span><br><span class="line">  WHERE admin.username &#x3D; username </span><br><span class="line">    AND admin.password &#x3D; PASSWORD ;</span><br><span class="line">  SELECT </span><br><span class="line">    IF(result &gt; 0, &#39;成功&#39;, &#39;失败&#39;) ;#使用</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line">CALL myp3(&#39;张飞&#39;,&#39;8888&#39;)$</span><br><span class="line"></span><br><span class="line"># 3.创建out 模式参数的存储过程</span><br><span class="line"># 案例1：根据输入的女神名，返回对应的男神名</span><br><span class="line">CREATE PROCEDURE myp4 (</span><br><span class="line">  IN beautyName VARCHAR (20),</span><br><span class="line">  OUT boyName VARCHAR (20)</span><br><span class="line">) </span><br><span class="line">BEGIN</span><br><span class="line">  SELECT </span><br><span class="line">    bo.boyname INTO boyname </span><br><span class="line">  FROM</span><br><span class="line">    boys bo </span><br><span class="line">    RIGHT JOIN beauty b </span><br><span class="line">      ON b.boyfriend_id &#x3D; bo.id </span><br><span class="line">  WHERE b.name &#x3D; beautyName ;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line">CALL myp4(&#39;小昭&#39;,@name)$</span><br><span class="line">SELECT @name$    </span><br><span class="line">    </span><br><span class="line"># 案例2：根据输入的女神名，返回对应的男神名和魅力值</span><br><span class="line">CREATE PROCEDURE myp5 (</span><br><span class="line">  IN beautyName VARCHAR (20),</span><br><span class="line">  OUT boyName VARCHAR (20),</span><br><span class="line">  OUT usercp INT</span><br><span class="line">) </span><br><span class="line">BEGIN</span><br><span class="line">  SELECT </span><br><span class="line">    boys.boyname,</span><br><span class="line">    boys.usercp INTO boyname,</span><br><span class="line">    usercp </span><br><span class="line">  FROM</span><br><span class="line">    boys </span><br><span class="line">    RIGHT JOIN beauty b </span><br><span class="line">      ON b.boyfriend_id &#x3D; boys.id </span><br><span class="line">  WHERE b.name &#x3D; beautyName ;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line">CALL myp5(&#39;小昭&#39;,@name,@cp)$</span><br><span class="line">SELECT @name,@cp$    </span><br><span class="line"></span><br><span class="line"># 4.创建带inout模式参数的存储过程</span><br><span class="line"># 案例1：传入a和b两个值，最终a和b都翻倍并返回</span><br><span class="line">CREATE PROCEDURE myp6 (INOUT a INT, INOUT b INT) </span><br><span class="line">BEGIN</span><br><span class="line">  SET a &#x3D; a * 2 ;</span><br><span class="line">  SET b &#x3D; b * 2 ;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line">SET @m&#x3D;10$</span><br><span class="line">SET @n&#x3D;20$</span><br><span class="line">CALL myp6(@m,@n)$</span><br><span class="line">SELECT @m,@n$</span><br></pre></td></tr></table></figure><h4 id="6-3-3-删除语法"><a href="#6-3-3-删除语法" class="headerlink" title="6.3.3 删除语法"></a>6.3.3 删除语法</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop procedure 存储过程名</span><br></pre></td></tr></table></figure><blockquote><p>一次只能删除一个</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DROP PROCEDURE p1 ;</span><br><span class="line">DROP PROCEDURE p2,p3 ; # 错误</span><br></pre></td></tr></table></figure><h4 id="6-3-4-查看存储过程的信息"><a href="#6-3-4-查看存储过程的信息" class="headerlink" title="6.3.4 查看存储过程的信息"></a>6.3.4 查看存储过程的信息</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE PROCEDURE 存储过程名 ;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE PROCEDURE myp2 ;</span><br><span class="line">DESC myp2 ; # 错误</span><br></pre></td></tr></table></figure><h3 id="6-4-函数"><a href="#6-4-函数" class="headerlink" title="6.4 函数"></a>6.4 函数</h3><p><strong>含义</strong></p><p>一组预先编译好的SQL语句的集合，理解成批处理语句</p><p><strong>优点</strong></p><p>1）提高代码的重用性</p><p>2）简化操作</p><p>3）减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率</p><h4 id="6-4-1-创建语法"><a href="#6-4-1-创建语法" class="headerlink" title="6.4.1 创建语法"></a>6.4.1 创建语法</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION 函数名 (参数列表) RETURNS 返回类型 </span><br><span class="line">BEGIN</span><br><span class="line">  函数体 </span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>注意：<br>1）参数列表包含两部分：<code>参数名 参数类型</code></p><p>2）函数体：肯定会有return语句，如果没有会报错<br>如果return语句没有放在函数体的最后也不报错，但不建议</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return 值;</span><br></pre></td></tr></table></figure><p>3）函数体中仅有一句话，则可以省略begin end</p><p>4）使用 <code>delimiter</code> 语句设置结束标记</p><h4 id="6-4-2-调用语法"><a href="#6-4-2-调用语法" class="headerlink" title="6.4.2 调用语法"></a>6.4.2 调用语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  函数名 (参数列表) 结束标记&#96;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"># 1.无参有返回</span><br><span class="line"># 案例：返回公司的员工个数</span><br><span class="line">  CREATE FUNCTION myf1 () RETURNS INT </span><br><span class="line">  BEGIN</span><br><span class="line">    DECLARE c INT DEFAULT 0 ;</span><br><span class="line"></span><br><span class="line"> # 定义局部变量</span><br><span class="line">SELECT COUNT(*) INTO c # 赋值</span><br><span class="line">FROM employees;</span><br><span class="line">RETURN c;</span><br><span class="line"></span><br><span class="line">END $ </span><br><span class="line">SELECT </span><br><span class="line">myf1 () $ </span><br><span class="line"></span><br><span class="line"># 2.有参有返回</span><br><span class="line"># 案例1：根据员工名，返回它的工资</span><br><span class="line"> CREATE FUNCTION myf2 (empName VARCHAR (20)) RETURNS DOUBLE </span><br><span class="line">BEGIN</span><br><span class="line">  SET @sal &#x3D; 0 ;</span><br><span class="line">  </span><br><span class="line">  #定义用户变量 </span><br><span class="line">SELECT salary INTO @sal   #赋值</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name &#x3D; empName;</span><br><span class="line"></span><br><span class="line">RETURN @sal;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">SELECT myf2(&#39;k_ing&#39;) $</span><br><span class="line"></span><br><span class="line"># 案例2：根据部门名，返回该部门的平均工资</span><br><span class="line"></span><br><span class="line">CREATE FUNCTION myf3(deptName VARCHAR(20)) RETURNS DOUBLE</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE sal DOUBLE ;</span><br><span class="line">SELECT </span><br><span class="line">  AVG(salary) INTO sal </span><br><span class="line">FROM</span><br><span class="line">  employees e </span><br><span class="line">  JOIN departments d </span><br><span class="line">    ON e.department_id &#x3D; d.department_id </span><br><span class="line">WHERE d.department_name &#x3D; deptName ;</span><br><span class="line"></span><br><span class="line">RETURN sal;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">SELECT myf3(&#39;IT&#39;)$</span><br></pre></td></tr></table></figure><h4 id="6-4-3-查看函数"><a href="#6-4-3-查看函数" class="headerlink" title="6.4.3 查看函数"></a>6.4.3 查看函数</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE FUNCTION 函数名</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE FUNCTION myf3;</span><br></pre></td></tr></table></figure><h4 id="6-4-4-删除函数"><a href="#6-4-4-删除函数" class="headerlink" title="6.4.4 删除函数"></a>6.4.4 删除函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP FUNCTION 函数名;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP FUNCTION myf3;</span><br></pre></td></tr></table></figure><h4 id="6-4-5-存储过程和函数的区别"><a href="#6-4-5-存储过程和函数的区别" class="headerlink" title="6.4.5 存储过程和函数的区别"></a>6.4.5 存储过程和函数的区别</h4><p><strong>存储过程</strong>：可以有0个返回，也可以有多个返回，适合做<strong>批量插入</strong>、<strong>批量更新</strong><br><strong>函数</strong>：有且仅有1个返回，适合做<strong>处理数据后返回一个结果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 案例</span><br><span class="line"># 一、创建函数，实现传入两个float，返回二者之和</span><br><span class="line">CREATE FUNCTION test_fun1 (num1 FLOAT, num2 FLOAT) RETURNS FLOAT </span><br><span class="line">BEGIN</span><br><span class="line">  DECLARE SUMFLOAT DEFAULT 0 ;  </span><br><span class="line">  SET SUM &#x3D; num1 + num2;</span><br><span class="line">RETURN SUM;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">SELECT test_fun1(1,2)$</span><br></pre></td></tr></table></figure><h3 id="6-5-流程控制过程"><a href="#6-5-流程控制过程" class="headerlink" title="6.5 流程控制过程"></a>6.5 流程控制过程</h3><p><strong>分类</strong></p><p><strong>顺序结构</strong>：程序从上往下依次执行</p><p><strong>分支结构</strong>：程序从两条或多条路径中选择一条去执行</p><p><strong>循环结构</strong>：程序在满足一定条件的基础上，重复执行一段代码</p><h4 id="6-5-1-分支结构"><a href="#6-5-1-分支结构" class="headerlink" title="6.5.1 分支结构"></a>6.5.1 分支结构</h4><p><strong>1）if函数</strong></p><p><strong>功能</strong>：实现简单的双分支</p><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(表达式1,表达式2,表达式3)</span><br></pre></td></tr></table></figure><p><strong>执行顺序</strong>：如果表达式1成立，则if函数返回表达式2的值，否则返回表达式3的值</p><p><strong>应用</strong>：任何地方</p><p><strong>2）if结构</strong></p><p><strong>功能</strong>：实现多重分支</p><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if 条件1 then 语句1;</span><br><span class="line">ifelse 条件2 then 语句2;</span><br><span class="line">...</span><br><span class="line">【else 语句n;】</span><br></pre></td></tr></table></figure><p><strong>应用</strong>：在begin end中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 案例1：创建函数，实现传入成绩，如果成绩&gt;90,返回A，如果成绩&gt;80,返回B，如果成绩&gt;60,返回C，否则返回D</span><br><span class="line">CREATE FUNCTION test_if (score INT) RETURNS CHAR </span><br><span class="line">BEGIN</span><br><span class="line">DECLARE ch CHAR DEFAULT &#39;A&#39; ;</span><br><span class="line"></span><br><span class="line">IF score&gt;90 THEN SET ch&#x3D;&#39;A&#39;;</span><br><span class="line">ELSEIF score&gt;80 THEN SET ch&#x3D;&#39;B&#39;;</span><br><span class="line">ELSEIF score &gt; 60 </span><br><span class="line">THEN SET ch &#x3D; &#39;C&#39; ;</span><br><span class="line">ELSE SET ch&#x3D;&#39;D&#39;;</span><br><span class="line">END IF;</span><br><span class="line">RETURN ch;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">SELECT test_if(87)$</span><br></pre></td></tr></table></figure><p><strong>3）case结构</strong></p><p><strong>情况1</strong>：类似于java中的switch语句，一般用于实现等值判断</p><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE 变量|表达式|字段</span><br><span class="line">WHEN 要判断的值 THEN 返回的值1 或 语句1;</span><br><span class="line">WHEN 要判断的值 THEN 返回的值2 或 语句2;</span><br><span class="line">...</span><br><span class="line">ELSE 要返回的值n 或 语句n;</span><br><span class="line">END CASE;</span><br></pre></td></tr></table></figure><p><strong>情况2</strong>：类似于java中的多重if语句，一般用于实现区间判断<br>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE </span><br><span class="line">WHEN 要判断的条件1 THEN 返回的值1 或 语句1;</span><br><span class="line">WHEN 要判断的条件2 THEN 返回的值2 或 语句2;</span><br><span class="line">...</span><br><span class="line">ELSE 要返回的值n 或 语句n;</span><br><span class="line">END case;</span><br></pre></td></tr></table></figure><p><strong>特点</strong><br>① 可以作为表达式，嵌套在其他语句中使用，可以放在任何地方，begin end中 或 begin end的外面<br>可以作为独立的语句去使用，只能放在begin end中<br>② 如果when中的值满足 或 条件成立，则执行对应的then后面的语句，并且结束case<br>如果不满足，则执行else中的语句或值<br>③ else可以省略，如果else省略了，并且所有when条件都不满足，则返回null</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 案例： 创建存储过程，根据传入的成绩，来显示等级，比如传入的成绩90-100，显示A，80-90，显示B，60-80，显示C，否则，显示D</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE test_case(IN score INT)</span><br><span class="line">BEGIN</span><br><span class="line">CASE </span><br><span class="line">WHEN score &gt;&#x3D; 90 AND score &lt;&#x3D; 100 THEN SELECT &#39;A&#39;;</span><br><span class="line">WHEN score &gt;&#x3D; 80 THEN SELECT &#39;B&#39;;</span><br><span class="line">WHEN score &gt;&#x3D; 60 THEN SELECT &#39;C&#39;;</span><br><span class="line">ELSE SELECT &#39;D&#39;;</span><br><span class="line">END CASE</span><br><span class="line">END $ </span><br><span class="line"></span><br><span class="line">CALL test_case (95) $</span><br></pre></td></tr></table></figure><h4 id="6-5-2-循环结构"><a href="#6-5-2-循环结构" class="headerlink" title="6.5.2 循环结构"></a>6.5.2 循环结构</h4><p><strong>分类</strong>：while、loop、repeat</p><p><strong>循环控制</strong>：<br><code>iterate</code>： 类似于 continue，继续，结束本次循环，继续下一次<br><code>leave</code>：类似于 break，跳出，结束当前所在的循环</p><p><strong>1）while</strong></p><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">【标签:】WHILE 循环条件 DO</span><br><span class="line">循环体;</span><br><span class="line">END WHILE【 标签】;</span><br></pre></td></tr></table></figure><p><strong>2）loop</strong></p><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">【标签:】LOOP</span><br><span class="line">循环体;</span><br><span class="line">END LOOP 【标签】;</span><br></pre></td></tr></table></figure><blockquote><p>可以用来模拟简单的死循环</p></blockquote><p><strong>3）repeat</strong></p><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【标签：】REPEAT</span><br><span class="line">循环体;</span><br><span class="line">UNTIL 结束循环的条件</span><br><span class="line">END REPEAT 【标签】;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># 没有添加循环控制语句</span><br><span class="line"># 案例：批量插入，根据次数到admin表中多条记录</span><br><span class="line">CREATE PROCEDURE pro_while1(IN insertCount INT)</span><br><span class="line">BEGIN</span><br><span class="line"></span><br><span class="line">DECLARE i INT DEFAULT 1;</span><br><span class="line">WHILE i &lt;&#x3D; insertCount DO</span><br><span class="line">INSERT INTO admin(username, &#96;password&#96;) VALUES(CONCAT(&#39;Rose&#39;,i), &#39;666&#39;);</span><br><span class="line">SET i &#x3D; i + 1;</span><br><span class="line">END WHILE;</span><br><span class="line"></span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">CALL pro_while1(100) $</span><br><span class="line"></span><br><span class="line"># 2、添加leave语句</span><br><span class="line"># 案例：批量插入，根据次数插入到admin表中多条记录，如果次数 &gt; 20则停止</span><br><span class="line">TRUNCATE TABLE admin$</span><br><span class="line">DROP PROCEDURE test_while2 $</span><br><span class="line">CREATE PROCEDURE test_while2(IN insertCount INT)</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i INT DEFAULT 1;</span><br><span class="line">a:WHILE i &lt;&#x3D; insertCount DO</span><br><span class="line">INSERT INTO admin(username, &#96;password&#96;) VALUES(CONCAT(&#39;xiaonhau&#39;,i), &#39;0000&#39;);</span><br><span class="line">IF i &gt; 20 THEN LEAVE a;</span><br><span class="line">END IF;</span><br><span class="line">SET i &#x3D; i + 1;</span><br><span class="line">END WHILE a;</span><br><span class="line"></span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">CALL test_while2(100)$</span><br><span class="line"></span><br><span class="line"># 3、添加iterate语句</span><br><span class="line"># 案例：批量插入，根据次数插入到admin表中多条记录，直插入偶数次</span><br><span class="line">TRUNCATE TABLE admin$</span><br><span class="line">DROP PROCEDURE test_while2 $</span><br><span class="line">CREATE PROCEDURE test_while3(IN insertCount INT)</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i INT DEFAULT 0;</span><br><span class="line">a:WHILE i &lt;&#x3D; insertCount DO</span><br><span class="line">SET i &#x3D; i + 1;</span><br><span class="line">IF MOD(i, 2) !&#x3D; 0 THEN ITERATE a;</span><br><span class="line">END IF;</span><br><span class="line">INSERT INTO admin(username, &#96;password&#96;) VALUES(CONCAT(&#39;xiaohua&#39;,i), &#39;0000&#39;);</span><br><span class="line">END WHILE a;</span><br><span class="line"></span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">CALL test_while3(100)$</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的MySQL笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://ActionDing.github.io/categories/MySQL/"/>
    
      <category term="数据库" scheme="https://ActionDing.github.io/categories/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://ActionDing.github.io/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://ActionDing.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>【Java基础】10-异常处理</title>
    <link href="https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%9110-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%9110-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2020-07-04T19:02:10.000Z</published>
    <updated>2020-09-11T01:09:53.999Z</updated>
    
    <content type="html"><![CDATA[<p>异常的体系结构、异常处理、手动抛出异常、自定义异常类</p><a id="more"></a><h3 id="一、异常的体系结构"><a href="#一、异常的体系结构" class="headerlink" title="一、异常的体系结构"></a>一、异常的体系结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Throwable</span><br><span class="line"> |-----java.lang.Error:一般不编写针对性的代码进行处理。</span><br><span class="line"> |-----java.lang.Exception:可以进行异常的处理</span><br><span class="line">|------编译时异常(checked)</span><br><span class="line">|-----IOException</span><br><span class="line">|-----FileNotFoundException</span><br><span class="line">|-----ClassNotFoundException</span><br><span class="line">|------运行时异常(unchecked,RuntimeException)</span><br><span class="line">|-----NullPointerException</span><br><span class="line">|-----ArrayIndexOutOfBoundsException</span><br><span class="line">|-----ClassCastException</span><br><span class="line">|-----NumberFormatException</span><br><span class="line">|-----InputMismatchException</span><br><span class="line">|-----ArithmeticException</span><br></pre></td></tr></table></figure><p><img src="/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%9110-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/../images/%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB.png" alt="异常体系"></p><h4 id="1-分类"><a href="#1-分类" class="headerlink" title="1 分类"></a>1 分类</h4><p>从程序执行过程看分为<strong>编译时异常</strong>和<strong>运行时异常</strong></p><p>1）编译时异常：执行<code>javac.exe</code>命名时，可能出现的异常</p><p>2）运行时异常：执行<code>java.exe</code>命名时，出现的异常</p><p><img src="/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%9110-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/../images/%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png" alt="执行过程"></p><h4 id="2-常见的异常类型"><a href="#2-常见的异常类型" class="headerlink" title="2 常见的异常类型"></a>2 常见的异常类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常见的异常类型，请举例说明：</span></span><br><span class="line"><span class="comment">//******************以下是运行时异常***************************</span></span><br><span class="line"><span class="comment">//ArithmeticException</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">System.out.println(a / b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//InputMismatchException</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> score = scanner.nextInt();</span><br><span class="line">System.out.println(score);</span><br><span class="line"></span><br><span class="line">scanner.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//NumberFormatException</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">String str = <span class="string">"123"</span>;</span><br><span class="line">str = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">int</span> num = Integer.parseInt(str);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ClassCastException</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">Object obj = <span class="keyword">new</span> Date();</span><br><span class="line">String str = (String)obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//IndexOutOfBoundsException</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="comment">//int[] arr = new int[10];</span></span><br><span class="line"><span class="comment">//System.out.println(arr[10]);</span></span><br><span class="line"><span class="comment">//StringIndexOutOfBoundsException</span></span><br><span class="line">String str = <span class="string">"abc"</span>;</span><br><span class="line">System.out.println(str.charAt(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//NullPointerException</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int[] arr = null;</span></span><br><span class="line"><span class="comment">//System.out.println(arr[3]);</span></span><br><span class="line"></span><br><span class="line">String str = <span class="string">"abc"</span>;</span><br><span class="line">str = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(str.charAt(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//******************以下是编译时异常***************************</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//File file = new File("hello.txt");</span></span><br><span class="line"><span class="comment">//FileInputStream fis = new FileInputStream(file);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//int data = fis.read();</span></span><br><span class="line"><span class="comment">//while(data != -1)&#123;</span></span><br><span class="line"><span class="comment">//System.out.print((char)data);</span></span><br><span class="line"><span class="comment">//data = fis.read();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//fis.close();</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、异常处理"><a href="#二、异常处理" class="headerlink" title="二、异常处理"></a>二、异常处理</h3><h4 id="1-java异常处理的抓抛模型"><a href="#1-java异常处理的抓抛模型" class="headerlink" title="1 java异常处理的抓抛模型"></a>1 java异常处理的抓抛模型</h4><h5 id="1）过程一：”抛”"><a href="#1）过程一：”抛”" class="headerlink" title="1）过程一：”抛”"></a>1）过程一：”抛”</h5><p>程序在正常执行的过程中，<strong>一旦</strong>出现异常，就会在异常代码处生成一个对应异常类的对象，并将此对象抛出。<strong>一旦</strong>抛出对象以后，其后的代码就不再执行</p><p>关于异常对象的产生：</p><p>① 系统自动生成的异常对象</p><p>② 手动的生成一个异常对象，并抛出（throw）</p><h5 id="2）过程二：”抓”"><a href="#2）过程二：”抓”" class="headerlink" title="2）过程二：”抓”"></a>2）过程二：”抓”</h5><p>可以理解为异常的处理方式：</p><p>① try-catch-finally  </p><p>② throws</p><h4 id="2-异常处理方式一"><a href="#2-异常处理方式一" class="headerlink" title="2 异常处理方式一"></a>2 异常处理方式一</h4><p>try-catch-finally</p><h5 id="1）语法格式"><a href="#1）语法格式" class="headerlink" title="1）语法格式"></a>1）语法格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可能出现异常的代码</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 变量名<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理异常的方式1</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 变量名<span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理异常的方式2</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">3</span> 变量名<span class="number">3</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理异常的方式3</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一定会执行的代码</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2）使用说明"><a href="#2）使用说明" class="headerlink" title="2）使用说明"></a>2）使用说明</h5><p>1）<code>finally</code> 是可选的。</p><p>2）使用 <code>try</code> 将可能出现异常代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象的类型，去 <code>catch</code> 中进行匹配</p><p>3）一旦 <code>try</code> 中的异常对象匹配到某一个 <code>catch</code> 时，就进入 <code>catch</code> 中进行异常的处理。一旦处理完成，就跳出当前的 <code>try-catch</code> 结构（在没写 <code>finally</code> 的情况）。继续执行其后的代码</p><p>4）<code>catch</code> 中的异常类型如果没子父类关系，则谁声明在上，谁声明在下无所谓</p><p>​    <code>catch</code> 中的异常类型如果满足子父类关系，则要求子类一定声明在父类的上面。否则，报错</p><p>5）常用的异常对象处理的方式： ① String  getMessage()    ② printStackTrace()</p><p>6）在 <code>try</code> 结构中声明的变量，再出了 <code>try</code> 结构以后，就不能再被调用</p><p>7）<code>try-catch-finally</code> 结构可以嵌套</p><h5 id="3）总结"><a href="#3）总结" class="headerlink" title="3）总结"></a>3）总结</h5><p><strong>如何看待代码中的编译时异常和运行时异常？</strong></p><p>① 使用 <code>try-catch-finally</code> 处理编译时异常，是得程序在编译时就不再报错，但是运行时仍可能报错。相当于我们使用 <code>try-catch-finally</code> 将一个编译时可能出现的异常，延迟到运行时出现。</p><p>② 开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写 <code>try-catch-finally</code> 了。针对于编译时异常，我们说一定要考虑异常的处理。</p><p><strong>finally 的再说明</strong></p><p>① <code>finally</code>是可的</p><p>② <code>finally</code> 中声明的是一定会被执行的代码。即使 <code>catch</code> 中又出现异常了，<code>try</code> 中 <code>return</code> 语句，<code>catch</code> 中 <code>return</code> 语句等情况</p><p>③ 像数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动的回收的，我们需要自己手动的进行资源的释放。此时的资源释放，就需要声明在 <code>finally</code> 中</p><p><strong>面试题</strong></p><p>final、finally、finalize三者的区别？</p><blockquote><p>类似：</p><p>throw 和 throws<br>Collection 和 Collections<br>String 、StringBuffer、StringBuilder<br>ArrayList 、 LinkedList<br>HashMap 、LinkedHashMap<br>重写、重载</p><p>结构不相似的：</p><p>抽象类、接口<br>== 、 equals()<br>sleep()、wait()</p></blockquote><h4 id="3-异常处理方式二"><a href="#3-异常处理方式二" class="headerlink" title="3 异常处理方式二"></a>3 异常处理方式二</h4><p>“throws + 异常类型”写在方法的声明处。指明此方法执行时，可能会抛出的异常类型</p><p>一旦当方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出。异常代码后续的代码，就不再执行！</p><h5 id="1）对比两种处理方式"><a href="#1）对比两种处理方式" class="headerlink" title="1）对比两种处理方式"></a>1）对比两种处理方式</h5><p>try-catch-finally:真正的将异常给处理掉了。<br>throws的方式只是将异常抛给了方法的调用者。并没真正将异常处理掉。  </p><h5 id="2）体会开发中应该如何选择两种处理方式？"><a href="#2）体会开发中应该如何选择两种处理方式？" class="headerlink" title="2）体会开发中应该如何选择两种处理方式？"></a>2）体会开发中应该如何选择两种处理方式？</h5><p>① 如果父类中被重写的方法没throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果子类重写的方法中异常，必须使用try-catch-finally方式处理</p><p>② 执行的方法a中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用throws的方式进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理</p><blockquote><p>补充<br>方法重写的规则之一：子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</p></blockquote><h3 id="三、手动抛出异常"><a href="#三、手动抛出异常" class="headerlink" title="三、手动抛出异常"></a>三、手动抛出异常</h3><h4 id="1-使用说明"><a href="#1-使用说明" class="headerlink" title="1 使用说明"></a>1 使用说明</h4><p>在程序执行中，除了自动抛出异常对象的情况之外，我们还可以手动的throw一个异常类的对象。</p><h4 id="2-面试题"><a href="#2-面试题" class="headerlink" title="2 面试题"></a>2 面试题</h4><p>throw 和  throws区别：</p><p>throw 表示抛出一个异常类的对象，生成异常对象的过程。声明在方法体内<br>throws 属于异常处理的一种方式，声明在方法的声明处</p><h4 id="3-典型例题"><a href="#3-典型例题" class="headerlink" title="3 典型例题"></a>3 典型例题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(id &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//手动抛出异常对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//throw new RuntimeException("您输入的数据非法！");</span></span><br><span class="line"><span class="comment">//throw new Exception("您输入的数据非法！");</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">"不能输入负数"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Student [id="</span> + id + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、自定义异常类"><a href="#四、自定义异常类" class="headerlink" title="四、自定义异常类"></a>四、自定义异常类</h3><p><strong>如何自定义异常类？</strong></p><p>① 继承于现的异常结构：RuntimeException 、Exception</p><p>② 提供全局常量：serialVersionUID</p><p>③ 提供重载的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">7034897193246939L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;异常的体系结构、异常处理、手动抛出异常、自定义异常类&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/categories/Java/"/>
    
      <category term="Java基础" scheme="https://ActionDing.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/tags/Java/"/>
    
      <category term="编程" scheme="https://ActionDing.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【Java基础】9-面向对象·下</title>
    <link href="https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%919-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%C2%B7%E4%B8%8B/"/>
    <id>https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%919-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%C2%B7%E4%B8%8B/</id>
    <published>2020-07-04T19:02:09.000Z</published>
    <updated>2020-09-12T09:41:02.052Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象学习的三条主线：</p><ol><li><p>Java类及类的成员：属性、方法、构造器；<strong>代码块</strong>、<strong>内部类</strong></p></li><li><p>面向对象的三大特征：封装性、继承性、多态性</p></li><li><p>其它关键字：this、super、<strong>static</strong>、<strong>final</strong>、abstract、<strong>interface</strong>、package、import等</p></li></ol><a id="more"></a><h3 id="一、关键字static"><a href="#一、关键字static" class="headerlink" title="一、关键字static"></a>一、关键字static</h3><p>static：静态的</p><h4 id="1-可以用来修饰的结构"><a href="#1-可以用来修饰的结构" class="headerlink" title="1 可以用来修饰的结构"></a>1 可以用来修饰的结构</h4><p>主要用来修饰类的内部结构（属性、方法、代码块、内部类）</p><h4 id="2-static修饰属性：静态变量（或类变量）"><a href="#2-static修饰属性：静态变量（或类变量）" class="headerlink" title="2 static修饰属性：静态变量（或类变量）"></a>2 static修饰属性：静态变量（或类变量）</h4><h5 id="1）静态属性和非静态属性-实例变量"><a href="#1）静态属性和非静态属性-实例变量" class="headerlink" title="1）静态属性和非静态属性(实例变量)"></a>1）静态属性和非静态属性(实例变量)</h5><p>属性按是否使用static修饰，又分为：静态属性 和 非静态属性(实例变量)</p><p>实例变量：我们创建了类的多个对象，每个对象都独立的拥一套类中的非静态属性。当修改其中一个对象中的非静态属性时，不会导致其他对象中同样的属性值的修改。</p><p>静态变量：我们创建了类的多个对象，多个对象共享同一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，是修改过了的。</p><h5 id="2）static修饰属性的其他说明"><a href="#2）static修饰属性的其他说明" class="headerlink" title="2）static修饰属性的其他说明"></a>2）static修饰属性的其他说明</h5><p>① 静态变量随着类的加载而加载。可以通过”类.静态变量”的方式进行调用</p><p>② 静态变量的加载要早于对象的创建。</p><p>③ 由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中。</p><p>④</p><table><thead><tr><th align="center"></th><th align="center">类变量</th><th align="center">实例变量</th></tr></thead><tbody><tr><td align="center">类</td><td align="center">yes</td><td align="center">no</td></tr><tr><td align="center">对象</td><td align="center">yes</td><td align="center">yes</td></tr></tbody></table><h5 id="3）静态属性举例：System-out-Math-PI"><a href="#3）静态属性举例：System-out-Math-PI" class="headerlink" title="3）静态属性举例：System.out; Math.PI;"></a>3）静态属性举例：System.out; Math.PI;</h5><h4 id="3-static修饰方法：静态方法、类方法"><a href="#3-static修饰方法：静态方法、类方法" class="headerlink" title="3 static修饰方法：静态方法、类方法"></a>3 static修饰方法：静态方法、类方法</h4><p>1）随着类的加载而加载，可以通过”类.静态方法”的方式进行调用<br>2）</p><table><thead><tr><th></th><th>静态方法</th><th>非静态方法</th></tr></thead><tbody><tr><td>类</td><td>yes</td><td>no</td></tr><tr><td>对象</td><td>yes</td><td>yes</td></tr></tbody></table><p>3）静态方法中，只能调用静态的方法或属性<br>      非静态方法中，既可以调用非静态的方法或属性，也可以调用静态的方法或属性</p><blockquote><p>static的注意点<br>① 在静态的方法内，不能使用this关键字、super关键字<br>② 关于静态属性和静态方法的使用，大家都从生命周期的角度去理解。</p></blockquote><h4 id="4-如何判定属性和方法是否应该使用static关键字"><a href="#4-如何判定属性和方法是否应该使用static关键字" class="headerlink" title="4 如何判定属性和方法是否应该使用static关键字"></a>4 如何判定属性和方法是否应该使用static关键字</h4><p>1）关于属性</p><p>属性是可以被多个对象所共享的，不会随着对象的不同而不同的</p><p>类中的常量也常常声明为static</p><p>2）关于方法</p><p>操作静态属性的方法，通常设置为static的</p><p>工具类中的方法，习惯上声明为static的。 比如：Math、Arrays、Collections</p><h4 id="5-使用举例"><a href="#5-使用举例" class="headerlink" title="5 使用举例"></a>5 使用举例</h4><p>举例一：Arrays、Math、Collections等工具类</p><p>举例二：单例模式</p><h3 id="二、单例模式"><a href="#二、单例模式" class="headerlink" title="二、单例模式"></a>二、单例模式</h3><h4 id="1-设计模式的说明"><a href="#1-设计模式的说明" class="headerlink" title="1 设计模式的说明"></a>1 设计模式的说明</h4><h5 id="1）理解"><a href="#1）理解" class="headerlink" title="1）理解"></a>1）理解</h5><p><strong>设计模式</strong>是<strong>在大量的实践中总结和理论化之后优选的代码结构、编程风格、以及解决问题的思考方式</strong> 。 设计模免去我们自己再思考和摸索 。就像是经典的棋谱，不同的棋局，我们用不同的棋谱。“套路”</p><h5 id="2）常用的设计模式"><a href="#2）常用的设计模式" class="headerlink" title="2）常用的设计模式"></a>2）常用的设计模式</h5><p>① <strong>创建型模式</strong>，共5种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式<br>② <strong>结构型模式</strong>，共7种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式<br>③ <strong>行为型模式</strong>，共11种：策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</p><h4 id="2-单例模式"><a href="#2-单例模式" class="headerlink" title="2 单例模式"></a>2 单例模式</h4><h5 id="1）要解决的问题"><a href="#1）要解决的问题" class="headerlink" title="1）要解决的问题"></a>1）要解决的问题</h5><p>所谓<strong>类的单例设计模式</strong>，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例。</p><h5 id="2）具体代码的实现"><a href="#2）具体代码的实现" class="headerlink" title="2）具体代码的实现"></a>2）具体代码的实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 饿汉式1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line"><span class="comment">//1.私化类的构造器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Bank</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.内部创建类的对象</span></span><br><span class="line"><span class="comment">//4.要求此对象也必须声明为静态的</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Bank instance = <span class="keyword">new</span> Bank();</span><br><span class="line"><span class="comment">//3.提供公共的静态的方法，返回类的对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 饿汉式2：使用了静态代码块</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span>&#123;</span><br><span class="line"><span class="comment">//1.私化类的构造器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Order</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.声明当前类对象，没初始化</span></span><br><span class="line"><span class="comment">//4.此对象也必须声明为static的</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Order instance = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">instance = <span class="keyword">new</span> Order();</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//3.声明public、static的返回当前类对象的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 懒汉式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span>&#123;</span><br><span class="line"><span class="comment">//1.私化类的构造器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Order</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.声明当前类对象，没初始化</span></span><br><span class="line"><span class="comment">//4.此对象也必须声明为static的</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Order instance = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//3.声明public、static的返回当前类对象的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">instance = <span class="keyword">new</span> Order();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3）两种方式的对比"><a href="#3）两种方式的对比" class="headerlink" title="3）两种方式的对比"></a>3）两种方式的对比</h5><p>① 饿汉式    </p><p>坏处：对象加载时间过长。</p><p>好处：饿汉式是线程安全的</p><p>② 懒汉式</p><p>好处：延迟对象的创建。</p><p>目前的写法坏处：线程不安全。—&gt;到多线程内容时，再修改</p><h3 id="三、代码块"><a href="#三、代码块" class="headerlink" title="三、代码块"></a>三、代码块</h3><h4 id="1-代码块的作用"><a href="#1-代码块的作用" class="headerlink" title="1 代码块的作用"></a>1 代码块的作用</h4><p>用来初始化类、对象的信息</p><h4 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h4><p>代码块要是使用修饰符，只能使用static</p><p>分类：静态代码块  vs 非静态代码块</p><h4 id="3-静态代码块"><a href="#3-静态代码块" class="headerlink" title="3 静态代码块"></a>3 静态代码块</h4><p>① 内部可以有输出语句</p><p>② 随着类的加载而执行,而且只执行一次</p><p>③ 作用：初始化类的信息</p><p>④ 如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行</p><p>⑤ 静态代码块的执行要优先于非静态代码块的执行</p><p>⑥ 静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构</p><h4 id="4-非静态代码块"><a href="#4-非静态代码块" class="headerlink" title="4 非静态代码块"></a>4 非静态代码块</h4><p>① 内部可以有输出语句</p><p>② 随着对象的创建而执行</p><p>③ 每创建一个对象，就执行一次非静态代码块</p><p>④ 作用：可以在创建对象时，对对象的属性等进行初始化</p><p>⑤ 如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行</p><p>⑥ 非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法</p><blockquote><p>实例化子类对象时，涉及到父类、子类中静态代码块、非静态代码块、构造器的加载顺序：由父及子，静态先行。</p></blockquote><blockquote><p>①默认初始化</p><p>②显式初始化/⑤在代码块中赋值</p><p>③构造器中初始化</p><p>④有了对象以后，可以通过”对象.属性”或”对象.方法”的方式，进行赋值</p><p>执行的先后顺序：① - ② / ⑤ - ③ - ④</p></blockquote><h3 id="四、关键字final"><a href="#四、关键字final" class="headerlink" title="四、关键字final"></a>四、关键字final</h3><p>final：最终的</p><h4 id="1-可以用来修饰结构"><a href="#1-可以用来修饰结构" class="headerlink" title="1 可以用来修饰结构"></a>1 可以用来修饰结构</h4><p>类、方法、变量</p><h4 id="2-final-用来修饰一个类"><a href="#2-final-用来修饰一个类" class="headerlink" title="2 final 用来修饰一个类"></a>2 final 用来修饰一个类</h4><p>此类不能被其他类所继承。</p><p>比如：String类、System类、StringBuffer类</p><h4 id="3-final-用来修饰方法"><a href="#3-final-用来修饰方法" class="headerlink" title="3 final 用来修饰方法"></a>3 final 用来修饰方法</h4><p>表明此方法不可以被重写</p><p>比如：Object类中getClass();</p><h4 id="4-final-用来修饰变量"><a href="#4-final-用来修饰变量" class="headerlink" title="4 final 用来修饰变量"></a>4 final 用来修饰变量</h4><p>此时的”变量”就称为是一个常量</p><p>1）final修饰属性：可以考虑赋值的位置：显式初始化、代码块中初始化、构造器中初始化</p><p>2）final修饰局部变量：尤其是使用final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。</p><blockquote><p>static final 用来修饰属性：全局常量</p></blockquote><h3 id="五、关键字abstract"><a href="#五、关键字abstract" class="headerlink" title="五、关键字abstract"></a>五、关键字abstract</h3><p>abstract：抽象的</p><h4 id="1-可以用来修饰结构-1"><a href="#1-可以用来修饰结构-1" class="headerlink" title="1 可以用来修饰结构"></a>1 可以用来修饰结构</h4><p>类、方法</p><h4 id="2-abstract修饰类：抽象类"><a href="#2-abstract修饰类：抽象类" class="headerlink" title="2 abstract修饰类：抽象类"></a>2 abstract修饰类：抽象类</h4><p>1）此类<strong>不能实例化</strong></p><p>2）抽象类中<strong>一定有构造器</strong>，便于子类实例化时调用（涉及：子类对象实例化的全过程）</p><p>3）开发中，都会提供抽象类的子类，让子类对象实例化，完成相关的操作 —&gt;抽象的使用前提：继承性</p><h4 id="3-abstract修饰方法：抽象方法"><a href="#3-abstract修饰方法：抽象方法" class="headerlink" title="3 abstract修饰方法：抽象方法"></a>3 abstract修饰方法：抽象方法</h4><p>1）抽象方法只有方法的声明，没方法体</p><p>2）包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法的。</p><p>3）若子类重写了父类中的所的抽象方法后，此子类方可实例化</p><p>​      若子类没重写父类中的所的抽象方法，则此子类也是一个抽象类，需要使用abstract修饰</p><h4 id="4-注意点"><a href="#4-注意点" class="headerlink" title="4 注意点"></a>4 注意点</h4><p>1）abstract不能用来修饰：属性、构造器等结构</p><p>2）abstract不能用来修饰私方法、静态方法、final的方法、final的类</p><h3 id="六、模板方法模式"><a href="#六、模板方法模式" class="headerlink" title="六、模板方法模式"></a>六、模板方法模式</h3><h4 id="1-解决的问题"><a href="#1-解决的问题" class="headerlink" title="1 解决的问题"></a>1 解决的问题</h4><p>在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤已经在父类中写好了。但是某些部分易变，易变<br>部分可以抽象出来，供不同子类实现。这就是一种模板模式。</p><h4 id="2-举例"><a href="#2-举例" class="headerlink" title="2 举例"></a>2 举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Template</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算某段代码执行所需要花费的时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">spendTime</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.code();<span class="comment">//不确定的部分、易变的部分</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"花费的时间为："</span> + (end - start));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubTemplate</span> <span class="keyword">extends</span> <span class="title">Template</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= <span class="number">1000</span>;i++)&#123;</span><br><span class="line"><span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>;j &lt;= Math.sqrt(i);j++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</span><br><span class="line">isFlag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isFlag)&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-应用场景"><a href="#3-应用场景" class="headerlink" title="3 应用场景"></a>3 应用场景</h4><p>模板方法设计模式是编程中经常用得到的模式。各个框架、类库中都有他的影子，比如常见的有：</p><p>1）数据库访问的封装</p><p>2）Junit单元测试</p><p>3）JavaWeb的Servlet中关于doGet/doPost方法调用</p><p>4）Hibernate中模板程序</p><p>5）Spring中JDBCTemlate、Hibernate Template等</p><h3 id="七、关键字interface"><a href="#七、关键字interface" class="headerlink" title="七、关键字interface"></a>七、关键字interface</h3><p>interface：接口</p><h4 id="1-使用说明"><a href="#1-使用说明" class="headerlink" title="1 使用说明"></a>1 使用说明</h4><p>1）接口使用 <code>interface</code> 来定义</p><p>2）Java中，接口和类是<strong>并列</strong>的两个结构</p><p>3）如何定义接口：定义接口中的成员</p><p>​    ① JDK7及以前：只能定义全局常量和抽象方法</p><blockquote><p>全局常量：public static final的.但是书写时，可以省略不写</p><p>抽象方法：public abstract的</p></blockquote><p>​    ② JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法（略）</p><p>4）接口中不能定义构造器的！意味着接口不可以实例化</p><p>5）Java开发中，接口通过让类去实现（implements）的方式来使用</p><p>​    如果实现类覆盖了接口中的所抽象方法，则此实现类就可以实例化</p><p>​    如果实现类没覆盖接口中所的抽象方法，则此实现类仍为一个抽象类</p><p>6）Java类可以实现多个接口   —&gt; 弥补了Java单继承性的局限性</p><p>​    格式：class AA extends BB implements CC,DD,EE</p><p>7）接口与接口之间可以继承，而且可以多继承</p><p>8）接口的具体使用，体现多态性</p><p>9）接口，实际上可以看做是一种规范</p><h4 id="2-举例-1"><a href="#2-举例-1" class="headerlink" title="2 举例"></a>2 举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transferData</span><span class="params">(USB usb)</span></span>&#123;<span class="comment">//USB usb = new Flash();</span></span><br><span class="line">usb.start();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"具体传输数据的细节"</span>);</span><br><span class="line"></span><br><span class="line">usb.stop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">USB</span></span>&#123;</span><br><span class="line"><span class="comment">//常量：定义了长、宽、最大最小的传输速度等</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flash</span> <span class="keyword">implements</span> <span class="title">USB</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"U盘开启工作"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"U盘结束工作"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span> <span class="keyword">implements</span> <span class="title">USB</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"打印机开启工作"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"打印机结束工作"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>体会</strong></p><p>1）接口使用上也满足多态性</p><p>2）接口，实际上就是定义了一种规范</p><p>3）开发中，体会面向接口编程！    </p><h4 id="3-体会面向接口编程的思想"><a href="#3-体会面向接口编程的思想" class="headerlink" title="3 体会面向接口编程的思想"></a>3 体会面向接口编程的思想</h4><p><img src="/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%919-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%C2%B7%E4%B8%8B/../images/%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B.png" alt="image-20200910163721358"></p><p>我们在应用程序中，调用的结构都是JDBC中定义的接口，不会出现具体某一个数据库厂商的API</p><h4 id="4-Java8中关于接口的新规范"><a href="#4-Java8中关于接口的新规范" class="headerlink" title="4 Java8中关于接口的新规范"></a>4 Java8中关于接口的新规范</h4><p>1）接口中定义的静态方法，只能通过接口来调用</p><p>2）通过实现类的对象，可以调用接口中的默认方法</p><p>​    如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法</p><p>3）如果子类（或实现类）继承的父类和实现的接口中声明了同名同参数的默认方法，那么子类在没重写此方法的情况下，默认调用的是父类中的同名同参数的方法。–&gt; <strong>类优先原则</strong></p><p>4）如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，那么在实现类没重写此方法的情况下，报错。–&gt; <strong>接口冲突</strong></p><p>​    这就需要我们必须在实现类中重写此方法</p><p>5）如何在子类（或实现类）的方法中调用父类、接口中被重写的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    method3();<span class="comment">//调用自己定义的重写的方法</span></span><br><span class="line">    <span class="keyword">super</span>.method3();<span class="comment">//调用的是父类中声明的</span></span><br><span class="line">    <span class="comment">//调用接口中的默认方法</span></span><br><span class="line">    CompareA.<span class="keyword">super</span>.method3();</span><br><span class="line">    CompareB.<span class="keyword">super</span>.method3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>面试题</strong></p><p>抽象类和接口的异同？</p><p>相同点：不能实例化；都可以包含抽象方法的</p><p>不同点：</p><p>1）把抽象类和接口（java7，java8，java9）的定义、内部结构解释说明</p><p>2）类：单继承性    接口：多继承      类与接口：多实现</p><h3 id="八、代理模式"><a href="#八、代理模式" class="headerlink" title="八、代理模式"></a>八、代理模式</h3><h4 id="1-解决的问题-1"><a href="#1-解决的问题-1" class="headerlink" title="1 解决的问题"></a>1 解决的问题</h4><p>代理模式是Java开发中使用较多的一种设计模式。代理设计就是为其他对象提供一种代理以控制对这个对象的访问 </p><h4 id="2-举例-2"><a href="#2-举例-2" class="headerlink" title="2 举例"></a>2 举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">NetWork</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">browse</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span> <span class="keyword">implements</span> <span class="title">NetWork</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">browse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"真实的服务器访问网络"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyServer</span> <span class="keyword">implements</span> <span class="title">NetWork</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> NetWork work;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyServer</span><span class="params">(NetWork work)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.work = work;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"联网之前的检查工作"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">browse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">check();</span><br><span class="line"></span><br><span class="line">work.browse();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-应用场景-1"><a href="#3-应用场景-1" class="headerlink" title="3 应用场景"></a>3 应用场景</h4><h5 id="1）应用场景"><a href="#1）应用场景" class="headerlink" title="1）应用场景"></a>1）应用场景</h5><p>安全代理：屏蔽对真实角色的直接访问</p><p>远程代理：通过代理类处理远程方法调用（RMl）</p><p>延迟加载：先加载轻量级的代理对象，真正需要再加载真实对象</p><p>比如你要开发一个大文档查看软件，大文档中有大的图片，有可能一个图片有100MB，在打开文件时，不可能将所有的图片都显示出来，这样就可以使用代理模式，当需要查看图片时，用proxy来进行大图片的打开。</p><h5 id="2）分类"><a href="#2）分类" class="headerlink" title="2）分类"></a>2）分类</h5><p>① 静态代理（静态定义代理类）</p><p>② 动态代理（动态生成代理类）</p><blockquote><p>JDK自带的动态代理，需要反射等知识</p></blockquote><blockquote><p><strong>工厂的设计模式</strong></p><p>① 解决的问题<br>实现了创建者与调用者的分离，即将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的</p><p>② 具体模式<br>简单工厂模式：用来生产同一等级结构中的任意产品。（对于增加新的产品，需要修改已有代码）<br>工厂方法模式：用来生产同一等级结构中的固定产品。（支持增加任意产品)<br>抽象工厂模式：用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族)</p></blockquote><h3 id="九、内部类"><a href="#九、内部类" class="headerlink" title="九、内部类"></a>九、内部类</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h4><p>Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类</p><h4 id="2-内部类的分类"><a href="#2-内部类的分类" class="headerlink" title="2 内部类的分类"></a>2 内部类的分类</h4><p>成员内部类（静态、非静态 ）vs 局部内部类(方法内、代码块内、构造器内)</p><h4 id="3-成员内部类的理解"><a href="#3-成员内部类的理解" class="headerlink" title="3 成员内部类的理解"></a>3 成员内部类的理解</h4><p>一方面，作为外部类的成员：① 调用外部类的结构；②可以被static修饰；③可以被4种不同的权限修饰<br>另一方面，作为一个类：① 类内可以定义属性、方法、构造器等；② 可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承；③ 可以被abstract修饰</p><h4 id="4-成员内部类"><a href="#4-成员内部类" class="headerlink" title="4 成员内部类"></a>4 成员内部类</h4><p>1）如何创建成员内部类的对象？(静态的 &amp; 非静态的)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建静态的Dog内部类的实例(静态的成员内部类):</span></span><br><span class="line">Person.Dog dog = <span class="keyword">new</span> Person.Dog();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建非静态的Bird内部类的实例(非静态的成员内部类):</span></span><br><span class="line"><span class="comment">//Person.Bird bird = new Person.Bird();//错误的</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Person.Bird bird = p.<span class="keyword">new</span> Bird();</span><br></pre></td></tr></table></figure><p>2）如何在成员内部类中调用外部类的结构？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">String name = <span class="string">"小明"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非静态成员内部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span></span>&#123;</span><br><span class="line">String name = <span class="string">"杜鹃"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">System.out.println(name);<span class="comment">//方法的形参</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.name);<span class="comment">//内部类的属性</span></span><br><span class="line">System.out.println(Person.<span class="keyword">this</span>.name);<span class="comment">//外部类的属性</span></span><br><span class="line"><span class="comment">//Person.this.eat();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-局部内部类"><a href="#5-局部内部类" class="headerlink" title="5 局部内部类"></a>5 局部内部类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;返回一个实现了Comparable接口的类的对象</span><br><span class="line">public Comparable getComparable()&#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建一个实现了Comparable接口的类:局部内部类</span><br><span class="line">&#x2F;&#x2F;方式一：</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;class MyComparable implements Comparable&#123;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;@Override</span><br><span class="line">&#x2F;&#x2F;public int compareTo(Object o) &#123;</span><br><span class="line">&#x2F;&#x2F;return 0;</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br><span class="line">&#x2F;&#x2F;return new MyComparable();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式二：</span><br><span class="line">return new Comparable()&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int compareTo(Object o) &#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-注意点"><a href="#6-注意点" class="headerlink" title="6 注意点"></a>6 注意点</h4><p>在局部内部类的<strong>方法</strong>中如果调用局部内部类所声明的<strong>方法</strong>中的<strong>局部变量</strong>的话，要求此局部变量声明为final的</p><blockquote><p>jdk 7及之前版本：要求此局部变量显式的声明为final的<br>jdk 8及之后的版本：可以省略final的声明</p></blockquote><p><strong>总结：</strong></p><p>成员内部类和局部内部类，在编译以后，都会生成字节码文件。</p><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">成员内部类：外部类$内部类名<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">局部内部类：外部类$数字 内部类名.<span class="title">class</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面向对象学习的三条主线：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Java类及类的成员：属性、方法、构造器；&lt;strong&gt;代码块&lt;/strong&gt;、&lt;strong&gt;内部类&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;面向对象的三大特征：封装性、继承性、多态性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其它关键字：this、super、&lt;strong&gt;static&lt;/strong&gt;、&lt;strong&gt;final&lt;/strong&gt;、abstract、&lt;strong&gt;interface&lt;/strong&gt;、package、import等&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/categories/Java/"/>
    
      <category term="Java基础" scheme="https://ActionDing.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/tags/Java/"/>
    
      <category term="编程" scheme="https://ActionDing.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【Java基础】8-面向对象·中</title>
    <link href="https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%918-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%C2%B7%E4%B8%AD/"/>
    <id>https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%918-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%C2%B7%E4%B8%AD/</id>
    <published>2020-07-04T19:02:08.000Z</published>
    <updated>2020-09-12T09:40:58.399Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象学习的三条主线：</p><ol><li><p>Java类及类的成员：属性、方法、构造器；代码块、内部类</p></li><li><p>面向对象的三大特征：封装性、<strong>继承性</strong>、<strong>多态性</strong></p></li><li><p>其它关键字：this、<strong>super</strong>、static、final、abstract、interface、package、import等</p></li></ol><a id="more"></a><h3 id="一、OOP特征之继承性"><a href="#一、OOP特征之继承性" class="headerlink" title="一、OOP特征之继承性"></a>一、OOP特征之继承性</h3><h4 id="1-为什么要有类的继承性（继承性的好处）"><a href="#1-为什么要有类的继承性（继承性的好处）" class="headerlink" title="1 为什么要有类的继承性（继承性的好处）"></a>1 为什么要有类的继承性（继承性的好处）</h4><p>① 减少了代码的冗余，提高了代码的复用性</p><p>② 便于功能的扩展</p><p>③ 为之后多态性的使用，提供了前提</p><h4 id="2-继承性的格式"><a href="#2-继承性的格式" class="headerlink" title="2 继承性的格式"></a>2 继承性的格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A:子类、派生类、subclass</span></span><br><span class="line"><span class="comment">// B:父类、超类、基类、superclass</span></span><br><span class="line"><span class="comment">// extends：延展、扩展</span></span><br></pre></td></tr></table></figure><h4 id="3-子类继承父类以后有哪些不同？"><a href="#3-子类继承父类以后有哪些不同？" class="headerlink" title="3 子类继承父类以后有哪些不同？"></a>3 子类继承父类以后有哪些不同？</h4><p>① 体现：一旦子类A继承父类B以后，子类A中就获取了父类B中声明的所有的属性和方法</p><p>② 特别的，父类中声明为private的属性或方法，子类继承父类以后，仍然认为获取了父类中私有的结构。只因为封装性的影响，使得子类不能直接调用父类的结构而已</p><p>③ 子类继承父类以后，还可以声明自己特有的属性或方法：实现功能的拓展。子类和父类的关系，不同于子集和集合的关系。（extends：延展、扩展）</p><h4 id="4-Java中继承性的说明"><a href="#4-Java中继承性的说明" class="headerlink" title="4 Java中继承性的说明"></a>4 Java中继承性的说明</h4><p>① 一个类可以被多个子类继承。<br>② Java中类的单继承性：一个类只能有一个父类<br>③ 子父类是相对的概念。<br>④ 子类直接继承的父类，称为：直接父类；间接继承的父类称为：间接父类<br>⑤ 子类继承父类以后，就获取了直接父类以及所间接父类中声明的属性和方法</p><h4 id="5-java-lang-Object类的理解"><a href="#5-java-lang-Object类的理解" class="headerlink" title="5 java.lang.Object类的理解"></a>5 java.lang.Object类的理解</h4><p>① 如果我们没显式的声明一个类的父类的话，则此类继承于java.lang.Object类</p><p>② 所有的java类（除java.lang.Object类之外）都直接或间接的继承于java.lang.Object类</p><p>③ 意味着，所有的java类具有java.lang.Object类声明的功能。</p><h3 id="二、方法的重写"><a href="#二、方法的重写" class="headerlink" title="二、方法的重写"></a>二、方法的重写</h3><h4 id="1-什么是方法的重写-override-或-overwrite"><a href="#1-什么是方法的重写-override-或-overwrite" class="headerlink" title="1 什么是方法的重写(override 或 overwrite)"></a>1 什么是方法的重写(override 或 overwrite)</h4><p>子类继承父类以后，可以对父类中同名同参数的方法，进行覆盖操作</p><h4 id="2-应用"><a href="#2-应用" class="headerlink" title="2 应用"></a>2 应用</h4><p>重写以后，当创建子类对象以后，通过子类对象调用子父类中的同名同参数的方法时，实际执行的是子类重写父类的方法</p><h4 id="3-重写的规则"><a href="#3-重写的规则" class="headerlink" title="3 重写的规则"></a>3 重写的规则</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方法的声明： 权限修饰符  返回值类型  方法名(形参列表) <span class="keyword">throws</span> 异常的类型&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法体</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>约定俗称：子类中的叫重写的方法，父类中的叫被重写的方法</p><p>① 子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表<strong>相同</strong></p><p>② 子类重写的方法的权限修饰符<strong>不小于</strong>父类被重写的方法的权限修饰符</p><blockquote><p>特殊情况：子类不能重写父类中声明为private权限的方法</p></blockquote><p>③ 返回值类型</p><blockquote><p>父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void</p><p>父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类</p><p>父类被重写的方法的返回值类型是基本数据类型(比如：double)，则子类重写的方法的返回值类型必须是相同的基本数据类型(必须也是double)</p></blockquote><p>④ 子类重写的方法抛出的异常类型<strong>不大于</strong>父类被重写的方法抛出的异常类型（具体放到异常处理时候讲）</p><p>⑤ 子类和父类中的同名同参数的方法要么都声明为非static的（考虑重写），要么都声明为static的（不是重写)。</p><p><strong>面试题</strong></p><p>区分方法的重写和重载？</p><p>答：① 二者的概念；② 重载和重写的具体规则；③ 重载：不表现为多态性；重写：表现为多态性。</p><p><strong>重载</strong>，是指允许存在多个同名方法，而这些方法的参数不同。编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法。它们的调用地址在编译期就绑定了。Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。所以，对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为“早绑定”或“静态绑定”；而对于<strong>多态</strong>，只等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为“晚绑定”或“动态绑定”。 引用一句Bruce Eckel的话：“不要犯傻，如果它不是晚绑定，它就不是多态。”</p><h3 id="三、关键字super"><a href="#三、关键字super" class="headerlink" title="三、关键字super"></a>三、关键字super</h3><p>super 关键字可以理解为：父类的</p><h4 id="1-可以用来调用的结构"><a href="#1-可以用来调用的结构" class="headerlink" title="1 可以用来调用的结构"></a>1 可以用来调用的结构</h4><p>属性、方法、构造器</p><h4 id="2-super调用属性、方法"><a href="#2-super调用属性、方法" class="headerlink" title="2 super调用属性、方法"></a>2 super调用属性、方法</h4><p>① 我们可以在子类的方法或构造器中。通过使用”super.属性”或”super.方法”的方式，显式的调用父类中声明的属性或方法。但是，通常情况下，我们习惯省略”super.”</p><p>② 特殊情况：当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的使用”super.属性”的方式，表明调用的是父类中声明的属性</p><p>③ 特殊情况：当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用”super.方法”的方式，表明调用的是父类中被重写的方法</p><h4 id="3-super调用构造器"><a href="#3-super调用构造器" class="headerlink" title="3 super调用构造器"></a>3 super调用构造器</h4><p>① 我们可以在子类的构造器中显式的使用”super(形参列表)”的方式，调用父类中声明的指定的构造器</p><p>② “super(形参列表)”的使用，必须声明在子类构造器的首行！</p><p>③ 我们在类的构造器中，针对于”this(形参列表)”或”super(形参列表)”只能二选一，不能同时出现</p><p>④ 在构造器的首行，没显式的声明”this(形参列表)”或”super(形参列表)”，则默认调用的是父类中空参的构造器：super()</p><p>⑤ 在类的多个构造器中，至少一个类的构造器中使用了”super(形参列表)”，调用父类中的构造器</p><h4 id="4-子类对象实例化全过程"><a href="#4-子类对象实例化全过程" class="headerlink" title="4 子类对象实例化全过程"></a>4 子类对象实例化全过程</h4><p>1）从结果上看：继承性</p><p>子类继承父类以后，就获取了父类中声明的属性或方法。创建子类的对象，在堆空间中，就会加载所父类中声明的属性<br>2）从过程上看</p><p>当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，……，直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所的父类的结构，所以才可以看到内存中父类中的结构，子类对象才可以考虑进行调用</p><blockquote><p>强调说明：虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象。</p></blockquote><h3 id="四、OOP特征之多态性"><a href="#四、OOP特征之多态性" class="headerlink" title="四、OOP特征之多态性"></a>四、OOP特征之多态性</h3><p>多态性可以理解为一个事物的多种形态</p><h4 id="1何为多态性"><a href="#1何为多态性" class="headerlink" title="1何为多态性"></a>1何为多态性</h4><p>对象的多态性：<strong>父类的引用指向子类的对象</strong>（或子类的对象赋给父类的引用）</p><h4 id="2-多态性的使用：虚拟方法调用"><a href="#2-多态性的使用：虚拟方法调用" class="headerlink" title="2 多态性的使用：虚拟方法调用"></a>2 多态性的使用：虚拟方法调用</h4><p>有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。</p><blockquote><p>总结：编译，看左边；运行，看右边</p><p>注意点：对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边）</p><p>多态是编译时行为还是运行时行为？答：运行时行为</p></blockquote><h4 id="3-多态性的使用前提"><a href="#3-多态性的使用前提" class="headerlink" title="3 多态性的使用前提"></a>3 多态性的使用前提</h4><p>① 类的继承关系  </p><p>② 方法的重写</p><h4 id="4-关于向上转型与向下转型"><a href="#4-关于向上转型与向下转型" class="headerlink" title="4 关于向上转型与向下转型"></a>4 关于向上转型与向下转型</h4><p>1）向上转型：多态</p><p>2）向下转型</p><p>① 为什么使用向下转型？</p><p>有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。如何才能调用子类特的属性和方法？使用向下转型</p><p>② 如何实现向下转型？</p><p>使用强制类型转换符：()</p><blockquote><p>使用时的注意点：<br>① 使用强转时，可能出现ClassCastException的异常。<br>② 为了避免在向下转型时出现ClassCastException的异常，我们在向下转型之前，先进行instanceof的判断，一旦返回true，就进行向下转型。如果返回false，不进行向下转型。</p></blockquote><h4 id="5-instanceof-的使用"><a href="#5-instanceof-的使用" class="headerlink" title="5 instanceof 的使用"></a>5 instanceof 的使用</h4><p>① a instanceof A：判断对象a是否是类A的实例。如果是，返回true；如果不是，返回false</p><p>② 如果 a instanceof A返回true，则 a instanceof B也返回true。其中，类B是类A的父类</p><p>③ 要求a所属的类与类A必须是子类和父类的关系，否则编译错误</p><p><strong>面试题</strong></p><p>谈谈你对多态性的理解？</p><p>① 实现代码的通用性</p><p>② Object类中定义的public boolean equals(Object obj){  }<br>        JDBC:使用java程序操作(获取数据库连接、CRUD)数据库(MySQL、Oracle、DB2、SQL Server)</p><p>③ 抽象类、接口的使用肯定体现了多态性。（抽象类、接口不能实例化）</p><h3 id="五、Object类的使用"><a href="#五、Object类的使用" class="headerlink" title="五、Object类的使用"></a>五、Object类的使用</h3><h4 id="1-java-lang-Object类的说明"><a href="#1-java-lang-Object类的说明" class="headerlink" title="1 java.lang.Object类的说明"></a>1 java.lang.Object类的说明</h4><p>1）Object类是所Java类的根父类</p><p>2）如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类 </p><p>3）Object类中的功能(属性、方法)就具通用性。</p><p>① 属性：无</p><p>② 方法：equals() / toString() / getClass() /hashCode() / clone() / finalize()；wait() 、 notify()、notifyAll()</p><p>4）Object类只声明了一个空参的构造器</p><h4 id="2-equals-方法"><a href="#2-equals-方法" class="headerlink" title="2 equals()方法"></a>2 equals()方法</h4><h5 id="1）equals-的使用"><a href="#1）equals-的使用" class="headerlink" title="1）equals()的使用"></a>1）equals()的使用</h5><p>① equals()是一个方法，而非运算符</p><p>② 只能适用于引用数据类型</p><p>③ Object类中equals()的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：Object类中定义的equals()和==的作用是相同的：比较两个对象的地址值是否相同。即两个引用是否指向同一个对象实体</p><p>④ 像String、Date、File、包装类等都重写了Object类中的equals()方法。重写以后，比较的不是两个引用的地址是否相同，而是比较两个对象的”实体内容”是否相同</p><p>⑤ 通常情况下，我们自定义的类如果使用equals()的话，也通常是比较两个对象的”实体内容”是否相同。那么，我们就需要对Object类中的equals()进行重写</p><blockquote><p>重写的原则：比较两个对象的实体内容是否相同</p></blockquote><h5 id="2）如何重写equals"><a href="#2）如何重写equals" class="headerlink" title="2）如何重写equals()"></a>2）如何重写equals()</h5><p>开发中如何实现：自动生成的</p><blockquote><p>回顾 == 运算符的使用：</p><ol><li><p>可以使用在基本数据类型变量和引用数据类型变量中</p></li><li><p>如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等。（不一定类型要相同）</p><p>如果比较的是引用数据类型变量：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体</p></li></ol><p>补充： == 符号使用时，必须保证符号左右两边的变量类型一致。</p></blockquote><h4 id="3-toString-方法"><a href="#3-toString-方法" class="headerlink" title="3 toString()方法"></a>3 toString()方法</h4><h5 id="1）toString-的使用"><a href="#1）toString-的使用" class="headerlink" title="1）toString()的使用"></a>1）toString()的使用</h5><p>① 当我们输出一个对象的引用时，实际上就是调用当前对象的toString()</p><p>② Object类中toString()的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③ 像String、Date、File、包装类等都重写了Object类中的toString()方法</p><p>​     使得在调用对象的toString()时，返回”实体内容”信息</p><p>④ 自定义类也可以重写toString()方法，当调用此方法时，返回对象的”实体内容”</p><h5 id="2）如何重写toString"><a href="#2）如何重写toString" class="headerlink" title="2）如何重写toString()"></a>2）如何重写toString()</h5><p>开发中如何实现：自动生成的</p><p><strong>面试题</strong></p><p>① final、finally、finalize的区别？</p><p>②  == 和 equals() 区别</p><h3 id="六、Java中的JUnit单元测试"><a href="#六、Java中的JUnit单元测试" class="headerlink" title="六、Java中的JUnit单元测试"></a>六、Java中的JUnit单元测试</h3><h4 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1 步骤"></a>1 步骤</h4><p>1）在中当前工程 - 右键择：build path - add libraries - JUnit 4 - 下一步</p><p>2）创建Java类，进行单元测试。</p><p>​      此时的Java类要求：① 此类是public的  ②此类提供公共的无参的构造器</p><p>3）此类中声明单元测试方法</p><p>​      此时的单元测试方法：方法的权限是public,没返回值，没形参</p><p>4）此单元测试方法上需要声明注解：@Test,并在单元测试类中导入：import org.junit.Test;</p><p>5）声明好单元测试方法以后，就可以在方法体内测试相关的代码。</p><p>6）写完代码以后，左键双击单元测试方法名，右键：run as - JUnit Test</p><h5 id="2-说明"><a href="#2-说明" class="headerlink" title="2 说明"></a>2 说明</h5><p>1）如果执行结果没任何异常：绿条</p><p>2）如果执行结果出现异常：红条</p><h3 id="七、包装类的使用"><a href="#七、包装类的使用" class="headerlink" title="七、包装类的使用"></a>七、包装类的使用</h3><h4 id="1-为什么要有包装类-或封装类）"><a href="#1-为什么要有包装类-或封装类）" class="headerlink" title="1 为什么要有包装类(或封装类）"></a>1 为什么要有包装类(或封装类）</h4><p>为了使基本数据类型的变量具有类的特征，引入包装类。</p><h4 id="2-基本数据类型与对应的包装类"><a href="#2-基本数据类型与对应的包装类" class="headerlink" title="2 基本数据类型与对应的包装类"></a>2 基本数据类型与对应的包装类</h4><p><img src="/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%918-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%C2%B7%E4%B8%AD/../images/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8C%85%E8%A3%85%E7%B1%BB.png" alt="基本数据类型与对应的包装类"></p><h4 id="3-需要掌握的类型间的转换：（基本数据类型、包装类、String）"><a href="#3-需要掌握的类型间的转换：（基本数据类型、包装类、String）" class="headerlink" title="3 需要掌握的类型间的转换：（基本数据类型、包装类、String）"></a>3 需要掌握的类型间的转换：（基本数据类型、包装类、String）</h4><p><img src="/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%918-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%C2%B7%E4%B8%AD/../images/%E7%B1%BB%E5%9E%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2.png" alt="类型间的转换"></p><p>简易版：</p><p>基本数据类型&lt;—&gt;包装类：JDK 5.0 新特性：自动装箱 与 自动拆箱</p><p>基本数据类型、包装类—&gt;String:调用String重载的valueOf(Xxx xxx)</p><p>String—&gt;基本数据类型、包装类:调用包装类的parseXxx(String s)</p><p><strong>注意</strong>：转换时，可能会报NumberFormatException</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面向对象学习的三条主线：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Java类及类的成员：属性、方法、构造器；代码块、内部类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;面向对象的三大特征：封装性、&lt;strong&gt;继承性&lt;/strong&gt;、&lt;strong&gt;多态性&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其它关键字：this、&lt;strong&gt;super&lt;/strong&gt;、static、final、abstract、interface、package、import等&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/categories/Java/"/>
    
      <category term="Java基础" scheme="https://ActionDing.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/tags/Java/"/>
    
      <category term="编程" scheme="https://ActionDing.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【Java基础】7-面向对象·上</title>
    <link href="https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%917-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%C2%B7%E4%B8%8A/"/>
    <id>https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%917-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%C2%B7%E4%B8%8A/</id>
    <published>2020-07-04T19:02:07.000Z</published>
    <updated>2020-09-12T09:40:54.338Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象学习的三条主线：</p><ol><li><p>Java类及类的成员：<strong>属性</strong>、<strong>方法</strong>、<strong>构造器</strong>；代码块、内部类</p></li><li><p>面向对象的三大特征：<strong>封装性</strong>、继承性、多态性</p></li><li><p>其它关键字：<strong>this</strong>、super、static、final、abstract、interface、<strong>package</strong>、<strong>import</strong>等</p></li></ol><a id="more"></a><h3 id="一、类和对象"><a href="#一、类和对象" class="headerlink" title="一、类和对象"></a>一、类和对象</h3><h4 id="1-面向对象与面向过程"><a href="#1-面向对象与面向过程" class="headerlink" title="1 面向对象与面向过程"></a>1 面向对象与面向过程</h4><p>1）面向过程：强调的是<strong>功能行为</strong>，以函数为最小单位，考虑<strong>怎么做</strong></p><p>2）面向对象：强调具备了功能的<strong>对象</strong>，以类/对象为最小单位，考虑<strong>谁来做</strong></p><p>举例对比：<strong>人</strong>把<strong>大象</strong>装进<strong>冰箱</strong>。</p><blockquote><p>面向对象：Object Oriented Programming<br>面向过程：Procedure Oriented Programming</p></blockquote><h4 id="2-面向对象中两个重要的概念"><a href="#2-面向对象中两个重要的概念" class="headerlink" title="2 面向对象中两个重要的概念"></a>2 面向对象中两个重要的概念</h4><p>1）类（Class）：对一类事物的描述，是抽象的、概念上的定义</p><p>2）对象（Object）：是实际存在的该类事物的每个个体，因而也称为实例（instance）</p><p><strong>二者的关系</strong>：对象，是由类new出来的，派生出来的。</p><p><strong>“万事万物皆对象”</strong></p><blockquote><p>面向对象程序设计的重点是类的设计</p><p>设计类，就是设计类的成员</p><p>创建类的对象 = 类的实例化 = 实例化类</p><p>匿名对象：我们创建的对象，没显式的赋给一个变量名。即为匿名对象</p><p>特点：匿名对象只能调用一次</p></blockquote><h4 id="3-面向对象的三大特征"><a href="#3-面向对象的三大特征" class="headerlink" title="3 面向对象的三大特征"></a>3 面向对象的三大特征</h4><p>1）封装（Encapsulation）</p><p>2）继承（Inheritance）</p><p>3）多态（Polymorphism）</p><h3 id="二、类的成员"><a href="#二、类的成员" class="headerlink" title="二、类的成员"></a>二、类的成员</h3><h4 id="1-类的属性"><a href="#1-类的属性" class="headerlink" title="1 类的属性"></a>1 类的属性</h4><p><strong>属性</strong>：对应类中的<strong>成员变量</strong></p><blockquote><p>属性 = 成员变量 = field = 域、字段</p></blockquote><p><strong>属性与局部变量的对比</strong></p><p>1）相同点</p><ul><li>定义变量的<strong>格式</strong>：数据类型  变量名 = 变量值</li><li>先声明，后使用</li><li>变量都其对应的作用域 </li></ul><p>2）不同点</p><p>① 在类中声明的位置的不同</p><ul><li>属性：直接定义在类的一对{}内</li><li>局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量</li></ul><p>② 关于权限修饰符的不同</p><ul><li>属性：可以在声明属性时，指明其权限，使用权限修饰符。<ul><li>常用的权限修饰符：private、public、缺省、protected  —&gt;封装性</li></ul></li><li>局部变量：不可以使用权限修饰符。</li></ul><p>③ 默认初始化值的情况：</p><ul><li>属性：类的属性，根据其类型，都默认初始化值。<ul><li>整型（byte、short、int、long：0）</li><li>浮点型（float、double：0.0）</li><li>字符型（char：0  （或’\u0000’））</li><li>布尔型（boolean：false）</li><li>引用数据类型（类、数组、接口：null）</li></ul></li><li>局部变量：没默认初始化值。<ul><li>意味着，我们在调用局部变量之前，一定要显式赋值。</li><li>特别地：形参在调用时，我们赋值即可。</li></ul></li></ul><p>④ 在内存中加载的位置：</p><ul><li>属性：加载到<strong>堆</strong>空间中   （非static）</li><li>局部变量：加载到<strong>栈</strong>空间</li></ul><h4 id="2-类的方法"><a href="#2-类的方法" class="headerlink" title="2 类的方法"></a>2 类的方法</h4><p><strong>方法</strong>：描述类应该具的功能。</p><blockquote><p>方法 = 成员方法 = 函数 = method</p></blockquote><p><strong>方法的声明</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">权限修饰符 返回值类型 方法名(形参列表)&#123;</span><br><span class="line">方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1）<strong>权限修饰符</strong></p><p>默认方法的权限修饰符先都使用public</p><p>Java规定的4种权限修饰符：private、public、缺省、protected  –&gt;封装性再细说</p><p>2）<strong>返回值类型</strong></p><p>返回值  vs 没返回值</p><p>① 如果方法返回值，则必须在方法声明时，指定返回值的类型。同时，方法中，需要使用</p><p>return关键字来返回指定类型的变量或常量：“return 数据”。</p><p>② 如果方法没返回值，则方法声明时，使用void来表示。通常，没返回值的方法中，就不需要</p><p>使用return.但是，如果使用的话，只能“return;”表示结束此方法的意思。</p><p>3）<strong>方法名</strong></p><p>属于标识符，遵循标识符的规则和规范，“见名知意”</p><p>4） <strong>形参列表</strong></p><p>方法可以声明0个，1个，或多个形参。</p><p><strong>格式</strong>：数据类型1 形参1,数据类型2 形参2,…</p><p>5）<strong>方法体</strong></p><p>方法功能的体现。     </p><blockquote><p>return关键字</p><p>使用范围：使用在方法体中</p><p>作用：</p><p>① 结束方法</p><p>② 针对于返回值类型的方法，使用”return 数据”方法返回所要的数据。</p><p><strong>注意点</strong>：return关键字后面不可以声明执行语句。</p></blockquote><h4 id="3-方法的重载"><a href="#3-方法的重载" class="headerlink" title="3 方法的重载"></a>3 方法的重载</h4><p>定义：在同一个类中，允许存在一个以上的<strong>同名方法</strong>，只要它们的参数个数或者参数类型不同即可。</p><p><strong>“两同一不同”</strong></p><p>1）同一个类、相同方法名</p><p>2）参数列表不同：参数个数不同，参数类型不同</p><blockquote><p>严格按照定义判断：两同一不同。</p><p>跟方法的权限修饰符、返回值类型、形参变量名、方法体都没关系！</p></blockquote><p><strong>可变个数形参的方法</strong></p><p>1）可变个数形参的格式：数据类型 … 变量名</p><p>2）当调用可变个数形参的方法时，传入的参数个数可以是：0个，1个,2个，。。。</p><p>3）可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载</p><p>4）可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载。换句话说，二者不能共存。</p><p>5）可变个数形参在方法的形参中，必须声明在末尾</p><p>6）可变个数形参在方法的形参中,最多只能声明一个可变形参。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show(String)"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String ... strs)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show(String ... strs)"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; strs.length;i++)&#123;</span><br><span class="line">System.out.println(strs[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不能与上一个方法同时存在</span></span><br><span class="line"><span class="comment">//public void show(String[] strs)&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-java的值传递机制"><a href="#4-java的值传递机制" class="headerlink" title="4 java的值传递机制"></a>4 java的值传递机制</h4><p>1）值传递规则</p><p>如果变量是<strong>基本数据类型</strong>，此时赋值的是变量所保存的<strong>数据值</strong></p><p>如果变量是<strong>引用数据类型</strong>，此时赋值的是变量所保存的<strong>数据的地址值</strong></p><p>2）形参和实参</p><p>形参：方法定义时，声明的小括号内的参数</p><p>实参：方法调用时，实际传递给形参的数据</p><p>3）java中参数传递机制：值传递</p><p><strong>规则</strong></p><p>如果参数是基本数据类型，此时实参赋给形参的是实参真实存储的数据值</p><p>如果参数是引用数据类型，此时实参赋给形参的是实参存储数据的地址值</p><h4 id="5-递归方法"><a href="#5-递归方法" class="headerlink" title="5 递归方法"></a>5 递归方法</h4><p>定义：一个方法体内调用它自身</p><p>理解</p><p>方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。</p><p>递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例1：计算1-n之间所自然数的和</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n + getSum(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例2：计算1-n之间所自然数的乘积:n!</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n * getSum1(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例3：已知一个数列：f(0) = 1,f(1) = 4,f(n+2)=2*f(n+1) + f(n),</span></span><br><span class="line"><span class="comment">//其中n是大于0的整数，求f(10)的值。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//return f(n + 2) - 2 * f(n + 1);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>*f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例4：斐波那契数列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例5：汉诺塔问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例6：快排</span></span><br></pre></td></tr></table></figure><h4 id="6-类的构造器"><a href="#6-类的构造器" class="headerlink" title="6 类的构造器"></a>6 类的构造器</h4><p>1）构造器（或构造方法，Constructor）的作用：</p><p>① 创建对象</p><p>② 初始化对象的信息</p><p>2）使用说明</p><p>① 如果没显式的定义类的构造器的话，则系统默认提供一个空参的构造器</p><p>② 定义构造器的格式：<code>权限修饰符  类名(形参列表){}</code></p><p>③ 一个类中定义的多个构造器，彼此构成重载</p><p>④ 一旦我们显式的定义了类的构造器之后，系统就不再提供默认的空参构造器</p><p>⑤ 一个类中，至少会有一个构造器。</p><blockquote><p>总结：属性赋值的先后顺序</p><p>① 默认初始化</p><p>② 显式初始化</p><p>③ 构造器中初始化</p><p>④ 通过”对象.方法” 或 “对象.属性”的方式，赋值</p><p>以上操作的先后顺序：① - ② - ③ - ④  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">所谓JavaBean，是指符合如下标准的Java类：</span><br><span class="line">&gt;类是公共的</span><br><span class="line">&gt;一个无参的公共的构造器</span><br><span class="line">&gt;属性，且对应的get、set方法</span><br></pre></td></tr></table></figure><h4 id="7-关键字this"><a href="#7-关键字this" class="headerlink" title="7 关键字this"></a>7 关键字this</h4><p>1）可以调用的结构：属性、方法；构造器</p><p>2）this 调用属性、方法：</p><p>this 理解为：当前对象  或 当前正在创建的对象</p><p>① 在类的方法中，我们可以使用<code>this.属性</code>或<code>this.方法</code>的方式，调用当前对象属性或方法。但是，通常情况下，我们都择省略<code>this.</code>。特殊情况下，如果方法的形参和类的属性同名时，我们必须显式的使用<code>this.变量</code>的方式，表明此变量是属性，而非形参。</p><p>② 在类的构造器中，我们可以使用<code>this.属性</code>或<code>this.方法</code>的方式，调用当前正在创建的对象属性或方法。但是，通常情况下，我们都择省略<code>this.</code>。特殊情况下，如果构造器的形参和类的属性<strong>同名</strong>时，我们必须显式的使用<code>this.变量</code>的方式，表明此变量是属性，而非形参。</p><p>3）this调用构造器：</p><p>① 我们在类的构造器中，可以显式的使用”this(形参列表)”方式，调用本类中指定的其他构造器</p><p>② 构造器中不能通过<code>this(形参列表)</code>方式调用自己</p><p>③ 如果一个类中有n个构造器，则最多有 n - 1构造器中使用了<code>this(形参列表)</code></p><p>④ 规定：<code>this(形参列表)</code>必须声明在当前构造器的<strong>首行</strong></p><p>⑤ 构造器内部，<strong>最多只能声明一个</strong><code>this(形参列表)</code>，用来调用其他的构造器</p><h4 id="8-关键字package"><a href="#8-关键字package" class="headerlink" title="8 关键字package"></a>8 关键字package</h4><h5 id="1）使用说明"><a href="#1）使用说明" class="headerlink" title="1）使用说明"></a>1）使用说明</h5><p>① 为了更好的实现项目中类的管理，提供包的概念</p><p>② 使用package声明类或接口所属的包，声明在源文件的首行</p><p>③ 包，属于标识符，遵循标识符的命名规则、规范(xxxyyyzzz)、“见名知意”</p><p>④ 每”.”一次，就代表一层文件目录。</p><h5 id="2）举例：MVC设计模式"><a href="#2）举例：MVC设计模式" class="headerlink" title="2）举例：MVC设计模式"></a>2）举例：MVC设计模式</h5><p><img src="/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%917-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%C2%B7%E4%B8%8A/../images%5CMVC%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.png" alt="MVC设计模式"></p><h5 id="3）JDK中的主要包介绍"><a href="#3）JDK中的主要包介绍" class="headerlink" title="3）JDK中的主要包介绍"></a>3）JDK中的主要包介绍</h5><p><img src="/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%917-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%C2%B7%E4%B8%8A/images%5CJDK%E4%B8%AD%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%85.png" alt="JDK中的主要包"></p><h4 id="9-关键字import"><a href="#9-关键字import" class="headerlink" title="9 关键字import"></a>9 关键字import</h4><h5 id="1）使用说明-1"><a href="#1）使用说明-1" class="headerlink" title="1）使用说明"></a>1）使用说明</h5><p>① 在源文件中显式的使用import结构导入指定包下的类、接口</p><p>② 声明在包的声明和类的声明之间</p><p>③ 如果需要导入多个结构，则并列写出即可</p><p>④ 可以使用”xxx.*”的方式，表示可以导入xxx包下的所结构</p><p>⑤ 如果使用的类或接口是java.lang包下定义的，则可以省略import结构</p><p>⑥ 如果使用的类或接口是本包下定义的，则可以省略import结构</p><p>⑦ 如果在源文件中，使用了不同包下的同名的类，则必须至少一个类需要以全类名的方式显示。</p><p>⑧ 使用”xxx.*”方式表明可以调用xxx包下的所有结构。但是如果使用的是xxx子包下的结构，则仍需要显式导入</p><p>⑨ <code>import static</code>：导入指定类或接口中的静态结构（属性或方法） </p><h3 id="三、OOP特征之封装性"><a href="#三、OOP特征之封装性" class="headerlink" title="三、OOP特征之封装性"></a>三、OOP特征之封装性</h3><h4 id="1-为什么要引入封装性？"><a href="#1-为什么要引入封装性？" class="headerlink" title="1 为什么要引入封装性？"></a>1 为什么要引入封装性？</h4><p>① 我们程序设计追求<strong>“高内聚，低耦合”</strong>。</p><p>高内聚 ：类的内部数据操作细节自己完成，不允许外部干涉；</p><p>低耦合 ：仅对外暴露少量的方法用于使用。</p><p>② 隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。</p><h4 id="2-封装性思想具体的代码体现"><a href="#2-封装性思想具体的代码体现" class="headerlink" title="2 封装性思想具体的代码体现"></a>2 封装性思想具体的代码体现</h4><p>体现一：将类的属性xxx私化(private),同时，提供公共的(public)方法来获取(getXxx)和设置(setXxx)此属性的值</p><p>体现二：不对外暴露的私有的方法</p><p>体现三：单例模式（将构造器私有化）</p><p>体现四：如果不希望类在包外被调用，可以将类设置为缺省的。</p><h4 id="3）Java规定的四种权限修饰符"><a href="#3）Java规定的四种权限修饰符" class="headerlink" title="3）Java规定的四种权限修饰符"></a>3）Java规定的四种权限修饰符</h4><p>① 权限从小到大顺序为：private &lt;  缺省 &lt; protected &lt; public</p><p>② 具体的修饰范围：</p><table><thead><tr><th align="center">修饰符</th><th align="center">内部类</th><th align="center">同一个包</th><th align="center">不同包的子类</th><th align="center">同一个工程</th></tr></thead><tbody><tr><td align="center">private</td><td align="center">Yes</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">（缺省）</td><td align="center">Yes</td><td align="center">Yes</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">protected</td><td align="center">Yes</td><td align="center">Yes</td><td align="center">Yes</td><td align="center"></td></tr><tr><td align="center">public</td><td align="center">Yes</td><td align="center">Yes</td><td align="center">Yes</td><td align="center">Yes</td></tr></tbody></table><p>③ 权限修饰符可用来修饰的结构</p><p>4种权限都可以用来修饰类的内部结构：属性、方法、构造器、内部类</p><p>修饰类的话，只能使用：缺省、public</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面向对象学习的三条主线：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Java类及类的成员：&lt;strong&gt;属性&lt;/strong&gt;、&lt;strong&gt;方法&lt;/strong&gt;、&lt;strong&gt;构造器&lt;/strong&gt;；代码块、内部类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;面向对象的三大特征：&lt;strong&gt;封装性&lt;/strong&gt;、继承性、多态性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其它关键字：&lt;strong&gt;this&lt;/strong&gt;、super、static、final、abstract、interface、&lt;strong&gt;package&lt;/strong&gt;、&lt;strong&gt;import&lt;/strong&gt;等&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/categories/Java/"/>
    
      <category term="Java基础" scheme="https://ActionDing.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/tags/Java/"/>
    
      <category term="编程" scheme="https://ActionDing.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【Java基础】6-数组</title>
    <link href="https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%916-%E6%95%B0%E7%BB%84/"/>
    <id>https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%916-%E6%95%B0%E7%BB%84/</id>
    <published>2020-07-04T19:02:06.000Z</published>
    <updated>2020-08-15T03:02:15.461Z</updated>
    
    <content type="html"><![CDATA[<p>数组、一维数组、二维数组</p><a id="more"></a><h3 id="一、数组的概念"><a href="#一、数组的概念" class="headerlink" title="一、数组的概念"></a>一、数组的概念</h3><h4 id="1-数组的理解"><a href="#1-数组的理解" class="headerlink" title="1 数组的理解"></a>1 数组的理解</h4><p>数组 (<strong>Array</strong>) 是多个相同类型数据按一定顺序排列的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。</p><h4 id="2-相关的概念"><a href="#2-相关的概念" class="headerlink" title="2 相关的概念"></a>2 相关的概念</h4><p>1）<strong>数组名</strong></p><p>2）<strong>元素</strong></p><p>3）<strong>索引</strong>：角标、下标、</p><p>4）<strong>数组的长度</strong>：元素的个数</p><h4 id="3-数组的特点"><a href="#3-数组的特点" class="headerlink" title="3 数组的特点"></a>3 数组的特点</h4><p>1）数组是有序排列的</p><p>2）数组属于<strong>引用数据类型</strong>的变量。数组的元素，既可以是基本数据类型，也可以是引用数据类型</p><p>3）创建数组对象会在内存中开辟一整块连续的空间</p><p>4）数组的长度一旦确定，就不能修改</p><h4 id="4-数组的分类"><a href="#4-数组的分类" class="headerlink" title="4 数组的分类"></a>4 数组的分类</h4><p>1）按照维数：一维数组、二维数组……</p><p>2）按照数组元素的类型：基本数据类型元素的数组、引用数据类型元素的数组</p><h3 id="二、一维数组"><a href="#二、一维数组" class="headerlink" title="二、一维数组"></a>二、一维数组</h3><h4 id="1-声明与初始化"><a href="#1-声明与初始化" class="headerlink" title="1 声明与初始化"></a>1 声明与初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] ids;<span class="comment">//声明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//①静态初始化:数组的初始化和数组元素的赋值操作同时进行</span></span><br><span class="line">ids = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>,<span class="number">1004</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//②动态初始化:数组的初始化和数组元素的赋值操作分开进行</span></span><br><span class="line">String[] names = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] arr4 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//类型推断</span></span><br></pre></td></tr></table></figure><h4 id="2-调用数组的指定位置的元素"><a href="#2-调用数组的指定位置的元素" class="headerlink" title="2 调用数组的指定位置的元素"></a>2 调用数组的指定位置的元素</h4><p>通过角标的方式调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">names[<span class="number">0</span>] = <span class="string">"王铭"</span>;</span><br><span class="line">names[<span class="number">1</span>] = <span class="string">"王赫"</span>;</span><br><span class="line">names[<span class="number">2</span>] = <span class="string">"张学良"</span>;</span><br><span class="line">names[<span class="number">3</span>] = <span class="string">"孙居龙"</span>;</span><br><span class="line">names[<span class="number">4</span>] = <span class="string">"王宏志"</span>;</span><br></pre></td></tr></table></figure><h4 id="3-数组的长度"><a href="#3-数组的长度" class="headerlink" title="3 数组的长度"></a>3 数组的长度</h4><p>数组一旦初始化，其长度就是确定的，就不可修改。使用<code>arr.length</code>获取数组的长度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(names.length);<span class="comment">//5</span></span><br><span class="line">System.out.println(ids.length);</span><br></pre></td></tr></table></figure><h4 id="4-遍历数组"><a href="#4-遍历数组" class="headerlink" title="4 遍历数组"></a>4 遍历数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; names.length;i++)&#123;</span><br><span class="line">System.out.println(names[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-数组元素的默认初始化值"><a href="#5-数组元素的默认初始化值" class="headerlink" title="5 数组元素的默认初始化值"></a>5 数组元素的默认初始化值</h4><p>1）数组元素是整型：0</p><p>2）数组元素是浮点型：0.0</p><p>3）数组元素是char型：0 或 ‘\u0000’，而非 ‘0’</p><p>4）数组元素是boolean型：false</p><p>5）数组元素是引用数据类型：null</p><h3 id="三、二维数组"><a href="#三、二维数组" class="headerlink" title="三、二维数组"></a>三、二维数组</h3><h4 id="1-理解二维数组"><a href="#1-理解二维数组" class="headerlink" title="1 理解二维数组"></a>1 理解二维数组</h4><p>一个一维数组A的元素如果还是一个一维数组类型的，则，此数组A称为二维数组</p><h4 id="2-声明与初始化"><a href="#2-声明与初始化" class="headerlink" title="2 声明与初始化"></a>2 声明与初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int[][] arr1;&#x2F;&#x2F;声明</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;静态初始化</span><br><span class="line">arr1 &#x3D; new int[][]&#123;&#123;1,2,3&#125;,&#123;4,5&#125;,&#123;6,7,8&#125;&#125;;</span><br><span class="line">&#x2F;&#x2F;动态初始化1</span><br><span class="line">String[][] arr2 &#x3D; new String[3][2];</span><br><span class="line">&#x2F;&#x2F;动态初始化2</span><br><span class="line">String[][] arr3 &#x3D; new String[3][];</span><br><span class="line"></span><br><span class="line">int[] arr4[] &#x3D; new int[][]&#123;&#123;1,2,3&#125;,&#123;4,5,9,10&#125;,&#123;6,7,8&#125;&#125;;&#x2F;&#x2F;也是正确的写法</span><br><span class="line">int[] arr5[] &#x3D; &#123;&#123;1,2,3&#125;,&#123;4,5&#125;,&#123;6,7,8&#125;&#125;;&#x2F;&#x2F;类型推断</span><br></pre></td></tr></table></figure><h4 id="3-调用数组的指定位置的元素"><a href="#3-调用数组的指定位置的元素" class="headerlink" title="3 调用数组的指定位置的元素"></a>3 调用数组的指定位置的元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(arr1[<span class="number">0</span>][<span class="number">1</span>]);<span class="comment">//2</span></span><br><span class="line">System.out.println(arr2[<span class="number">1</span>][<span class="number">1</span>]);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">arr3[<span class="number">1</span>] = <span class="keyword">new</span> String[<span class="number">4</span>];</span><br><span class="line">System.out.println(arr3[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">System.out.println(arr3[<span class="number">0</span>]);<span class="comment">//</span></span><br></pre></td></tr></table></figure><h4 id="4-数组的长度"><a href="#4-数组的长度" class="headerlink" title="4 数组的长度"></a>4 数组的长度</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(arr4.length);<span class="comment">//3</span></span><br><span class="line">System.out.println(arr4[<span class="number">0</span>].length);<span class="comment">//3</span></span><br><span class="line">System.out.println(arr4[<span class="number">1</span>].length);<span class="comment">//4</span></span><br></pre></td></tr></table></figure><h4 id="5-遍历二维数组元素"><a href="#5-遍历二维数组元素" class="headerlink" title="5 遍历二维数组元素"></a>5 遍历二维数组元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr4.length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr4[i].length;j++)&#123;</span><br><span class="line">System.out.print(arr4[i][j] + <span class="string">"  "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-默认初始化值"><a href="#6-默认初始化值" class="headerlink" title="6 默认初始化值"></a>6 默认初始化值</h4><p>二维数组分为外层数组的元素，内层数组的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">外层元素：arr[<span class="number">0</span>],arr[<span class="number">1</span>]等</span><br><span class="line"></span><br><span class="line">内层元素：arr[<span class="number">0</span>][<span class="number">0</span>],arr[<span class="number">1</span>][<span class="number">2</span>]等</span><br></pre></td></tr></table></figure><p>1）针对于初始化方式一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>外层元素的初始化值为：<strong>地址值</strong></p><p>内层元素的初始化值为：与一维数组初始化情况相同</p><p>2）针对于初始化方式二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][];</span><br></pre></td></tr></table></figure><p>外层元素的初始化值为：<strong>null</strong></p><p>内层元素的初始化值为：不能调用，否则报错。</p><h3 id="四、数组的常见算法"><a href="#四、数组的常见算法" class="headerlink" title="四、数组的常见算法"></a>四、数组的常见算法</h3><h4 id="1-数组的创建与元素赋值"><a href="#1-数组的创建与元素赋值" class="headerlink" title="1 数组的创建与元素赋值"></a>1 数组的创建与元素赋值</h4><p>杨辉三角（二维数组）、回形数（二维数组）、6个数，1-30之间随机生成且不重复。</p><h4 id="2-对于数值型的数组"><a href="#2-对于数值型的数组" class="headerlink" title="2 对于数值型的数组"></a>2 对于数值型的数组</h4><p>最大值、最小值、总和、平均数</p><h4 id="3-数组的赋值与复制"><a href="#3-数组的赋值与复制" class="headerlink" title="3 数组的赋值与复制"></a>3 数组的赋值与复制</h4><p><strong>1）赋值</strong></p><p>两个变量指向同一个数组的地址，修改一个数组的元素，另一个也跟着修改。</p><p><strong>2）复制</strong></p><p>两个独立的数组，数组的元素相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr1,arr2;</span><br><span class="line">arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line">arr2 = arr1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//复制</span></span><br><span class="line">arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[arr1.length];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr2.length;i++)&#123;</span><br><span class="line">arr2[i] = arr1[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-反转"><a href="#4-反转" class="headerlink" title="4 反转"></a>4 反转</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length / <span class="number">2</span>;i++)&#123;</span><br><span class="line">String temp = arr[i];</span><br><span class="line">arr[i] = arr[arr.length - i -<span class="number">1</span>];</span><br><span class="line">arr[arr.length - i -<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,j = arr.length - <span class="number">1</span>;i &lt; j;i++,j--)&#123;</span><br><span class="line">String temp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-查找"><a href="#5-查找" class="headerlink" title="5 查找"></a>5 查找</h4><p><strong>1）线性查找</strong> </p><p><strong>实现思路</strong>：通过遍历的方式，一个一个的数据进行比较、查找</p><p><strong>适用性</strong>：具有普遍适用性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dest.equals(arr[i]))&#123;</span><br><span class="line">System.out.println(<span class="string">"找到了指定的元素，位置为："</span> + i);</span><br><span class="line">isFlag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isFlag)&#123;</span><br><span class="line">System.out.println(<span class="string">"很遗憾，没有找到的啦！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2）二分法查找</strong></p><p><strong>实现思路</strong>：每次比较中间值，折半的方式检索</p><p><strong>适用性</strong>：（前提：数组必须有序）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> head = <span class="number">0</span>;<span class="comment">//初始的首索引</span></span><br><span class="line"><span class="keyword">int</span> end = arr.length - <span class="number">1</span>;<span class="comment">//初始的末索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">while</span>(head &lt;= end)&#123;</span><br><span class="line"><span class="keyword">int</span> middle = (head + end)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(dest == arr[middle])&#123;</span><br><span class="line">System.out.println(<span class="string">"找到了指定的元素，位置为："</span> + middle);</span><br><span class="line">isFlag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[middle] &gt; dest1)&#123;</span><br><span class="line">end = middle - <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//arr[middle] &lt; dest1</span></span><br><span class="line">head = middle + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isFlag)&#123;</span><br><span class="line">System.out.println(<span class="string">"很遗憾，没有找到的啦！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-排序"><a href="#6-排序" class="headerlink" title="6 排序"></a>6 排序</h4><table><thead><tr><th align="center">排序算法</th><th align="center">平均时间复杂度</th><th align="center">最差时间复杂度</th><th align="center">空间复杂度</th><th align="center">数据对象稳定性</th></tr></thead><tbody><tr><td align="center">冒泡排序</td><td align="center">O(n2)</td><td align="center">O(n2)</td><td align="center">O(1)</td><td align="center">稳定</td></tr><tr><td align="center">选择排序</td><td align="center">O(n2)</td><td align="center">O(n2)</td><td align="center">O(1)</td><td align="center">数组不稳定、链表稳定</td></tr><tr><td align="center">插入排序</td><td align="center">O(n2)</td><td align="center">O(n2)</td><td align="center">O(1)</td><td align="center">稳定</td></tr><tr><td align="center">快速排序</td><td align="center">O(n*log2n)</td><td align="center">O(n2)</td><td align="center">O(log2n)</td><td align="center">不稳定</td></tr><tr><td align="center">堆排序</td><td align="center">O(n*log2n)</td><td align="center">O(n*log2n)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">归并排序</td><td align="center">O(n*log2n)</td><td align="center">O(n*log2n)</td><td align="center">O(n)</td><td align="center">稳定</td></tr><tr><td align="center">希尔排序</td><td align="center">O(n*log2n)</td><td align="center">O(n2)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">计数排序</td><td align="center">O(n+m)</td><td align="center">O(n+m)</td><td align="center">O(n+m)</td><td align="center">稳定</td></tr><tr><td align="center">桶排序</td><td align="center">O(n)</td><td align="center">O(n)</td><td align="center">O(m)</td><td align="center">稳定</td></tr><tr><td align="center">基数排序</td><td align="center">O(k*n)</td><td align="center">O(n2)</td><td align="center"></td><td align="center">稳定</td></tr></tbody></table><p><strong>1）冒泡排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length - <span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr.length - <span class="number">1</span> - i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2）快速排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = data[i];</span><br><span class="line">data[i] = data[j];</span><br><span class="line">data[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">subSort</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (start &lt; end) &#123;</span><br><span class="line"><span class="keyword">int</span> base = data[start];</span><br><span class="line"><span class="keyword">int</span> low = start;</span><br><span class="line"><span class="keyword">int</span> high = end + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">while</span> (low &lt; end &amp;&amp; data[++low] - base &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line"><span class="keyword">while</span> (high &gt; start &amp;&amp; data[--high] - base &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line"><span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">swap(data, low, high);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">swap(data, start, high);</span><br><span class="line"></span><br><span class="line">subSort(data, start, high - <span class="number">1</span>);<span class="comment">//递归调用</span></span><br><span class="line">subSort(data, high + <span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] data)</span></span>&#123;</span><br><span class="line">subSort(data,<span class="number">0</span>,data.length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、Array工具类"><a href="#五、Array工具类" class="headerlink" title="五、Array工具类"></a>五、Array工具类</h3><p>Arrays 定义在 <code>java.util</code> 包下，提供了很多操作数组的方法</p><p>导包：<code>import java.util.Arrays;</code></p><h4 id="1-equals"><a href="#1-equals" class="headerlink" title="1 equals()"></a>1 equals()</h4><p><code>boolean equals(int[] a,int[] b)</code>: 判断两个数组是否相等</p><h4 id="2-toString"><a href="#2-toString" class="headerlink" title="2 toString()"></a>2 toString()</h4><p><code>String toString(int[] a)</code>: 输出数组信息</p><h4 id="3-fill"><a href="#3-fill" class="headerlink" title="3 fill()"></a>3 fill()</h4><p><code>void fill(int[] a,int val)</code>: 将指定值填充到数组之中</p><h4 id="4-sort"><a href="#4-sort" class="headerlink" title="4 sort()"></a>4 sort()</h4><p><code>void sort(int[] a)</code>: 对数组进行排序</p><h4 id="5-binarySearch"><a href="#5-binarySearch" class="headerlink" title="5 binarySearch()"></a>5 binarySearch()</h4><p><code>int binarySearch(int[] a,int key)</code>: 二分查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.boolean equals(int[] a,int[] b): 判断两个数组是否相等。</span></span><br><span class="line"><span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">boolean</span> isEquals = Arrays.equals(arr1, arr2);</span><br><span class="line">System.out.println(isEquals);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.String toString(int[] a): 输出数组信息。</span></span><br><span class="line">System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.void fill(int[] a,int val): 将指定值填充到数组之中。</span></span><br><span class="line">Arrays.fill(arr1,<span class="number">10</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.void sort(int[] a): 对数组进行排序。</span></span><br><span class="line">Arrays.sort(arr2);</span><br><span class="line">System.out.println(Arrays.toString(arr2));</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.int binarySearch(int[] a,int key)</span></span><br><span class="line"><span class="keyword">int</span>[] arr3 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">98</span>,-<span class="number">34</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">54</span>,<span class="number">66</span>,<span class="number">79</span>,<span class="number">105</span>,<span class="number">210</span>,<span class="number">333</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> index = Arrays.binarySearch(arr3, <span class="number">210</span>);</span><br><span class="line"><span class="keyword">if</span>(index &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(index);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"未找到"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、数组的常见异常"><a href="#六、数组的常见异常" class="headerlink" title="六、数组的常见异常"></a>六、数组的常见异常</h3><h4 id="1-数组角标越界异常"><a href="#1-数组角标越界异常" class="headerlink" title="1 数组角标越界异常"></a>1 数组角标越界异常</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(arr[-2]);//ArrayIndexOutOfBoundsException</span></span><br></pre></td></tr></table></figure><h4 id="2-空指针异常"><a href="#2-空指针异常" class="headerlink" title="2 空指针异常"></a>2 空指针异常</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//情况一：</span></span><br><span class="line"><span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">arr1 = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//System.out.println(arr1[0]);//NullPointerException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：</span></span><br><span class="line"><span class="keyword">int</span>[][] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][];</span><br><span class="line"><span class="comment">//System.out.println(arr2[0][0]);//NullPointerException</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组、一维数组、二维数组&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/categories/Java/"/>
    
      <category term="Java基础" scheme="https://ActionDing.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/tags/Java/"/>
    
      <category term="编程" scheme="https://ActionDing.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【Java基础】5-流程控制之循环结构</title>
    <link href="https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%915-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B9%8B%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"/>
    <id>https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%915-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B9%8B%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</id>
    <published>2020-07-04T19:02:05.000Z</published>
    <updated>2020-08-15T03:07:01.928Z</updated>
    
    <content type="html"><![CDATA[<p>循环结构：for 循环结构、while 循环结构、do-while 循环结构、嵌套循环</p><a id="more"></a><h3 id="一、循环结构的四要素"><a href="#一、循环结构的四要素" class="headerlink" title="一、循环结构的四要素"></a>一、循环结构的四要素</h3><p>① 初始化条件<br>② 循环条件  —&gt;是boolean类型<br>③ 循环体<br>④ 迭代条件</p><p><strong>说明</strong>：通常情况下，循环结束都是因为②中循环条件返回 <code>false</code>了。</p><h3 id="二、for-循环结构"><a href="#二、for-循环结构" class="headerlink" title="二、for 循环结构"></a>二、for 循环结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(①;②;④)&#123;</span><br><span class="line">③</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行过程</strong>：① - ② - ③ - ④ - ② - ③ - ④ - … - ②</p><h3 id="三、while-循环结构"><a href="#三、while-循环结构" class="headerlink" title="三、while 循环结构"></a>三、while 循环结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">①</span><br><span class="line"><span class="keyword">while</span>(②)&#123;</span><br><span class="line">③;</span><br><span class="line">④;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行过程</strong>：① - ② - ③ - ④ - ② - ③ - ④ - … - ②</p><p><strong>说明</strong></p><p>1）写while循环千万小心不要丢了迭代条件。一旦丢了，就可能导致死循环！<br>2）我们写程序，要避免出现死循环。<br>3）for循环和while循环是可以相互转换的！ </p><blockquote><p>for 和 while 循环总结：</p><p>1）开发中，基本上我们都会从for、while中进行选择，实现循环结构。</p><p>2）for循环和while循环是可以相互转换的！ </p><p>3）我们写程序，要避免出现死循环。</p><p>4）<strong>区别</strong>：for循环和while循环的初始化条件部分的作用范围不同。</p></blockquote><h3 id="四、do-while-循环结构"><a href="#四、do-while-循环结构" class="headerlink" title="四、do-while 循环结构"></a>四、do-while 循环结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">①</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">③;</span><br><span class="line">④;</span><br><span class="line">&#125;<span class="keyword">while</span>(②);</span><br></pre></td></tr></table></figure><p><strong>执行过程</strong>：① - ③ - ④ - ② - ③ - ④ - … - ②</p><p><strong>说明</strong><br>1）do-while 循环至少会执行一次循环体！<br>2）开发中，使用 for 和 while 更多一些。较少使用 do-while</p><h3 id="五、嵌套循环"><a href="#五、嵌套循环" class="headerlink" title="五、嵌套循环"></a>五、嵌套循环</h3><p><strong>1 嵌套循环</strong>：将一个循环结构A声明在另一个循环结构B的循环体中,就构成了嵌套循环</p><p>1）<strong>外层循环</strong>：循环结构B</p><p>2）<strong>内层循环</strong>：循环结构A</p><p><strong>2 说明</strong></p><p>1）内层循环结构遍历一遍，只相当于外层循环循环体执行了一次</p><p>2）假设外层循环需要执行m次，内层循环需要执行n次。此时内层循环的循环体一共执行了m * n次</p><p>3）外层循环控制行数，内层循环控制列数</p><h3 id="六、break-和-continue-关键字"><a href="#六、break-和-continue-关键字" class="headerlink" title="六、break 和 continue 关键字"></a>六、break 和 continue 关键字</h3><table><thead><tr><th align="center"></th><th align="center">使用范围</th><th align="center">循环中的作用</th><th align="center">相同点</th></tr></thead><tbody><tr><td align="center">break</td><td align="center">switch-case、循环结构中</td><td align="center">结束当前循环</td><td align="center">关键字后面不能声明执行语句</td></tr><tr><td align="center">continue</td><td align="center">循环结构中</td><td align="center">结束当次循环</td><td align="center">关键字后面不能声明执行语句</td></tr></tbody></table><blockquote><p><strong>“无限循环”结构</strong>: while(true) 或 for(;;)</p><p><strong>总结</strong>：如何结束一个循环结构？<br>​    方式一：当循环条件是false时<br>​    方式二：在循环体中，执行break</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;循环结构：for 循环结构、while 循环结构、do-while 循环结构、嵌套循环&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/categories/Java/"/>
    
      <category term="Java基础" scheme="https://ActionDing.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/tags/Java/"/>
    
      <category term="编程" scheme="https://ActionDing.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【Java基础】4-流程控制之分支结构</title>
    <link href="https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%914-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B9%8B%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/"/>
    <id>https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%914-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B9%8B%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/</id>
    <published>2020-07-04T19:02:04.000Z</published>
    <updated>2020-08-15T03:06:05.588Z</updated>
    
    <content type="html"><![CDATA[<p>分支结构：if-else 条件判断结构、switch-case 选择结构</p><a id="more"></a><h3 id="一、if-else-条件判断结构"><a href="#一、if-else-条件判断结构" class="headerlink" title="一、if-else 条件判断结构"></a>一、if-else 条件判断结构</h3><p>分支结构中的if-else（条件判断结构）</p><h4 id="1-三种结构"><a href="#1-三种结构" class="headerlink" title="1 三种结构"></a>1 三种结构</h4><p>① 第一种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">执行表达式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② 第二种：二选一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">执行表达式<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">执行表达式<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③ 第三种：n选一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">执行表达式<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">执行表达式<span class="number">2</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">执行表达式<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">执行表达式n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>产生<strong>随机数</strong>：使用 Math.random() → [0.0 - 1.0)</p><p>公式：[a,b] → (int)(Math.random() * (b - a + 1) ) + a</p></blockquote><h4 id="2-说明"><a href="#2-说明" class="headerlink" title="2 说明"></a>2 说明</h4><p>1）else 结构是可选的。</p><p>2）针对于条件表达式：</p><p>​    如果多个条件表达式之间是“互斥”关系(或没有交集的关系)，哪个判断和执行语句声明顺序无所谓。<br>​    如果多个条件表达式之间有交集的关系，需要根据实际情况，考虑清楚应该将哪个结构先声明。<br>​    如果多个条件表达式之间有包含的关系，通常情况下，需要将范围小声明在范围大的前面。否则，范围小的就没机会执行了。</p><p>3）if-else结构是可以相互嵌套的。</p><p>4）如果if-else结构中的执行语句只有一行时，对应的一对{}可以省略的。但是，不建议大家省略。</p><h3 id="二、switch-case-选择结构"><a href="#二、switch-case-选择结构" class="headerlink" title="二、switch-case 选择结构"></a>二、switch-case 选择结构</h3><h4 id="1-格式"><a href="#1-格式" class="headerlink" title="1 格式"></a>1 格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">执行语句<span class="number">1</span>;</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">执行语句<span class="number">2</span>;</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">执行语句n;</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-说明-1"><a href="#2-说明-1" class="headerlink" title="2 说明"></a>2 说明</h4><p>1）根据switch表达式中的值，依次匹配各个case中的常量。一旦匹配成功，则进入相应case结构中，调用其执行语句。<br>    当调用完执行语句以后，则仍然继续向下执行其他case结构中的执行语句，直到遇到break关键字或此switch-case结构末尾结束为止。</p><p>2）<code>break</code>：可以使用在switch-case结构中，表示一旦执行到此关键字，就跳出switch-case结构</p><p>3）switch结构中的表达式，只能是如下的6种数据类型之一：<code>byte 、short、char、int、枚举类型(JDK5.0新增)、String类型(JDK7.0新增)</code></p><p>4）case 之后只能声明常量。不能声明范围。</p><p>5）break关键字是可选的。</p><p>6）<code>default</code>：相当于if-else结构中的else；default结构是可选的，而且位置是灵活的。</p><blockquote><p><strong>注意</strong></p><p>1）凡是可以使用switch-case的结构，都可以转换为if-else。反之，不成立。</p><p>2）我们写分支结构时，当发现既可以使用switch-case,（同时，switch中表达式的取值情况不太多），又可以使用if-else时，我们优先选择使用switch-case。原因：switch-case执行效率稍高。</p><p>3）如果switch-case结构中的多个case的执行语句相同，则可以考虑进行合并。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分支结构：if-else 条件判断结构、switch-case 选择结构&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/categories/Java/"/>
    
      <category term="Java基础" scheme="https://ActionDing.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/tags/Java/"/>
    
      <category term="编程" scheme="https://ActionDing.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【Java基础】3-运算符</title>
    <link href="https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%913-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%913-%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2020-07-04T19:02:03.000Z</published>
    <updated>2020-08-15T03:27:27.848Z</updated>
    
    <content type="html"><![CDATA[<p>算数运算符、赋值运算符、比较运算符、逻辑运算符、位运算符、三元运算符</p><a id="more"></a><h3 id="一、算术运算符"><a href="#一、算术运算符" class="headerlink" title="一、算术运算符"></a>一、算术运算符</h3><table><thead><tr><th align="center"><code>+</code></th><th align="center"><code>-</code></th><th align="center"><code>+</code></th><th align="center"><code>-</code></th><th align="center"><code>*</code></th><th align="center"><code>/</code></th><th align="center"><code>%</code></th><th align="center"><code>++</code></th><th align="center"><code>--</code></th><th align="center"><code>++</code></th><th align="center"><code>--</code></th><th align="center"><code>+</code></th></tr></thead><tbody><tr><td align="center">正号</td><td align="center">负号</td><td align="center">加</td><td align="center">减</td><td align="center">乘</td><td align="center">除</td><td align="center">取余</td><td align="center">前自增</td><td align="center">前自减</td><td align="center">后自增</td><td align="center">后自减</td><td align="center">字符串连接</td></tr></tbody></table><p><strong>1 自增</strong></p><p>​    (前)++：先自增1，后运算<br>​    (后)++：先运算，后自增1</p><p><strong>2 自减</strong></p><p>​    (前)–：先自减1，后运算<br>​    (后)–：先运算，后自减1</p><p><strong>3 连接符</strong>：+（只能使用在String与其他数据类型变量之间使用）</p><h3 id="二、赋值运算符"><a href="#二、赋值运算符" class="headerlink" title="二、赋值运算符"></a>二、赋值运算符</h3><p><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code></p><blockquote><p><strong>注意</strong>：运算的结果不会改变变量本身的数据类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开发中，如果希望变量实现+2的操作，有几种方法？(前提：int num = 10;)</span></span><br><span class="line"><span class="comment">//方式一：num = num + 2;</span></span><br><span class="line"><span class="comment">//方式二：num += 2; (推荐)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开发中，如果希望变量实现+1的操作，有几种方法？(前提：int num = 10;)</span></span><br><span class="line"><span class="comment">//方式一：num = num + 1;</span></span><br><span class="line"><span class="comment">//方式二：num += 1; </span></span><br><span class="line"><span class="comment">//方式三：num++; (推荐)</span></span><br></pre></td></tr></table></figure><h3 id="三、比较运算符"><a href="#三、比较运算符" class="headerlink" title="三、比较运算符"></a>三、比较运算符</h3><p>也叫<strong>关系运算符</strong></p><p><code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>、<code>instanceof</code></p><blockquote><p>比较运算符的结果都是 boolean 型</p><ol><li><p>&lt;、&gt;=、&lt;= :只能使用在数值类型的数据之间。</p></li><li><p>== 和 !=: 不仅可以使用在数值类型数据之间，还可以使用在其他引用类型变量之间。</p></li></ol></blockquote><h3 id="四、逻辑运算符"><a href="#四、逻辑运算符" class="headerlink" title="四、逻辑运算符"></a>四、逻辑运算符</h3><table><thead><tr><th align="center"><code>&amp;</code></th><th align="center"><code>&amp;&amp;</code></th><th align="center"><code>|</code></th><th align="center"><code>||</code></th><th align="center"><code>!</code></th><th align="center"><code>^</code></th></tr></thead><tbody><tr><td align="center">逻辑与</td><td align="center">短路与</td><td align="center">逻辑或</td><td align="center">短路或</td><td align="center">逻辑非</td><td align="center">逻辑异或</td></tr></tbody></table><blockquote><p>逻辑运算符操作的都是boolean类型的变量，而且结果也是boolean类型</p></blockquote><h3 id="五、位运算符"><a href="#五、位运算符" class="headerlink" title="五、位运算符"></a>五、位运算符</h3><table><thead><tr><th align="center"><code>&lt;&lt;</code></th><th align="center"><code>&gt;&gt;</code></th><th align="center"><code>&gt;&gt;&gt;</code></th><th align="center"><code>&amp;</code></th><th align="center"><code>|</code></th><th align="center"><code>^</code></th><th align="center"><code>~</code></th></tr></thead><tbody><tr><td align="center">左移</td><td align="center">右移</td><td align="center">无符号右移</td><td align="center">与运算</td><td align="center">或运算</td><td align="center">异或运算</td><td align="center">取反运算</td></tr></tbody></table><p><strong>注</strong>：无<code>&lt;&lt;&lt;</code></p><blockquote><p>位运算是直接对整数的二进制进行的运算，操作的都是整型的数据</p><ol><li>&lt;&lt;：在一定范围内，每向左移1位，相当于 * 2</li><li>&gt;&gt;：在一定范围内，每向右移1位，相当于 / 2</li></ol></blockquote><h3 id="六、三元运算符"><a href="#六、三元运算符" class="headerlink" title="六、三元运算符"></a>六、三元运算符</h3><p><strong>格式</strong>：<code>(条件表达式)?表达式 1 : 表达式 2;</code></p><p><strong>1</strong> 条件表达式的结果为 <strong>boolean</strong> 类型 </p><p><strong>2</strong> 根据条件表达式真或假，决定执行表达式1，还是表达式2.</p><p>​     如果表达式为true，则执行表达式1。<br>​     如果表达式为false，则执行表达式2。</p><p><strong>3</strong> 表达式1 和表达式2要求是一致的。</p><p><strong>4</strong> 三元运算符可以嵌套使用</p><p><strong>5</strong> 凡是可以使用三元运算符的地方，都可以改写为if-else；反之，不成立。</p><p><strong>6</strong> 如果程序既可以使用三元运算符，又可以使用if-else结构，那么优先选择三元运算符。原因：简洁、执行效率高。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;算数运算符、赋值运算符、比较运算符、逻辑运算符、位运算符、三元运算符&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/categories/Java/"/>
    
      <category term="Java基础" scheme="https://ActionDing.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/tags/Java/"/>
    
      <category term="编程" scheme="https://ActionDing.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【Java基础】2-变量</title>
    <link href="https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%912-%E5%8F%98%E9%87%8F/"/>
    <id>https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%912-%E5%8F%98%E9%87%8F/</id>
    <published>2020-07-04T19:02:02.000Z</published>
    <updated>2020-08-15T01:15:07.085Z</updated>
    
    <content type="html"><![CDATA[<p>关键字、保留字、标识符、变量、自动类型转换、强制类型转换</p><a id="more"></a><h3 id="一、关键字与保留字"><a href="#一、关键字与保留字" class="headerlink" title="一、关键字与保留字"></a>一、关键字与保留字</h3><h4 id="1-关键字-keyword"><a href="#1-关键字-keyword" class="headerlink" title="1 关键字(keyword)"></a>1 关键字(keyword)</h4><p><strong>定义</strong></p><p>​     被 Java 语言赋予了特殊含义，用做专门用途的字符串（单词）</p><p><strong>特点</strong></p><p>​    关键字中所有字母都为<strong>小写</strong></p><p><strong><a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html" target="_blank" rel="noopener">官方地址</a></strong></p><p><img src="/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%912-%E5%8F%98%E9%87%8F/../images/%E5%85%B3%E9%94%AE%E5%AD%971.png" alt="关键字1"></p><p><img src="/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%912-%E5%8F%98%E9%87%8F/../images/%E5%85%B3%E9%94%AE%E5%AD%972.png" alt="关键字2"></p><h4 id="2-保留字-reserved-word"><a href="#2-保留字-reserved-word" class="headerlink" title="2 保留字(reserved word)"></a>2 保留字(reserved word)</h4><p><strong>保留字</strong></p><p>​    现有 Java 版本尚未使用,但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留字</p><ul><li><strong>goto</strong> 、 <strong>const</strong></li><li>命名标识符时要避免使用这些保留字</li></ul><h3 id="二、标识符-Identifier"><a href="#二、标识符-Identifier" class="headerlink" title="二、标识符 (Identifier)"></a>二、标识符 (Identifier)</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h4><p>​    Java 对各种变量、方法和类等要素命名时使用的字符序列称为<strong>标识符</strong></p><blockquote><p>凡是自己可以起名字的地方都叫<strong>标识符</strong></p><p>包名、类名、接口名、变量名、方法名、常量名</p></blockquote><h4 id="2-规则"><a href="#2-规则" class="headerlink" title="2 规则"></a>2 规则</h4><ul><li>由 26 个英文字母大小写， 0 9 或 $ 组成</li><li>数字不可以开头。</li><li>不可以使用关键字和保留字，但能包含关键字和保留字。</li><li>Java 中严格区分大小写，长度无限制。</li><li>标识符不能包含空格。</li></ul><h4 id="3-命名规范"><a href="#3-命名规范" class="headerlink" title="3 命名规范"></a>3 命名规范</h4><ul><li>包名：<code>xxxyyyzzz</code></li><li>类名、接口名：<code>XxxYyyZzz</code></li><li>变量名、方法名：<code>xxxYyyZzz</code></li><li>常亮名：<code>XXX_YYY_ZZZ</code></li></ul><blockquote><p>在起名字时，为了提高阅读性，要尽量意义，“见名知意”。</p></blockquote><h3 id="三、变量"><a href="#三、变量" class="headerlink" title="三、变量"></a>三、变量</h3><h4 id="1-定义变量"><a href="#1-定义变量" class="headerlink" title="1 定义变量"></a>1 定义变量</h4><p><strong>格式</strong></p><ol><li>数据类型  变量名 = 变量值;</li><li>数据类型  变量名;<br>变量名 = 变量值;<blockquote><p><strong>注意</strong></p><ol><li>变量必须先声明，后使用</li><li>变量都定义在其<strong>作用域</strong>内</li><li>同一个作用域内，不可以声明两个同名的变量</li></ol></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//变量的定义</span></span><br><span class="line"><span class="keyword">int</span> myAge = <span class="number">22</span>;</span><br><span class="line"><span class="comment">//变量的使用</span></span><br><span class="line">System.out.println(myAge);</span><br><span class="line"></span><br><span class="line"><span class="comment">//变量的声明</span></span><br><span class="line"><span class="keyword">int</span> myNumber;</span><br><span class="line"><span class="comment">//System.out.println(myNnmber);//赋值后才能使用</span></span><br><span class="line"><span class="comment">//变量的赋值</span></span><br><span class="line">myNumber = <span class="number">1001</span>;</span><br><span class="line">System.out.println(myNumber);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span> <span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//作用域不同，可以定义同名变量</span></span><br><span class="line"><span class="comment">//变量的定义</span></span><br><span class="line"><span class="keyword">int</span> myAge = <span class="number">22</span>;</span><br><span class="line"><span class="comment">//变量的使用</span></span><br><span class="line">System.out.println(myAge);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-变量的分类"><a href="#2-变量的分类" class="headerlink" title="2 变量的分类"></a>2 变量的分类</h4><h5 id="按数据类型分类"><a href="#按数据类型分类" class="headerlink" title="按数据类型分类"></a>按数据类型分类</h5><p><img src="/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%912-%E5%8F%98%E9%87%8F/../images/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="数据类型"></p><h5 id="按声明的位置分类"><a href="#按声明的位置分类" class="headerlink" title="*按声明的位置分类"></a>*按声明的位置分类</h5><p><img src="/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%912-%E5%8F%98%E9%87%8F/../images/%E5%8F%98%E9%87%8F.png" alt="变量"></p><h4 id="3-基本数据类型"><a href="#3-基本数据类型" class="headerlink" title="3 基本数据类型"></a>3 基本数据类型</h4><h5 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h5><table><thead><tr><th align="center">byte</th><th align="center">short</th><th align="center">int</th><th align="center">long</th></tr></thead><tbody><tr><td align="center">1字节</td><td align="center">2字节</td><td align="center">4字节</td><td align="center">8字节</td></tr></tbody></table><blockquote><ol><li>byte范围：-128 ~ 127</li><li>声明long型变量，必须以”l”或”L”结尾</li><li>通常，定义整型变量时，使用int型。</li><li>整型的常量，默认类型是：int型</li></ol></blockquote><h5 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h5><table><thead><tr><th align="center">float</th><th align="center">double</th></tr></thead><tbody><tr><td align="center">4字节</td><td align="center">8字节</td></tr></tbody></table><blockquote><ol><li>浮点型，表示带小数点的数值</li><li>float表示数值的范围比long还大</li><li>定义float类型变量时，变量要以”f”或”F”结尾</li><li>通常，定义浮点型变量时，使用double型。</li><li>浮点型的常量，默认类型为：double</li></ol></blockquote><h5 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h5><table><thead><tr><th align="left">char</th></tr></thead><tbody><tr><td align="left">定义char型变量，通常使用一对’’,内部只能写一个字符</td></tr><tr><td align="left">表示方式：1. 声明一个字符 2. 转义字符 3. 直接使用 Unicode 值来表示字符型常量</td></tr></tbody></table><h5 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h5><table><thead><tr><th align="left">boolean</th></tr></thead><tbody><tr><td align="left">只能取两个值之一：true 、 false</td></tr><tr><td align="left">常常在条件判断、循环结构中使用</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableTest1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本数据类型</span></span><br><span class="line"><span class="comment">//整型：byte 1字节 -128 ~ 127</span></span><br><span class="line"><span class="keyword">byte</span> b1 = <span class="number">12</span>;</span><br><span class="line"><span class="comment">//byte b2 = 128;</span></span><br><span class="line">System.out.println(b1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//整型：short 2字节</span></span><br><span class="line"><span class="comment">//整型：int 4字节</span></span><br><span class="line"><span class="comment">//整型：long 8字节 以'l'或'L'结尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通常，定义整型变量时，使用int型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> l1 = <span class="number">123456789098765432L</span>;</span><br><span class="line"><span class="comment">//long l2 = 987654321012345678;</span></span><br><span class="line">System.out.println(l1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//浮点型：float 4字节 以'f'或'F'结尾</span></span><br><span class="line"><span class="comment">//浮点型：double 8字节</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通常，定义浮点型变量时，使用double型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> f1 = <span class="number">123.45f</span>;</span><br><span class="line"><span class="comment">//float f2 = 678.90;</span></span><br><span class="line">System.out.println(f1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符型：char 1字符=2字节 用一对单引号''</span></span><br><span class="line"><span class="comment">//表示方式：</span></span><br><span class="line"><span class="comment">//1.声明一个字符 </span></span><br><span class="line"><span class="comment">//2.转义字符 </span></span><br><span class="line"><span class="comment">//3.直接使用 Unicode 值来表示字符型常量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'A'</span>;</span><br><span class="line"><span class="comment">//char c2 = 'ab';</span></span><br><span class="line">System.out.println(c1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c3 = <span class="string">'1'</span>;</span><br><span class="line"><span class="keyword">char</span> c4 = <span class="string">'の'</span>;</span><br><span class="line"><span class="keyword">char</span> c5 = <span class="string">'中'</span>;</span><br><span class="line">System.out.println(c3);</span><br><span class="line">System.out.println(c4);</span><br><span class="line">System.out.println(c5);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c6 = <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">char</span> c7 = <span class="string">'\t'</span>;</span><br><span class="line"><span class="keyword">char</span> c8 = <span class="string">'\u1001'</span>;</span><br><span class="line">System.out.println(<span class="string">"***"</span> + c6 + <span class="string">"***"</span>);</span><br><span class="line">System.out.println(<span class="string">"***"</span> + c7 + <span class="string">"***"</span>);</span><br><span class="line">System.out.println(c8);</span><br><span class="line"></span><br><span class="line"><span class="comment">//布尔型：boolean true/false </span></span><br><span class="line"><span class="comment">//常常在条件判断、循环结构中使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> isMale = <span class="keyword">true</span>;</span><br><span class="line">System.out.println(isMale);</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> isMarried = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (isMarried)&#123;</span><br><span class="line">System.out.println(<span class="string">"Go home"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Go party"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、自动类型转换"><a href="#四、自动类型转换" class="headerlink" title="四、自动类型转换"></a>四、自动类型转换</h3><p>当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。<br>    <code>byte 、char 、short --&gt; int --&gt; long --&gt; float --&gt; double</code><br><strong>特别的</strong>：当byte、char、short三种类型的变量做运算时，结果为int型</p><blockquote><p>此时的容量大小指的是，表示数的范围的大和小。比如：float容量要大于long的容量</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableTest2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> b1 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> i1 = <span class="number">129</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i2 = b1 + i1;</span><br><span class="line"><span class="keyword">long</span> l = b1 + i1;</span><br><span class="line"><span class="keyword">float</span> f = b1 + i1;</span><br><span class="line">System.out.println(i2);</span><br><span class="line">System.out.println(l);</span><br><span class="line">System.out.println(f);</span><br><span class="line"></span><br><span class="line"><span class="keyword">short</span> s1 = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">double</span> d1 = s1;</span><br><span class="line">System.out.println(d1);<span class="comment">//123.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//***************特别地*********************</span></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'a'</span>;<span class="comment">//97</span></span><br><span class="line"><span class="keyword">int</span> i3 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> i4 = c1 + i3;</span><br><span class="line">System.out.println(i4);</span><br><span class="line"></span><br><span class="line"><span class="keyword">short</span> s2 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">byte</span> b2 = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//char c3 = c1 + b2;//编译不通过</span></span><br><span class="line"><span class="comment">//short s3 = b2 + s2;//编译不通过</span></span><br><span class="line"><span class="comment">//short s4 = b1 + b2;//编译不通过</span></span><br><span class="line"><span class="comment">//****************************************</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、强制类型转换"><a href="#五、强制类型转换" class="headerlink" title="五、强制类型转换"></a>五、强制类型转换</h3><p><strong>强转符</strong>：()</p><blockquote><p><strong>注意</strong>：强制类型转换，可能导致精度损失。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableTest3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> d1 = <span class="number">12.9</span>;</span><br><span class="line"><span class="comment">//精度损失举例1</span></span><br><span class="line"><span class="keyword">int</span> i1 = (<span class="keyword">int</span>)d1;<span class="comment">//截断操作</span></span><br><span class="line">System.out.println(i1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//没有精度损失</span></span><br><span class="line"><span class="keyword">long</span> l1 = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">short</span> s2 = (<span class="keyword">short</span>)l1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//精度损失举例2</span></span><br><span class="line"><span class="keyword">int</span> i2 = <span class="number">128</span>;</span><br><span class="line"><span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i2;</span><br><span class="line">System.out.println(b);<span class="comment">//-128</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关键字、保留字、标识符、变量、自动类型转换、强制类型转换&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/categories/Java/"/>
    
      <category term="Java基础" scheme="https://ActionDing.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/tags/Java/"/>
    
      <category term="编程" scheme="https://ActionDing.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【Java基础】1-第一个Java程序</title>
    <link href="https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%911-%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F/"/>
    <id>https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%911-%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F/</id>
    <published>2020-07-04T19:02:01.000Z</published>
    <updated>2020-08-15T00:58:44.984Z</updated>
    
    <content type="html"><![CDATA[<p><strong>国际惯例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印 Hello World</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="一、第一个Java程序"><a href="#一、第一个Java程序" class="headerlink" title="一、第一个Java程序"></a>一、第一个Java程序</h3><h4 id="1-编译运行过程"><a href="#1-编译运行过程" class="headerlink" title="1 编译运行过程"></a>1 编译运行过程</h4><p>① 将 Java 代码编写到扩展名为 .java 的文件中。</p><p>② 通过 javac 命令对该 java 文件进行<strong>编译</strong> 。</p><p>③ 通过 java 命令对生成的 class 文件进行<strong>运行</strong> 。</p><p><img src="/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%911-%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F/../images/%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B.png" alt="编译运行过程"></p><h4 id="2-具体步骤"><a href="#2-具体步骤" class="headerlink" title="2 具体步骤"></a>2 具体步骤</h4><p><strong>步骤一</strong>：打开记事本，输入以上代码，保存为 <code>HelloWorld.java</code></p><p><strong>步骤二</strong>：在保存文件的位置打开命令行，输入<code>javac HelloWorld.java</code>，会生成一个HelloWorld.class文件</p><p><strong>步骤三</strong>：命令行继续输入<code>java HelloWorld</code></p><p><img src="/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%911-%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F/../images/helloworld.png" alt="helloworld"></p><h3 id="二、注释"><a href="#二、注释" class="headerlink" title="二、注释"></a>二、注释</h3><h4 id="1-单行注释"><a href="#1-单行注释" class="headerlink" title="1 单行注释"></a>1 单行注释</h4><p>​    <strong>格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注释文字</span></span><br></pre></td></tr></table></figure><h4 id="2-多行注释"><a href="#2-多行注释" class="headerlink" title="2 多行注释"></a>2 多行注释</h4><p>​    <strong>格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">注释文字 </span></span><br><span class="line"><span class="comment">注释文字 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="3-文档注释"><a href="#3-文档注释" class="headerlink" title="3 文档注释"></a>3 文档注释</h4><p>​    <strong>格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@author</span> 指定 java 程序的作者</span></span><br><span class="line"><span class="comment"><span class="doctag">@version</span> 指定源文件的版本</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>注释内容可以被 JDK 提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档。</p></blockquote><p>​    <strong>操作方式</strong>：<code>javadoc -d mydoc -author -version HelloWorld.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Java注释的三种方式：</span></span><br><span class="line"><span class="comment">①单行注释</span></span><br><span class="line"><span class="comment">②多行注释</span></span><br><span class="line"><span class="comment">③文档注释（Java特有）</span></span><br><span class="line"><span class="comment">生成文档：javadoc -d mydoc -author -version HelloJava.java</span></span><br><span class="line"><span class="comment">mydoc为文档目录</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*****这属于多行注释*****</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@author</span> Ding</span></span><br><span class="line"><span class="comment"><span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*****这属于文档注释*****</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJava</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main方法是程序的入口*****这属于单行注释*****</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印HelloJava</span></span><br><span class="line">System.out.println(<span class="string">"HelloJava"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="附"><a href="#附" class="headerlink" title="附"></a>附</h3><p><strong>Tips | 文件资源管理器</strong></p><p>①<code>win + E</code>打开文件资源管理器</p><p>②在地址栏输入 <code>cmd</code> 回车即可打开<strong>命令行</strong></p><p>③在查看工具栏中，打开<code>隐藏/显示</code>中的 <code>文件扩展名</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;国际惯例&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 打印 Hello World&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloWorld&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/categories/Java/"/>
    
      <category term="Java基础" scheme="https://ActionDing.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/tags/Java/"/>
    
      <category term="编程" scheme="https://ActionDing.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【Java基础】0-Java语言概述</title>
    <link href="https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%910-Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/"/>
    <id>https://actionding.github.io/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%910-Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</id>
    <published>2020-07-04T19:02:00.000Z</published>
    <updated>2020-08-15T04:28:26.664Z</updated>
    
    <content type="html"><![CDATA[<p>Java 是 SUN (Stanford University Network, 斯坦福大学网络公司) 1995 年推出的一门高级编程语言。</p><p><a href="https://www.tiobe.com/tiobe-index/" target="_blank" rel="noopener"><strong>TIOBE 指数</strong></a></p><a id="more"></a><h3 id="一、Java简史"><a href="#一、Java简史" class="headerlink" title="一、Java简史"></a>一、Java简史</h3><p>1991 年，Green 项目，开发语言最初命名为 Oak ( 橡树 )<br>1994 年，开发组意识到 Oak 非常适合于互联网<br>1996 年，发布 JDK 1.0，约 8.3 万个网页应用 Java 技术来制作<br>1997 年，发布 JDK 1.1 JavaOne 会议召开，创当时全球同类会议规模之最<br>1998 年，发布 JDK 1.2 ，同年发布企业平台 J2EE<br>1999 年， Java 分成 J2SE 、 J2EE 和 J2ME JSP/Servlet 技术诞生<br><strong>2004 年，发布里程碑式版本： JDK 1.5 为突出此版本的重要性，更名为 JDK 5.0</strong><br>2005 年， J2SE –&gt; JavaSE；J2EE –&gt; JavaEE；J2ME –&gt; JavaME<br>2009 年， Oracle 公司收购 SUN，交易价格 74 亿美元<br>2011 年，发布 JDK 7.0<br><strong>2014 年，发布 JDK 8.0 ，是继 JDK 5.0 以来变化最大的版本</strong><br>2017 年，发布 JDK 9.0 ，最大限度实现模块化<br>2018 年 3 月，发布 JDK 10.0 ，版本号也称为 18.3<br>2018 年 9 月，发布 JDK 11.0 ，版本号也称为 18.9<br>2019 年 3 月，发布 JDK 12.0 ，版本号也称为 19.3<br>2019 年 9 月，发布 JDK 13.0 ，版本号也称为 19.9<br>2020 年 3 月，发布 JDK 14.0 ，版本号也称为 20.3</p><h3 id="二、Java技术体系平台"><a href="#二、Java技术体系平台" class="headerlink" title="二、Java技术体系平台"></a>二、Java技术体系平台</h3><h4 id="1-Java-SE"><a href="#1-Java-SE" class="headerlink" title="1 Java SE"></a>1 Java SE</h4><p>Java SE (Java Standard Edition): 标准版，支持面向桌面级应用（如Windows 下的应用程序）的 Java 平台，提供了完整的 Java 核心 API ，此版本以前称为 J2SE</p><h4 id="2-Java-EE"><a href="#2-Java-EE" class="headerlink" title="2 Java EE"></a>2 Java EE</h4><p>Java EE (Java Enterprise Edition): 企业版，为开发企业环境下的应用程序提供的一套解决方案。该技术体系中包含的技术如Servlet 、 Jsp 等，主要针对于 Web 应用程序开发。版本以前称为 J2EE</p><h4 id="3-Java-ME"><a href="#3-Java-ME" class="headerlink" title="3 Java ME"></a>3 Java ME</h4><p>Java ME (Java Micro Edition): 小型版，支持Java 程序运行在移动终端（手机、 PDA ）上的平台，对 Java API 有所精简，并加入了针对移动终端的支持，此版本以前称为 J2ME</p><h4 id="4-Java-Card"><a href="#4-Java-Card" class="headerlink" title="4 Java Card"></a>4 Java Card</h4><p>支持一些Java 小程序（ Applets ）运行在小内存设备（如智能卡）上的平台</p><h3 id="三、应用领域"><a href="#三、应用领域" class="headerlink" title="三、应用领域"></a>三、应用领域</h3><h4 id="1-企业级应用"><a href="#1-企业级应用" class="headerlink" title="1 企业级应用"></a>1 企业级应用</h4><p>主要指复杂的大企业的软件系统、各种类型的网站。Java 的安全机制以及它的跨平台的优势，使它在分布式系统领域开发中有广泛应用。应用领域包括金融、电信、交通、电子商务等。</p><h4 id="2-Android-平台应用"><a href="#2-Android-平台应用" class="headerlink" title="2 Android 平台应用"></a>2 Android 平台应用</h4><p>Android 应用程序使用 Java 语言编写。Android 开发水平的高低很大程度上取决于 Java 语言核心能力是否扎实。</p><h4 id="3-大数据平台开发"><a href="#3-大数据平台开发" class="headerlink" title="3 大数据平台开发"></a>3 大数据平台开发</h4><p>各类框架有 Hadoop、spark、storm、flink 等，就这类技术生态圈来讲，还有各种中间件如 flume、kafka、sqoop 等等 ，这些框架以及工具大多数是用 Java 编写而成，但提供诸如 Java、scala、Python、R 等各种语言 API 供编程。</p><h4 id="4-移动领域应用"><a href="#4-移动领域应用" class="headerlink" title="4 移动领域应用"></a>4 移动领域应用</h4><p>主要表现在消费和嵌入式领域，是指在各种小型设备上的应用，包括手机、 PDA 、机顶盒、汽车通信设备等。</p><h3 id="四、主要特性"><a href="#四、主要特性" class="headerlink" title="四、主要特性"></a>四、主要特性</h3><p>1 <strong>Java 语言是易学的</strong></p><p>2 <strong>Java 语言是强制面向对象的</strong></p><p>3 <strong>Java 语言是分布式的</strong></p><p>4 <strong>Java 语言是健壮的</strong></p><p>5 <strong>Java 语言是安全的</strong></p><p>6 <strong>Java 语言是体系结构中立的</strong></p><p>7 <strong>Java 语言是解释型的</strong></p><p>8 <strong>Java 是性能略高的</strong></p><p>9 <strong>Java 语言是原生支持多线程的</strong></p><h3 id="五、Java语言运行机制"><a href="#五、Java语言运行机制" class="headerlink" title="五、Java语言运行机制"></a>五、Java语言运行机制</h3><h4 id="1-Java语言的特点"><a href="#1-Java语言的特点" class="headerlink" title="1 Java语言的特点"></a>1 Java语言的特点</h4><p>① 面向对象</p><ul><li>两个基本概念：类、对象</li><li>三大特性：封装、继承、多态</li></ul><p>② 健壮性</p><p>③ 跨平台性</p><h4 id="2-Java两种核心机制"><a href="#2-Java两种核心机制" class="headerlink" title="2 Java两种核心机制"></a>2 Java两种核心机制</h4><p>① <strong>Java虚拟机</strong>（Java Virtual Machine）</p><p>​    JVM 是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器 。</p><ul><li>对于不同的平台，有不同的虚拟机。</li><li>Java 虚拟机机制屏蔽了底层运行平台的差别，实现了“ 一次编译，到处运行“</li></ul><p>② <strong>垃圾回收机制</strong>（Garbage Collection）</p><ul><li>不再使用的内存空间应回收–垃圾回收。</li><li>垃圾回收在 Java 程序运行过程中自动进行，程序员无法精确控制和干预。</li></ul><h4 id="3-Java语言的环境搭建"><a href="#3-Java语言的环境搭建" class="headerlink" title="3 Java语言的环境搭建"></a>3 Java语言的环境搭建</h4><p>①<strong>JDK</strong>(Java Development Kit Java 开发工具包)</p><p>②<strong>JRE</strong>(Java R untime Environment Java 运行环境 )</p><p>③<strong>JDK、 JRE 、JVM之间的关系</strong></p><p><img src="/2020/07/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%910-Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/../images/JDK%E3%80%81JRE%E3%80%81JVM%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="JDK、JRE、JVM之间的关系"></p><ul><li>JDK = JRE + 开发工具集（例如 Javac 编译工具 等）</li><li>JRE = JVM + Java SE 标准类库</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 是 SUN (Stanford University Network, 斯坦福大学网络公司) 1995 年推出的一门高级编程语言。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.tiobe.com/tiobe-index/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;TIOBE 指数&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/categories/Java/"/>
    
      <category term="Java基础" scheme="https://ActionDing.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://ActionDing.github.io/tags/Java/"/>
    
      <category term="编程" scheme="https://ActionDing.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【小工具】Markdown</title>
    <link href="https://actionding.github.io/2020/07/%E3%80%90%E5%B0%8F%E5%B7%A5%E5%85%B7%E3%80%91Markdown/"/>
    <id>https://actionding.github.io/2020/07/%E3%80%90%E5%B0%8F%E5%B7%A5%E5%85%B7%E3%80%91Markdown/</id>
    <published>2020-07-03T04:11:10.000Z</published>
    <updated>2020-09-11T02:00:23.685Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><p>推荐软件 <a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a></p><a id="more"></a><h3 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h3><p>1.1级标题<br>   使用<code>=</code>（一个以上）或者<code>#</code>（一个）+ 空格<br>2.2级标题<br>   使用<code>-</code>（一个以上）或者<code>#</code>（两个）+ 空格<br>3.3-6级标题<br>   使用#（3-6个）+ 空格</p><h3 id="二、段落"><a href="#二、段落" class="headerlink" title="二、段落"></a>二、段落</h3><ol><li>换行<br>使用两个以上空格加回车</li><li>字体<ol><li>斜体<br>使用一对<code>*</code>或者<code>_</code></li><li>粗体<br>使用一对<code>**</code>或者<code>__</code></li><li>粗斜体<br>使用一对<code>***</code>或者<code>___</code></li></ol></li><li>分割线<br>使用两个以上的<code>*</code>、<code>-</code>或者<code>_</code></li><li>删除线<br>使用波浪线<code>~~删除线文本~~</code></li><li>下划线<br>使用HTML的标签<code>&lt;u&gt;下划线文本&lt;/u&gt;</code></li><li>脚注<br>使用<code>[^脚注]</code> +<code>[^脚注]:脚注内容</code></li><li>角标<br>上角标：使用<code>x^2^</code>–x^2^<br>下角标：使用<code>H~2~O</code>–H<del>2</del>O</li><li>高亮<br>使用等号<code>==高亮文本==</code><blockquote><p>角标和高亮在设置中打开</p></blockquote></li><li>居中<br>使用HTML的标签<code>&lt;center&gt;居中文本&lt;/center&gt;</code></li><li>目录<br>使用<code>[TOC]</code></li><li>表情<br>使用<code>:单词:</code></li></ol><h3 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h3><p>可分为<strong>有序列表</strong>和<strong>无序列表</strong>，可嵌套使用</p><ol><li>有序列表<br>使用<code>数字</code> + <code>.</code> + <code>空格</code></li><li>无序列表<br>使用<code>*</code>、<code>+</code>或者<code>-</code> + <code>空格</code></li></ol><h3 id="四、区块"><a href="#四、区块" class="headerlink" title="四、区块"></a>四、区块</h3><p>使用<code>&gt;</code> + <code>空格</code>，可嵌套，并可与列表嵌套</p><h3 id="五、代码"><a href="#五、代码" class="headerlink" title="五、代码"></a>五、代码</h3><ol><li>一行代码<br>使用一对反引号</li><li>一段代码<br>使用三个反引号</li></ol><h3 id="六、链接"><a href="#六、链接" class="headerlink" title="六、链接"></a>六、链接</h3><ol><li>使用<code>[链接名称](链接地址)</code>（链接名称可省略）</li><li>使用<code>[链接名称][变量]</code>（与脚注类似）</li></ol><h3 id="七、图片"><a href="#七、图片" class="headerlink" title="七、图片"></a>七、图片</h3><ol><li>使用<code>![alt 属性文本](图片地址)</code></li><li>把图片直接拖入文档自动创建</li></ol><h3 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h3><ol><li>使用<code>|</code>来分隔单元格</li><li>使用<code>-</code>来分隔表头</li><li>对齐方式<ul><li>左对齐：<code>:---</code></li><li>右对齐：<code>---:</code></li><li>居中对齐：<code>:---:</code></li></ul></li></ol><h3 id="附：快捷键"><a href="#附：快捷键" class="headerlink" title="附：快捷键"></a>附：快捷键</h3><table><thead><tr><th align="center">快捷键</th><th align="center">功能</th><th align="center">快捷键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">Ctrl+1</td><td align="center">一阶标题</td><td align="center">Ctrl+B</td><td align="center">字体加粗</td></tr><tr><td align="center">Ctrl+2</td><td align="center">二阶标题</td><td align="center">Ctrl+I</td><td align="center">字体倾斜</td></tr><tr><td align="center">Ctrl+3</td><td align="center">三阶标题</td><td align="center">Ctrl+U</td><td align="center">下划线</td></tr><tr><td align="center">Ctrl+4</td><td align="center">四阶标题</td><td align="center">Ctrl+Home</td><td align="center">返回顶部</td></tr><tr><td align="center">Ctrl+5</td><td align="center">五阶标题</td><td align="center">Ctrl+End</td><td align="center">返回底部</td></tr><tr><td align="center">Ctrl+6</td><td align="center">六阶标题</td><td align="center">Ctrl+T</td><td align="center">创建表格</td></tr><tr><td align="center">Ctrl+L</td><td align="center">选中某句话</td><td align="center">Ctrl+K</td><td align="center">创建超链接</td></tr><tr><td align="center">Ctrl+D</td><td align="center">选中某个单词</td><td align="center">Ctrl+F</td><td align="center">搜索</td></tr><tr><td align="center">Ctrl+E</td><td align="center">选中相同格式的文字</td><td align="center">Ctrl+H</td><td align="center">搜索并替换</td></tr><tr><td align="center">Alt+Shift+5</td><td align="center">删除线</td><td align="center">Ctrl+Shift+I</td><td align="center">插入图片</td></tr><tr><td align="center">Ctrl+Shift+M</td><td align="center">公式块</td><td align="center">Ctrl+Shift+Q</td><td align="center">引用</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。&lt;/p&gt;
&lt;p&gt;推荐软件 &lt;a href=&quot;https://www.typora.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Typora&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="小工具" scheme="https://ActionDing.github.io/categories/%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Markdown" scheme="https://ActionDing.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>images</title>
    <link href="https://actionding.github.io/2020/07/images/"/>
    <id>https://actionding.github.io/2020/07/images/</id>
    <published>2020-06-30T16:00:00.000Z</published>
    <updated>2020-07-19T07:19:11.663Z</updated>
    
    <content type="html"><![CDATA[<h5 id="本文用于生成图片文件夹，点击这里转到主页"><a href="#本文用于生成图片文件夹，点击这里转到主页" class="headerlink" title="本文用于生成图片文件夹，点击这里转到主页"></a>本文用于生成图片文件夹，点击<a href="https://actionding.github.io/">这里</a>转到主页</h5><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;本文用于生成图片文件夹，点击这里转到主页&quot;&gt;&lt;a href=&quot;#本文用于生成图片文件夹，点击这里转到主页&quot; class=&quot;headerlink&quot; title=&quot;本文用于生成图片文件夹，点击这里转到主页&quot;&gt;&lt;/a&gt;本文用于生成图片文件夹，点击&lt;a href=&quot;https://actionding.github.io/&quot;&gt;这里&lt;/a&gt;转到主页&lt;/h5&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
